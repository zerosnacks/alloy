searchState.loadedDescShard("alloy", 1, "A layer that signs transactions locally.\nA layer that can fill in a <code>TransactionRequest</code> with …\nAbsorb the control flow of another filler.\nReturns true if the filler is missing a required property.\nReturns <code>true</code> if the filler is should continnue filling.\nFills in the transaction request with the fillable …\nFills the transaction request, using the configured fillers\nReturns <code>true</code> if the filler is finished filling in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the filler is finished filling in the …\nReturns <code>true</code> if the filler is missing information required …\nReturns <code>true</code> if the filler is ready to fill in the …\nJoins this filler with another filler to compose multiple …\nJoins a filler to this provider\nGet a reference to the left filler.\nCreates a new <code>Missing</code> control flow.\nCreate a new <code>ChainIdFiller</code> with an optional chain ID.\nCreates a new signing layer with the given signer.\nCreates a new <code>JoinFill</code> with the given layers.\nCreates a new <code>FillProvider</code> with the given filler and inner …\nPrepares fillable properties, potentially by making an RPC …\nPrepares and fills the transaction request with the …\nReturns <code>true</code> if the filler is ready to fill in the …\nGet a reference to the right filler.\nReturn a control-flow enum indicating whether the filler …\nA layer that wraps an <code>Anvil</code> config. The config will be used\nA provider that wraps an <code>AnvilInstance</code>, preventing the …\nGet the instance http endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStarts the anvil instance, or gets a reference to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>AnvilProvider</code> with the given inner provider …\nGet the instance ws endpoint.\nTypes for a catch-all network.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nA signer capable of signing any transaction for the …\nThe network header type.\nThe JSON body of a header response.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA signer capable of signing any transaction for the given …\nContains the success value\nThe network receipt envelope type.\nA receipt response.\nThe JSON body of a transaction receipt.\nSigner error.\nA Transaction builder for a network.\nError type for transaction builders.\nThe JSON body of a transaction request.\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nGets the EIP-4844 blob sidecar of the transaction.\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nGet the default signer address. This address should be used\nEIP-2718 traits.\nGet the sender for the transaction.\nGet the gas limit for the transaction.\nGet the legacy gas price for the transaction.\nReturn true if the signer contains a credential for the …\nGet the input data for the transaction.\nSet the <code>to</code> field to a create call.\nGet the kind of transaction.\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nGet the max priority fee per gas for the transaction.\nGet the nonce for the transaction.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nTrim any conflicting keys and populate any computed fields …\nSets the EIP-2930 access list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nGet the recipient for the transaction.\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nDecoding trait for EIP-2718 envelopes. These envelopes …\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nEncoding trait for EIP-2718 envelopes. These envelopes …\nRlp error from <code>alloy_rlp</code>.\nGot an unexpected type flag while decoding.\nDecode an EIP-2718 transaction into a concrete instance\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nTrue if the envelope is the legacy variant.\nDecode an EIP-2718 transaction in the network format.\nReturn the network encoding. For non-legacy items, this is …\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie.\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nMultiplier for the current base fee to estimate max base …\nThe number of blocks from the past for which the fee …\nThe default percentile of gas premiums that are fetched …\nReturn type of EIP1155 gas fee estimator.\nAn estimator function for EIP1559 fees.\nThe default EIP-1559 fee estimator which is based on the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base fee per gas.\nThe max priority fee per gas.\nA handle to a backend. Communicates to a …\nThe reciprocal of <code>ConnectionHandle</code>.\nThe expected item.\nSome other value.\nConfiguration objects that contain connection details for …\nA <code>PubSubFrontend</code> is <code>Transport</code> composed of a channel to a …\nA Subscription is a feed of notifications from the server, …\nA Subscription is a feed of notifications from the server …\nAn item in a typed <code>Subscription</code>. This is either the …\nWrapper for <code>blocking_recv</code>. Block the current thread until …\nWrapper for <code>blocking_recv</code>. Block the current thread until …\nWrapper for <code>blocking_recv</code>, may produce unexpected values. …\nWrapper for <code>blocking_recv</code>. Block the current thread until …\nGet the currently configured channel size. This is the …\nClose the interface, sending an error to the frontend.\nSpawn the backend, returning a handle to it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the subscription ID for a local ID.\nGet a reference to the inner subscription.\nGet a mutable reference to the inner subscription.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the subscription into a stream that may yield …\nConvert the subscription into its inner <code>RawSubscription</code>.\nConvert the subscription into a stream that returns …\nConvert the configuration object into a service with a …\nConvert the subscription into a stream.\nConvert the subscription into a stream.\nReturns <code>true</code> if the broadcast channel is empty (i.e. there …\nReturns <code>true</code> if the broadcast channel is empty (i.e. there …\nReturns <code>true</code> if the transport connects to a local resource.\nReturns the number of messages in the broadcast channel …\nReturns the number of messages in the broadcast channel …\nGet the local ID of the subscription.\nGet the local ID of the subscription.\nCreate a new connection handle.\nWrapper for <code>recv</code>. Await an item from the channel.\nWrapper for <code>recv</code>. Await an item of the expected type from …\nWrapper for <code>recv</code>, may produce unexpected values. Await an …\nReceive a request from the frontend. Ensures that if the …\nWrapper for <code>recv</code>. Await an item from the channel, …\nWrapper for <code>resubscribe</code>. Create a new Subscription, …\nWrapper for <code>resubscribe</code>. Create a new <code>Subscription</code>, …\nWrapper for <code>resubscribe</code>. Create a new <code>RawSubscription</code>, …\nWrapper for <code>same_channel</code>. Returns <code>true</code> if the two …\nWrapper for <code>same_channel</code>. Returns <code>true</code> if the two …\nSend a request.\nSend a packet of requests, by breaking it up into …\nSend a pubsub item to the frontend.\nSet the channel size. This is the number of items to …\nShutdown the backend.\nAttempt to reconnect the transport.\nWrapper for <code>try_recv</code>. Attempt to receive a message from …\nWrapper for <code>try_recv</code>. Attempt to receive a message of the …\nWrapper for <code>try_recv</code>. Attempt to receive a message from …\nWrapper for <code>try_recv</code>. Attempt to receive a message from …\nUnsubscribe from a subscription.\nRead bytes from a buffer.\nA trait for values that provide sequential write access to …\nA cheaply cloneable and sliceable chunk of contiguous …\nA unique reference to a contiguous slice of memory.\nCustom Err.\nA type that can be decoded from an RLP blob.\nRLP prefix byte for a 0-length array.\nRLP prefix byte for 0-length string.\nA type that can be encoded via RLP.\nContains the error value\nRLP error type.\nThe header of an RLP item.\nOverran input while decoding.\nThe maximum length.\nLeading zero disallowed.\nGot an unexpected number of items in a list.\nDefines the max length of an <code>Encodable</code> type as a const …\nDefines the max length of an <code>Encodable</code> type as an …\nExpected single byte, but got invalid value.\nExpected size, but got invalid value.\nContains the success value\nNumeric Overflow.\nRLP result type.\nAn active RLP decoder, with a specific slice of a payload.\nDerives <code>Decodable</code> for the type whose implementation …\nDerives <code>Decodable</code> for the type whose implementation …\nDerives <code>Encodable</code> for the type which encodes the all …\nDerives <code>Encodable</code> for the type which encodes the fields …\nDerives <code>MaxEncodedLen</code> for types of constant size.\nExpected a payload of a specific size, got an unexpected …\nExpected another type, got a list instead.\nExpected another type, got a string instead.\nAdvance the internal cursor of the Buf\nAdvance the internal cursor of the BufMut\nReturns the number of bytes the <code>BytesMut</code> can hold without …\nCreates an adaptor which will chain this buffer with …\nCreates an adapter which will chain this buffer with …\nReturns a slice starting at the current position and of …\nReturns a mutable slice starting at the current BufMut …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nClears the buffer, removing all data.\nClears the buffer, removing all data. Existing capacity is …\nCreates <code>Bytes</code> instance from slice, by copying it.\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nDecodes the blob into the appropriate type. <code>buf</code> must be …\nDecodes an RLP header from the given buffer.\nDecodes the next payload from the given buffer, advancing …\nDecodes a string slice from the given buffer, advancing it.\nEncode a value.\nEncodes the type into the <code>out</code> buffer.\nEncodes the header into the <code>out</code> buffer.\nEncode a type with a known maximum size.\nEncode all items from an iterator.\nEncode a list of items.\nAppends given bytes to this <code>BytesMut</code>.\nConverts <code>self</code> into an immutable <code>Bytes</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Bytes</code> from a static slice.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nDecode the next item from the buffer.\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns true if there are any more bytes to consume\nReturns true if there is space in <code>self</code> for more bytes.\nImplement <code>MaxEncodedLen</code> and <code>MaxEncodedLenAssoc</code> for a type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns true if the <code>BytesMut</code> has a length of 0.\nReturns true if this is the only reference to the data.\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns the number of bytes contained in this <code>BytesMut</code>.\nReturns the length of the encoding of this type in bytes.\nReturns the length of the encoded header.\nDetermine the length in bytes of the length prefix of an …\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nTrue if list, false otherwise.\nCalculate the length of a list.\nInstantiate an RLP decoder with a payload slice.\nCreates a new empty <code>Bytes</code>.\nCreates a new <code>BytesMut</code> with default capacity.\nLength of the payload in bytes.\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nReturns the number of bytes that can be written from the …\nReserves capacity for at least <code>additional</code> more bytes to be …\nResizes the buffer so that <code>len</code> is equal to <code>new_len</code>.\nSets the length of the buffer.\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nReturns the remaining spare capacity of the buffer as a …\nRemoves the bytes from the current view, returning them in …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the buffer into two at the given index.\nCreates an adaptor which will read at most <code>limit</code> bytes …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nAbsorbs a <code>BytesMut</code> that was previously split off.\nCreates a new <code>BytesMut</code> with the specified capacity.\nCreates an adaptor which implements the <code>Write</code> trait for …\nCreates a new <code>BytesMut</code>, which is initialized with zero.\nExpected length.\nActual length.\nRead bytes from a buffer.\nA trait for values that provide sequential write access to …\nA cheaply cloneable and sliceable chunk of contiguous …\nA unique reference to a contiguous slice of memory.\nAdvance the internal cursor of the Buf\nAdvance the internal cursor of the BufMut\nUtilities for working with buffers.\nCreates an adaptor which will chain this buffer with …\nCreates an adapter which will chain this buffer with …\nReturns a slice starting at the current position and of …\nReturns a mutable slice starting at the current BufMut …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns true if there are any more bytes to consume\nReturns true if there is space in <code>self</code> for more bytes.\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nReturns the number of bytes that can be written from the …\nCreates an adaptor which will read at most <code>limit</code> bytes …\nCreates an adaptor which implements the <code>Write</code> trait for …\nRead bytes from a buffer.\nA trait for values that provide sequential write access to …\nA <code>Chain</code> sequences two buffers.\nIterator over the bytes contained by the buffer.\nA <code>BufMut</code> adapter which limits the amount of bytes that can …\nA <code>Buf</code> adapter which implements <code>io::Read</code> for the inner …\nA <code>Buf</code> adapter which limits the bytes read from an …\nUninitialized byte slice.\nA <code>BufMut</code> adapter which implements <code>io::Write</code> for the inner …\nAdvance the internal cursor of the Buf\nAdvance the internal cursor of the BufMut\nReturn a raw pointer to the slice’s buffer.\nReturn a <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> to this slice’s buffer.\nCreates an adaptor which will chain this buffer with …\nCreates an adapter which will chain this buffer with …\nReturns a slice starting at the current position and of …\nReturns a mutable slice starting at the current BufMut …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nCopies bytes  from <code>src</code> into <code>self</code>.\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nGets a mutable reference to the first underlying <code>Buf</code>.\nGets a reference to the first underlying <code>Buf</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>&amp;mut UninitSlice</code> from a pointer and a length.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a mutable reference to the underlying <code>BufMut</code>.\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a mutable reference to the underlying <code>BufMut</code>.\nGets a reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>BufMut</code>.\nGets a reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>BufMut</code>.\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns true if there are any more bytes to consume\nReturns true if there is space in <code>self</code> for more bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Chain</code>, returning the underlying values.\nConsumes this <code>IntoIter</code>, returning the underlying value.\nConsumes this <code>Limit</code>, returning the underlying value.\nConsumes this <code>Reader</code>, returning the underlying value.\nConsumes this <code>Take</code>, returning the underlying value.\nConsumes this <code>Writer</code>, returning the underlying value.\nGets a mutable reference to the last underlying <code>Buf</code>.\nGets a reference to the last underlying <code>Buf</code>.\nReturns the number of bytes in the slice.\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nReturns the maximum number of bytes that can be written\nReturns the maximum number of bytes that can be read.\nCreates a <code>&amp;mut UninitSlice</code> wrapping a slice of initialised …\nCreates an iterator over the bytes contained by the buffer.\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nReturns the number of bytes that can be written from the …\nSets the maximum number of bytes that can be written.\nSets the maximum number of bytes that can be read.\nCreates an adaptor which will read at most <code>limit</code> bytes …\nCreates a <code>&amp;mut UninitSlice</code> wrapping a slice of …\nWrite a single byte at the specified offset.\nCreates an adaptor which implements the <code>Write</code> trait for …\nEthereum JSON-RPC type definitions.\nA batch JSON-RPC request, used to bundle requests into a …\nConnection string for built-in transports.\nA builder for the transport  <code>RpcClient</code>.\nA borrowed <code>RpcClient</code>.\nHTTP transport.\nIPC transport.\nAn IPC Connection object.\nA channel yielding responses from a poller task.\nA poller task builder.\nA prepared, but unsent, RPC call.\nA JSON-RPC client.\nAn <code>RpcClient</code> in a <code>Weak</code> reference.\nWebSocket transport.\nSimple connection details for a websocket connection.\nAdd a call to the batch.\nThe authorization header to use.\nConvert this future into a boxed, pinned future, erasing …\nBoxes the transport.\nCreate a new <code>ClientBuilder</code>.\nGet the currently configured channel size. This is the …\nReturns the channel size for the poller task.\nConnect a transport, producing an <code>RpcClient</code> with the …\nConnect a transport, producing an <code>RpcClient</code> with a …\nConnect with the given connection string.\nConnect to a transport via a <code>PubSubConnect</code> implementor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>RpcClient</code> with the given inner client.\nBorrow the client.\nGet a <code>Weak</code> reference to the client.\nConvenience function to create a new <code>RpcClient</code> with a …\nConvenience function to create a new <code>RpcClient</code> with a <code>hyper</code>…\nGet a reference to the client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the client into its inner type.\nConvert this call into one with owned params, by cloning …\nStarts the poller and returns the stream of responses.\nConverts the poll channel into a stream.\nConverts the poll channel into a stream that also yields …\nConnect an IPC transport, producing an <code>RpcClient</code> with the …\nReturns <code>true</code> if the request is a subscription.\nAdd a middleware layer to the stack.\nReturns the limit on the number of successful polls.\nCreate a new batch request.\nCreates a new <code>RpcClient</code> with the given transport.\nCreate a new poller task.\nCreate a new <code>BatchRequest</code> builder.\nCreate a new <code>RpcClient</code> with an HTTP transport.\nGet a mutable reference to the params of the request.\nReturns the duration between polls.\nBuild a poller that polls a method with the given …\nConnect a pubsub transport, producing an <code>RpcClient</code> with …\nReturns a reference to the request.\nReturns a mutable reference to the request.\nResubscribe to the poller task.\nSend the batch future via its connection.\nSet the channel size.\nSets the channel size for the poller task.\nSet the request to be a non-standard subscription (i.e. not\nSets a limit on the number of successful polls.\nSets the duration between polls.\nSet the subscription status of the request.\nStarts the poller in a new Tokio task, returning a channel …\nCreate a new <code>RpcClient</code> with the given transport and the …\nTries to parse the given string as an HTTP URL.\nTries to parse the given string as an IPC path, returning …\nTries to parse the given string as a WebSocket URL.\nThe URL to connect to.\nSets the channel size for the poller task.\nSets a limit on the number of successful polls.\nSets the poll interval for the client in milliseconds.\nSets the duration between polls.\nConnect a WS transport, producing an <code>RpcClient</code> with the …\nA batch of responses.\nA batch of requests.\nA batch of responses.\nA <code>ErrorPayload</code> that has been partially deserialized, …\nA <code>Response</code> that has been partially deserialized, borrowing …\nA <code>BorrowedResponsePacket</code> is a <code>ResponsePacket</code> that has been …\nA <code>ResponsePayload</code> that has been partially deserialized, …\nA partially deserialized <code>RpcResult</code>, borrowing from the …\nJSON deserialization error.\nContains the error value\nContains the error value\nA JSONRPC-2.0 error object.\nServer returned an error response.\nAn ethereum-style notification, not to be confused with a …\nAn error response payload.\nAn error response payload.\nA JSON-RPC 2.0 ID object. This may be a number, a string, …\nReturned when a local pre-processing step fails. This …\nNull.\nAn Ethereum-style notification.\nServer returned a null response when a non-null response …\nA number.\nContains the success value\nContains the success value\nA <code>Request</code> that has been partially serialized. The request …\nAn item received over an Ethereum pubsub transport. …\nA JSON-RPC 2.0 request object.\n<code>RequestMeta</code> contains the <code>Id</code> and method name of a request.\nA <code>RequestPacket</code> is a <code>SerializedRequest</code> or a batch of …\nA JSONRPC-2.0 response object containing a <code>ResponsePayload</code>.\nA <code>Response</code> to a JSON-RPC request.\nA <code>ResponsePacket</code> is a <code>Response</code> or a batch of responses.\nA JSONRPC-2.0 response payload.\nAn RPC error.\nAn object that can be used as a JSON-RPC parameter and …\nAn object that can be used as a JSON-RPC parameter.\nThe result of a JSON-RPC request.\nAn object that can be used as a JSON-RPC return value.\nJSON serialization error.\nA JSON-RPC 2.0 request object that has been serialized, …\nA single response.\nA single request.\nA single response.\nA string.\nA successful response payload.\nA successful response payload.\nTransport error.\nRpc server returned an unsupported feature.\nReturns the ErrorPayload if the response is an error.\nFallible conversion to the error object.\nReturns the ID as a number, if it is one.\nReturns the ID as a string, if it is one.\nFallible conversion to the successful payload.\nSerialize the request parameters as a boxed <code>RawValue</code>.\nThe error code.\nThe error code.\nThe error data (if any).\nThe error data (if any).\nConsumes the serialized request, returning the underlying …\nAttempt to deserialize the data field.\nAttempt to deserialize the Error payload, transforming …\nAttempt to deserialize the Success payload, transforming …\nDeserialize an Error payload, if possible, transforming …\nDeserialize a Success payload, if possible, transforming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the request ID.\nThe ID of the request that this response is responding to.\nThe request ID.\nThe ID of the request that this response is responding to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this borrowed response packet into an owned packet …\nConvert this borrowed error payload into an owned payload …\nConvert this borrowed response payload into an owned …\nConvert this borrowed response to an owned response by …\nClone the request, including the request parameters.\nConsume the serialized request, returning the underlying …\nCheck if the packet is empty.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response is an error.\nReturns <code>true</code> if the ID is <code>None</code>.\nReturns <code>true</code> if the ID is a number.\nReturns <code>true</code> if the ID is a string.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response is a success.\nReturns an iterator over the ErrorPayloads in the response.\nGet the number of requests in the packet.\nThe error message (if any).\nThe error message (if any).\nReturns the request metadata (ID and Method).\nThe request metadata (ID and method).\nThe request metadata (ID and method).\nReturns the request method.\nThe method name.\nCreate a new <code>RequestMeta</code>.\nCreate a new <code>Request</code>.\nGet a reference to the serialized request’s params.\nThe request parameters.\nThe request parameters.\nGet the hash of the serialized request’s params.\nThe response payload.\nThe response payload.\nPush a request into the packet.\nFind responses by a list of IDs.\nThe notification payload.\nSerialize the packet as a boxed <code>RawValue</code>.\nSerialize the request, including the request parameters.\nReturns the serialized request.\nIndicates that the request is a non-standard subscription …\nIndicates that the request is a non-standard subscription …\nMark the request as a non-standard subscription (i.e. not …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nThe subscription ID.\nGet the request IDs of all subscription requests in the …\nTake the serialized request, consuming the …\nTransform a transport response into an <code>RpcResult</code>, …\nTransform a transport outcome into an <code>RpcResult</code>, …\nAttempt to deserialize the params, borrowing from the …\nDeserialize the error’s <code>data</code> field, borrowing from the …\nAttempt to deserialize the <code>Ok(_)</code> variant of an <code>RpcResult</code>.\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the params.\nAttempt to deserialize the success payload, borrowing from …\nAttempt to deserialize the success payload, borrowing from …\nCreate a new empty packet with the given capacity.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nACCEPTED is returned by the engine API in the following …\nBesu\nInvalid payload base fee.\nInvalid payload blob gas used.\nThis includes all bundled blob related data of an executed …\nInvalid payload block hash.\nThe list of all supported Engine capabilities available …\nFields introduced in <code>engine_newPayloadV3</code> that are not …\nClaims in JWT are used to represent a set of information …\nThis enum defines a standard for specifying a client with …\nContains information which identifies a client …\nEncountered decoding error.\nThis structure maps onto the deposit object from EIP-6110.\nErigon\nEthereumJS\nContains the error value\nInvalid payload excess blob gas.\nAn execution payload, which can be either …\nThe execution payload body response that allows for <code>null</code> …\nThis structure contains a body of an execution payload.\nThis structure maps for the return value of …\nThis structure maps for the return value of …\nThis represents the <code>executionPayload</code> field in the return …\nThis is the input to <code>engine_newPayloadV2</code>, which may or may …\nThis structure maps on the ExecutionPayload structure of …\nThis structure maps on the ExecutionPayloadV2 structure of …\nThis structure maps on the ExecutionPayloadV3 structure of …\nThis structure maps on the ExecutionPayloadV4 structure of …\nThis structure maps onto the exit object\nInvalid payload extra data.\nRepresents possible variants of a processed forkchoice …\nThis structure encapsulates the fork choice state\nA standalone forkchoice update errors for RPC.\nRepresents a successfully <em>processed</em> forkchoice state …\nGeth, go-ethereum\nGrandine\ninvalid forkchoice state error code.\ninvalid forkchoice state error message.\ninvalid payload attributes error code.\ninvalid payload attributes error message.\nINVALID is returned by the engine API in the following …\nThrown when a new payload contains a wrong block number.\nThe “iat” (issued-at) claim in the JWT is not within …\nThe JWT key length provided is invalid, expecting a …\nThe provided signature in the JWT is invalid.\nThe given ForkchoiceState is invalid or inconsistent.\nThrown when a new payload contains a wrong state root\nExpected blob versioned hashes do not match the given …\nAn error occurred during JWT decoding.\nErrors returned by the <code>JwtSecret</code>\nValue-object holding a reference to a hex-encoded 256-bit …\nAn error encountered while decoding the hexadecimal string …\nLighthouse\nLodestar\nThrown when a forkchoice update’s head links to a …\nA container type for CancunPayloadFields that may or may …\nNimbus\nNethermind\nContains the success value\nThis structure maps for the return value of …\nOptimism Payload Attributes\nPrysm\nThis structure contains the attributes required to …\nError that can occur when handling payloads.\nAnd 8-byte identifier for an execution payload.\nThis structure contains the result of processing a payload …\nRepresents the status response of a payload.\nVarious errors that can occur when validating a payload or …\nPre-cancun Payload has blob transactions.\nReth\nSYNCING is returned by the engine API in the following …\nTeku\nThis structure contains configurable settings of the …\nThrown when a forkchoice final block does not exist in the …\nThe signature algorithm used in the JWT is not supported. …\nThe forkchoice update has been processed, but the …\nV1 payload\nV1 payload\nV2 payload\nV2 payload\nV3 payload\nVALID is returned by the engine API in the following calls:\nAmount of withdrawn ether in gwei.\nAmount of ether deposited in gwei\nReturns the client identifier as str.\nReturns the string representation of the payload status.\nReturns a reference to the V1 payload.\nReturns a mutable reference to the V1 payload.\nReturns a reference to the V2 payload, if any.\nReturns a mutable reference to the V2 payload, if any.\nReturns a reference to the V2 payload, if any.\nReturns a mutable reference to the V2 payload, if any.\nThe base fee per gas of the block.\nArray of hex <code>u64</code> representing blob gas used, enabled with …\nAll blobs in the bundle.\nThe blobs, commitments, and proofs associated with the …\nThe blobs, commitments, and proofs associated with the …\nReturns the block hash for the payload.\nThe block hash of the block.\nReturns the block number for this payload.\nThe block number.\nThe expected value to be received by the feeRecipient in …\nThe expected value to be received by the feeRecipient in …\nThe expected value to be received by the feeRecipient in …\nReturns the human readable client name for the given code.\nClient code, e.g. GE for Geth\nfirst four bytes of the latest commit hash of this build …\nAll commitments in the bundle.\nBy default, the <code>iat</code> claim is set to the current timestamp.\nArray of deposits.\nEncode the header and claims given and sign the payload …\nArray of hex<code>u64</code> representing excess blob gas, enabled with …\nExecution payload V3\nThe V1 execution payload\nExecution payload, which could be either V1 or V2\nExecution payload V3\nArray of exits\nThe “exp” (expiration time) claim identifies the …\nThe extra data of the block.\nThe fee recipient of the block.\nHash of finalized block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an instance of <code>JwtSecret</code>.\nCreates a new ForkchoiceUpdated with the given …\nCreates a new payload status from the given status.\nIf set, this sets the exact gas limit the block produced …\nThe gas limit of the block.\nThe gas used of the block.\nHash of the head block.\nThe “iat” value MUST be a number containing a …\nDeposit index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>MaybeCancunPayloadFields</code> with the given …\nConsumes the payload and returns the V1 payload.\nReturns the inner ExecutionPayloadV1\nReturns the ExecutionPayload for the <code>engine_getPayloadV1</code> …\nReturns <code>true</code> if the error is caused by a block hash …\nReturns true if the payload status is invalid.\nReturns true if the payload status is invalid.\nReturns true if the payload status is invalid.\nReturns <code>true</code> if the error is caused by invalid block …\nReturns true if the payload status is syncing.\nReturns true if the payload status is syncing.\nReturns true if the payload status is syncing.\nReturns true if the payload status is valid.\nReturns true if the payload status is valid.\nReturns true if the payload status is valid.\nHash of the most recent valid block in the branch defined …\nThe logs bloom of the block.\nSets the latest valid hash if it’s not None.\nHuman-readable name of the client, e.g. Lighthouse or …\nCreates a new ForkchoiceUpdated with the given …\nCreates a new payload id from the given identifier.\nCreates a new blob bundle from the given sidecars.\nInitializes a new payload status.\nIf true, the no transactions are taken out of the tx-pool, …\nReturns a new <code>MaybeCancunPayloadFields</code> with no cancun …\nReturns the parent beacon block root, if any.\nThe parent beacon block root.\nEcotone parent beacon block root\nRoot of the parent beacon block enabled with V3.\nReturns the parent hash for the payload.\nThe parent hash of the block.\nPayload types.\nThe payload attributes\nThe identifier of the payload build process that was …\nInner V1 payload\nInner V2 payload\nInner V3 payload\nRepresents the outcome of the validation of the payload, …\nReturns the sidecar from the bundle\nReturns the prev randao for this payload.\nThe previous randao of the block.\nValue for the <code>prevRandao</code> field of the new payload\nAll proofs in the bundle.\nValidator public key.\nValidator public key\nGenerates a random <code>JwtSecret</code> containing a hex-encoded 256 …\nThe receipts root of the block.\nHash of the safe block.\nIntroduced in V3, this represents a suggestion from the …\nIntroduced in V3, this represents a suggestion from the …\nDeposit signature\nAddress of the source of the exit.\nThe state root of the block.\nThe status of the payload.\nSuggested value for the <code>feeRecipient</code> field of the new …\nTake <code>len</code> blob data from the bundle.\nMaps on TERMINAL_BLOCK_HASH parameter of EIP-3675\nMaps on TERMINAL_BLOCK_NUMBER parameter of EIP-3675\nMaps on the TERMINAL_TOTAL_DIFFICULTY parameter of EIP-3675\nReturns the timestamp for the execution payload.\nReturns the timestamp for the payload.\nReturns the timestamp for the payload.\nReturns the timestamp for the payload.\nThe timestamp of the block.\nValue for the <code>timestamp</code> field of the new payload\nTransactions is a field for rollups: the transactions list …\nThe transactions of the block.\nEnveloped encoded transactions.\nValidates a JWT token along the following rules:\nReturns the validation error if the payload status is …\nThe version string of the current implementation e.g. …\nReturns the blob versioned hashes, if any.\nThe expected blob versioned hashes.\nSets the latest valid hash of the payload status.\nSets the latest valid hash.\nSets the payload id of the created payload job.\nWithdrawal credentials\nReturns the withdrawals for the payload.\nReturns the withdrawals for the payload.\nReturns the withdrawals for the payload.\nThe payload withdrawals\nArray of <code>Withdrawal</code> enabled with V2 See …\nAll withdrawals in the block.\nArray of <code>Withdrawal</code> enabled with V2 See …\nThe block hash provided with the payload.\nThe block hash computed from the payload.\nThe error message for the invalid payload.\nThe state root of the payload that we computed locally.\nThe state root of the payload we received from remote (CL)\nACCEPTED is returned by the engine API in the following …\nInvalid payload base fee.\nInvalid payload blob gas used.\nThis includes all bundled blob related data of an executed …\nInvalid payload block hash.\nEncountered decoding error.\nInvalid payload excess blob gas.\nAn execution payload, which can be either …\nThe execution payload body response that allows for <code>null</code> …\nThis structure contains a body of an execution payload.\nThis structure maps for the return value of …\nThis structure maps for the return value of …\nThis represents the <code>executionPayload</code> field in the return …\nThis is the input to <code>engine_newPayloadV2</code>, which may or may …\nThis structure maps on the ExecutionPayload structure of …\nThis structure maps on the ExecutionPayloadV2 structure of …\nThis structure maps on the ExecutionPayloadV3 structure of …\nThis structure maps on the ExecutionPayloadV4 structure of …\nInvalid payload extra data.\nINVALID is returned by the engine API in the following …\nThrown when a new payload contains a wrong block number.\nThrown when a new payload contains a wrong state root\nExpected blob versioned hashes do not match the given …\nThrown when a forkchoice update’s head links to a …\nThis structure contains the attributes required to …\nError that can occur when handling payloads.\nAnd 8-byte identifier for an execution payload.\nThis structure contains the result of processing a payload …\nRepresents the status response of a payload.\nVarious errors that can occur when validating a payload or …\nPre-cancun Payload has blob transactions.\nSYNCING is returned by the engine API in the following …\nV1 payload\nV1 payload\nV2 payload\nV2 payload\nV3 payload\nVALID is returned by the engine API in the following calls:\nThe base fee per gas of the block.\nArray of hex <code>u64</code> representing blob gas used, enabled with …\nAll blobs in the bundle.\nThe blobs, commitments, and proofs associated with the …\nThe block hash of the block.\nThe block number.\nThe expected value to be received by the feeRecipient in …\nThe expected value to be received by the feeRecipient in …\nAll commitments in the bundle.\nArray of deposits.\nArray of hex<code>u64</code> representing excess blob gas, enabled with …\nThe V1 execution payload\nExecution payload, which could be either V1 or V2\nExecution payload V3\nArray of exits\nThe extra data of the block.\nThe fee recipient of the block.\nThe gas limit of the block.\nThe gas used of the block.\nHash of the most recent valid block in the branch defined …\nThe logs bloom of the block.\nRoot of the parent beacon block enabled with V3.\nThe parent hash of the block.\nInner V1 payload\nInner V2 payload\nInner V3 payload\nThe previous randao of the block.\nValue for the <code>prevRandao</code> field of the new payload\nAll proofs in the bundle.\nThe receipts root of the block.\nIntroduced in V3, this represents a suggestion from the …\nThe state root of the block.\nThe status of the payload.\nSuggested value for the <code>feeRecipient</code> field of the new …\nThe timestamp of the block.\nValue for the <code>timestamp</code> field of the new payload\nThe transactions of the block.\nEnveloped encoded transactions.\nThe payload withdrawals\nArray of <code>Withdrawal</code> enabled with V2 See …\nAll withdrawals in the block.\nArray of <code>Withdrawal</code> enabled with V2 See …\nThe block hash provided with the payload.\nThe block hash computed from the payload.\nThe error message for the invalid payload.\nThe state root of the payload that we computed locally.\nThe state root of the payload we received from remote (CL)\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list with gas used appended.\nAccount information.\nReceipt envelope, as defined in EIP-2718.\nAlias for a catch-all receipt type.\nA vector of values\nThe hash of the block if the filter only targets a single …\nBase fee per gas integer conversion error\nBlob gas used integer conversion error\nThis represents a set of blobs, and its corresponding …\nBlock representation\nError that can occur when converting other types to blocks\nEither a block hash <em>or</em> a block number\nA Block Identifier. …\nBlock number and hash.\nA block Number (or tag - “latest”, “earliest”, “…\nBlockOverrides is a set of header fields to override.\nAn iterator over the transaction hashes of a block.\nAn Iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of Block should be …\nHelper type to represent a bloom filter used for matching …\nBundle of transactions\nChain status.\nError variants when converting from crate::Transaction to …\nResponse for EIP-1186 account proof <code>eth_getProof</code>\nData structure with proof for one single storage-entry\nEarliest block (genesis)\nReceipt envelope with type flag 2, containing a EIP-1559 …\nError during EIP-2718 transaction coding.\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nEmpty result.\nCallResponse for eth_callMany\nExcess blob gas integer conversion error\nExtended account information (used by <code>parity_allAccountInfo</code>…\nResponse type for <code>eth_feeHistory</code>\nFilter for logs.\nRepresents the target range of blocks for the filter\nResponse of the <code>eth_getFilterChanges</code> RPC.\nOwned equivalent of a <code>SubscriptionId</code>\nFilterSet is a set of values that will be used to filter …\nSupport for matching Filters\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nReceive full details of the transactions.\nGas limit integer conversion error\nGas used integer conversion error\nA block hash and an optional bool that defines if it’s …\nA block hash\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nNew hashes (block or transactions).\nReceive only the hashes of the transactions.\nBlock header representation.\nPeer count as hex\nA hex encoded or decimal index that’s intended to be …\nInfo when syncing\nA transaction failed sender recovery\nInvalid signature\nLatest block\nReceipt envelope with no type flag.\nEthereum Log emitted by a transaction\nNew logs.\nMissing <code>accessList</code> field for EIP-2930 transaction.\nMissing <code>blobVersionedHashes</code> field for EIP-4844 transaction.\nMissing block number\nMissing <code>chainId</code> field for EIP-1559 transaction.\nMissing full transactions required for block decoding\nMissing <code>gasPrice</code> field for Legacy transaction.\nMissing <code>maxFeePerBlobGas</code> field for EIP-1559 transaction.\nMissing <code>maxFeePerGas</code> field for EIP-1559 transaction.\nMissing <code>maxPriorityFeePerGas</code> field for EIP-1559 …\nMissing signature for transaction.\nMissing <code>to</code> field for EIP-4844 transaction.\nMissing y parity in signature.\nThis includes general information about a running node, …\nNot syncing\nNumeric id\nBlock by number from canon chain\nA block number\nA block number\nPeer count as integer\nAdditional fields for Optimism transaction receipts\nType that represents the signature parity byte, meant for …\nNumber of peers connected to.\nPeer Ethereum protocol information\nPeer connection information\nPeer network information\nPeer protocols information\nPeers info\nPending block (not yet part of the blockchain)\nSpecifies the kind of information you wish to receive from …\nPeer PIP protocol information\nRepresents a range of blocks with optional from and to …\nEthereum Log\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\naccount derived from a signature as well as information …\nValue representation with additional info\nA Block representation that allows to include additional …\nHeader representation with additional info.\nA raw block failed to decode\nA block hash which may have a boolean requireCanonical …\nSafe head block\nContainer type for all signature fields in RPC\n<code>alloy_primitives::SignatureError</code>.\nState context for callMany\nString id\nSyncing info\nSync status\nA single topic\nTransaction object used in RPC\nAdditional fields in the context of a block that contains …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nPropagation statistics for pending transaction.\nNew transactions.\nInternal struct to calculate reward percentiles\nSpecial case for uncle response.\nA single value\nUnion type for representing a single value or a vector of …\nWrapper allowing to catch all fields missing on the inner …\nWithdrawal represents a validator withdrawal from the …\nThe result of an <code>eth_getWork</code> request\nSets the access list for the transaction.\nGet the EIP-2930 access list for the transaction.\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nEIP2930\nThe account proof.\nNumber of active peers\nSets the inner filter object\nGetter for the address field. Shortcut for …\nAccount addresses that would be loaded at the start of …\nThe account address.\naddress of the recovered account\nTarget address for withdrawn ether.\nAddress\nContract that emitted this log.\nReturns the BloomFilter for the given address\nTypes for the admin api\nValue of the withdrawal in gwei.\nReturns the range (<code>fromBlock</code>, <code>toBlock</code>) if this is a range …\nPins the block hash for the filter\nThe account balance.\nOverrides the basefee of the block.\nBase fee of the block.\nAn array of block base fees per blob gas. This includes …\nBase fee per unit of gas (if past London)\nAn array of block base fees per gas. This includes the …\nReturns the blob fee for <em>this</em> block according to the …\nThe price paid by the eip-4844 transaction per blob gas.\nBlob gas used\nBlob gas used by the eip-4844 transaction\nAn array of block blob gas used ratios. These are …\nBlob versioned hashes for EIP-4844 transactions.\nContains the blob hashes for eip-4844 transactions.\nThe blob data.\nDescribes the gap in the blockchain, if there is one: …\nA block hash\nA dictionary that maps blockNumber to a user-defined hash. …\nHash of the block the transaction that emitted this log …\nHash of the block.\nHash of the block this transaction was included within.\nBlock hash\nBlock Number\nNumber of the block the transaction that emitted this log …\nNumber of the block.\nNumber of the block this transaction was included within.\nBlock number\nFilter block options, specifying on which blocks the …\nBlock overrides to apply\nThe timestamp of the block as proposed in: …\nBuild an <code>TypedTransaction</code>\nReturn the tx type this request can be built as. Computed …\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nCalculates the address that will be created by the …\nCapabilities\nThe chain ID for the transaction.\nThe chain id of the transaction, if any.\nThe hash of the code of the account.\nOverrides the coinbase address of the block.\nThe blob commitments.\nCheck if all necessary keys are present to build a 1559 …\nCheck if all necessary keys are present to build a 2930 …\nCheck if all necessary keys are present to build a 4844 …\nCheck if all necessary keys are present to build a legacy …\nNumber of connected peers\nContract address created, or None if not a deployment.\nConverts <code>self</code> into <code>Hashes</code>.\nGas used\nCurrent block\nGetter for the data field. Shortcut for <code>log.inner.data</code>.\nArbitrary length data.\nTransaction data\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nDeserializes a boolean value into …\nDifficulty\nOverrides the difficulty of the block.\nPeer total difficulty if known\nPeer total difficulty\nThe price paid post-execution by the transaction (i.e. …\nThe enode URL of the connected node.\nThe ENR of the running client.\nReturns the value if present, otherwise returns the error.\nCommonly used errors for the <code>eth_</code> namespace.\neth_call output (if error)\nEthereum protocol information\nGiven the event signature in string form, it hashes it and …\nSets event_signature(topic0) (the event name for …\nHashes all event signatures and sets them as array to …\nExcess blob gas\nExtra data\nAdditional fields that should be serialized into the <code>Block</code> …\nAdditional fields that should be serialized into the <code>Block</code> …\nAdditional fields that should be serialized into the <code>Block</code> …\nReturns the configured fee cap, if any.\nThe original filter, if any\nReturns <code>true</code> if the filter matches the given address.\nReturns <code>true</code> if the filter matches the given block hash.\nReturns true if the filter matches the given block number\nReturns <code>true</code> if the log matches the given topics\nBlock no this transaction was first seen.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the call to the provided address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAddress of the sender\nThe address of the transaction author.\nSender\nSets the from block number\nThe gas limit for the transaction.\nGas amount\nSets the gas limit for the transaction.\nGas Limit\nOverrides the gas limit of the block.\nThe legacy gas price.\nGas Price\nEstimated gas used with access list.\nGas Used\nGas used by the transaction\nGas used by this transaction alone.\nAn array of block gas used ratios. These are calculated as …\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the <code>toBlock</code> value, if any\nReturns the numeric value of the <code>fromBlock</code> field\nGets invalid fields for EIP-1559 transaction type\nGets invalid fields for all transaction types\nReturns the <code>fromBlock</code> value, if any\nReturns the numeric value of the <code>toBlock</code> field\nReturns true if at least one topic is set\nBlock hash\nBlock hash\nHash of the block\nHash of the transaction.\nHash\nReturns an iterator over references to the transaction …\nReturns an iterator over mutable references to the …\nSHA3 of peer best block hash\nSHA3 of peer best block hash\nHeader of the block.\nHighest block seen so far\nUnique node identifier.\nPublic node id\nMonotonically increasing identifier issued by consensus …\nIndex of the transaction in the block\nStandard value.\nStandard value.\nThe inner struct.\nThe receipt envelope.\nStandard value.\nConsensus log object\nThe receipt envelope, which contains the consensus receipt …\nThe inner struct.\nSets the input data for the transaction.\nReturns the optional input data.\nTransaction data.\nTransaction data\nData\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a block with Tx hashes into a full block.\nConverts <code>self</code> into <code>Hashes</code>.\nConsumes the type and returns the optional input data.\nThe IP address of the connected node.\nWhether the block has no transactions.\nReturns whether the filter is empty\nReturns true if the enum variant is used for full …\nCheck if the enum variant is used for hashes.\nReturns true if this is a range filter and has a from block\nReturn <code>true</code> if filter configured to match pending block. …\nReturn <code>true</code> if the filter configured to match pending …\nReturns true if the enum variant is used for an uncle …\nIf the signature contains chain replay protection, And the …\nReturns an iterator over the transaction hashes.\nStorage key.\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nReturns the base fee of the latest block in the …\nReturns the blob fee of the latest block in the …\nReturns the number of transactions.\nThe node’s listening address.\nLocal endpoint address\nDecode the log data into a typed log.\nLog Index in Block\nLog send from contracts.\nCalculate receipt logs bloom.\nThe bloom filter.\nLogs bloom\nMaps the inner receipt value of this receipt.\nReturns whether the given bloom matches the list of Blooms …\nReturns whether the given value matches the filter. It the …\nReturns <code>true</code> if the bloom contains one of the address …\nReturns <code>true</code> if the bloom matches the topics\nMax number of peers\nThe max fee per blob gas for EIP-4844 blob transactions.\nConfigured max fee per blob gas for eip-4844 transactions\nSets the maximum fee per gas for the transaction.\nThe max base fee per gas the sender is willing to pay.\nMax BaseFeePerGas the user is willing to pay.\nSets the maximum priority fee per gas for the transaction.\nThe max priority fee per gas the sender is willing to pay, …\nThe miner’s tip.\nCreates a new instance with the given input data.\nAccount meta JSON\nAlias of <code>author</code>\nCheck if all necessary keys are present to build a …\nMix Hash\nAccount name\nAccount name\nThe node’s user agent, containing a client name, …\nNode client ID\nNetwork information\nCreates a new, empty filter\nCreates a new wrapper type for a Filter, if any with …\nCreates a new instance with the given input data.\nCreate a new <code>Extra</code>.\nReturns the base fee of the next block.\nReturns the blob base fee of the next block.\nReturns the blob fee for the next block according to the …\nCalculate excess blob gas for the next block according to …\nSets the nonce for the transaction.\nThe account nonce.\nNonce\nThe nonce of the transaction.\nNonce\nBlock number\nBlock number\nBlock number\nOverrides the block number.\nThe block number: this isn’t always stored.\nLowest number block of the returned range.\nSupport for capturing other fields\nAll fields not present in the inner struct.\nSupport for arbitrary additional fields.\nArbitrary extra fields.\nAll fields not present in the inner struct.\nParent beacon block root\nHash of the parent\nDetailed information on peers\nPIP protocol information.\nPopulate the <code>blob_versioned_hashes</code> key, if a sidecar …\nThe node’s listening ports.\nThe proof-of-work hash.\nCheck this builder’s preferred type, based on the fields …\nproof for the pair\nThe blob proofs.\nPeers this transaction was propagated to with count.\nThe protocols that the node supports, with protocol …\nProtocols information\npublic key of the recovered account\nEthereum types for pub-sub\nThe R field of the signature; the point on the curve.\nOverrides the prevrandao of the block.\nEthereum log object.\nThe receipt.\nTransactions receipts root hash\nRemote endpoint address\nGeth Compatibility Field: whether this log was removed\nAlloy basic Transaction Request type.\nWhether the block must be a canonical block\nReserialize the data, returning a new <code>Log</code> object wrapping …\nReserialize the inner data, returning an …\nThe effective gas tip by the transaction\nAn (optional) array of effective priority fee per gas data …\nThe S field of the signature; the point on the curve.\nThe seed hash.\nSets the inner filter object\nSerializes the <code>PendingTransactionFilterKind</code> into a boolean …\nSets the EIP-2930 access list.\nSets the block number this range filter should start at.\nPins the block hash this filter should target.\nSets the block number this range filter should end at.\nBlob sidecar for EIP-4844 transactions.\nAll <em>flattened</em> fields of the transaction signature.\nInteger the size of this block in bytes.\nStarting block\nbindings for state overrides in eth_call\nState root hash\nThe post-transaction stateroot (pre Byzantium)\nReturns the status of the transaction.\nIf transaction is executed successfully.\nThe hash of the storage of the account.\nKeys of storage that would be loaded at the start of …\nThe storage proof.\nThe target.\nOverrides the timestamp of the block.\nTimestamp\nSets the recipient address for the transaction.\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nRecipient\nSets the to block number\nReturns a list of Bloom (BloomFilter) corresponding to the …\nReturns a ValueOrArray inside an Option, so that:\nSets topic0 (the event name for non-anonymous events)\nSets the 1st indexed topic\nSets the 2nd indexed topic\nSets the 3rd indexed topic\nGetter for the topics field. Shortcut for …\nTopics (maximum of 4)\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nReturns the BloomFilter for the given topics\nGet the topic list, mutably. This gives access to the …\nTotal difficulty\nRPC types for transactions\nTransaction Hash\nTransaction Hash.\nInclusive number of tx to replay in block. -1 means replay …\nIndex of the Transaction in the block\nIndex within the block.\nTransaction Index\nReturns the transaction type.\nSets the transactions type for the transactions.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nEIP2718\nBlock Transactions. In the case of an uncle block, this …\nAll transactions to execute\nTransactions root hash\nTrim field conflicts, based on the preferred type\nConsumes the type and returns the optional input data.\nTypes for the <code>txpool</code> namespace: …\nThe transaction type.\nReturns an instance of BlockTransactions with the Uncle …\nUncles’ hashes.\nHash of the uncles\nReturns the optional input data.\nAccount UUID (<code>None</code> for address book entries)\nFor EIP-155, EIP-2930 and Blob transactions this is set to …\nIndex of validator associated with withdrawal.\nSets the value (amount) for the transaction.\nValue that the key holds\neth_call output (if no error)\nThe value transferred in the transaction, in wei.\nTransferred value\nNegotiated ethereum protocol version\nNegotiated PIP protocol version\nWarp sync snapshot chunks total.\nWarp sync snapshot chunks processed.\nWithdrawals in the block.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nThe y parity of the signature. This is only used for typed …\nThe block number or tag this filter should start at.\nThe block number or that this filter should end at.\nRepresents a short summary of the <code>eth</code> sub-protocol …\nCan contain either eth protocol info or a string “…\nRepresents a short summary of the <code>eth</code> sub-protocol …\nThe string “handshake” if the peer is still completing …\nThe string “handshake” if the peer is still completing …\nThe <code>eth</code> sub-protocol metadata known about the host peer.\nThe <code>snap</code> sub-protocol metadata known about the host peer.\nThis includes general information about a running node, …\nRepresents a short summary of information known about a …\nRepresents networking related information about the peer, …\nRepresents the protocols that a peer supports.\nRepresents a node’s discovery and listener ports.\nRepresents protocols that the connected RPC node supports.\nRepresents a short summary of the <code>snap</code> sub-protocol …\nCan contain either snap protocol info or a string “…\nRepresents a short summary of the host’s <code>snap</code> …\nThe peer’s capabilities.\nThe chain configuration for the host’s fork rules.\nThe total difficulty of the host’s blockchain.\nThe node’s discovery port.\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nDetails about the node’s supported eth protocol. <code>None</code> if …\nDetails about the peer’s supported eth protocol. <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Keccak hash of the host’s genesis block.\nThe hash of the host’s best known block.\nUnique node identifier.\nThe peer’s enode ID.\nWhether or not the peer is inbound.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IP address of the connected node.\nThe node’s listening address.\nThe node’s listener port.\nThe local endpoint of the TCP connection.\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nThe eth network version.\nNetworking information about the peer.\nPlaceholder for any other protocols\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nThe remote endpoint of the TCP connection.\nDetails about the node’s supported snap protocol. <code>None</code> …\nDetails about the peer’s supported snap protocol. <code>None</code> …\nWhether or not the peer is a static peer.\nWhether or not the peer is trusted.\nThe negotiated eth version.\nThe negotiated snap version.\nList of JSON-RPC error codes\nCustom geth error code, …\nhttps://eips.ethereum.org/EIPS/eip-1898\nThrown when a block wasn’t found …\nFailed to send transaction, See also …\nThrown when querying for <code>finalized</code> or <code>safe</code> block before …\nReturns the error code as <code>i32</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type that is supposed to capture additional fields that …\nDeserialized this type into another container type\nReturns the argument unchanged.\nReturns the deserialized value of the field, if it exists\nReturns the deserialized value of the field, if it exists. …\nCalls <code>U::from(self)</code>.\nCreates a new instance\nRemoves the deserialized value of the field, if it exists\nRemoves the deserialized value of the field, if it exists …\nRemoves the deserialized value of the field, if it exists. …\nBoolean parameter for new pending transactions.\nSyncing metadata.\nFull Transaction\nNew block header.\nLog\nLogs subscription.\nLog parameters.\nNew block headers subscription.\nNew Pending Transactions subscription.\nNo parameters passed.\nAny additional parameters for a subscription.\nResponse type for a SyncStatus subscription.\nIf not currently syncing, this should always be <code>false</code>.\nSubscription kind.\nSubscription result.\nSyncStatus\nSync status metadata.\nNode syncing status subscription.\nTransaction hash\nThe current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe highest block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it’s a bool parameter.\nReturns true if it’s a log parameter.\nThe starting block.\nWhether the node is currently syncing.\nEthereum Log\nContract that emitted this log.\nArbitrary length data.\nCalculate receipt logs bloom.\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nError thrown when both <code>data</code> and <code>input</code> fields are set and …\nRepresents <em>all</em> transaction requests to/from RPC.\nAn EIP-2930 access list, which lowers cost for accessing …\nBlob versioned hashes for EIP-4844 transactions.\nThe chain ID for the transaction.\nTransaction data\nReturns the argument unchanged.\nThe address of the transaction author.\nThe gas limit for the transaction.\nThe legacy gas price.\nTransaction data.\nTransaction data\nCalls <code>U::from(self)</code>.\nThe max fee per blob gas for EIP-4844 blob transactions.\nThe max base fee per gas the sender is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe nonce of the transaction.\nBlob sidecar for EIP-4844 transactions.\nThe destination address of the transaction.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nThe value transferred in the transaction, in wei.\nA storage key type that can be serialized to and from a …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nHelpers for dealing with numbers. Numeric serde helpers.\nSerde serialization and deserialization for <code>bool</code> as <code>0x0</code> or …\nSerialize a B256 as a hex string <em>without</em> the “0x” …\nSerialize a byte vec as a hex string <em>without</em> the “0x” …\nStorage related helpers.\nJson U256 serde helpers.\nserde functions for handling primitive optional <code>u128</code> via …\nserde functions for handling <code>Vec&lt;Vec&lt;u128&gt;&gt;</code> via U128\nserde functions for handling <code>Vec&lt;u128&gt;</code> via U128\nserde functions for handling primitive <code>u128</code> via U128\nserde functions for handling <code>Option&lt;u64&gt;</code> via U64\nserde functions for handling <code>u64</code> via U64\nserde functions for handling <code>Option&lt;u8&gt;</code> via U8\nserde functions for handling <code>u8</code> via U8\nDeserializes an <code>Option&lt;u128&gt;</code> accepting a hex quantity …\nSerializes <code>Option&lt;u128&gt;</code> as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>Option</code> from U64 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>u64</code> from U64 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>Option</code> from U8 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>u8</code> from U8 accepting a hex quantity string …\nSerializes u64 as hex string\nDeserializes a <code>bool</code> via a U1 quantity.\nSerializes a <code>bool</code> via a U1 quantity.\nA storage key type that can be serialized to and from a …\nDeserializes the input into an Option&lt;HashMap&lt;B256, …\nConverts a Bytes value into a B256, accepting inputs that …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nCustom account override used in call\nA set of account overrides\nFake balance to set for the account before executing the …\nFake EVM bytecode to inject into the account before …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFake nonce to set for the account before executing the …\nFake key-value mapping to override all slots in the …\nFake key-value mapping to override individual slots in the …\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list with gas used appended.\nReceipt envelope, as defined in EIP-2718.\nAlias for a catch-all receipt type.\nBase fee per gas integer conversion error\nBlob gas used integer conversion error\nThis represents a set of blobs, and its corresponding …\nError variants when converting from crate::Transaction to …\nReceipt envelope with type flag 2, containing a EIP-1559 …\nError during EIP-2718 transaction coding.\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nExcess blob gas integer conversion error\nGas limit integer conversion error\nGas used integer conversion error\nInvalid signature\nReceipt envelope with no type flag.\nMissing <code>accessList</code> field for EIP-2930 transaction.\nMissing <code>blobVersionedHashes</code> field for EIP-4844 transaction.\nMissing block number\nMissing <code>chainId</code> field for EIP-1559 transaction.\nMissing full transactions required for block decoding\nMissing <code>gasPrice</code> field for Legacy transaction.\nMissing <code>maxFeePerBlobGas</code> field for EIP-1559 transaction.\nMissing <code>maxFeePerGas</code> field for EIP-1559 transaction.\nMissing <code>maxPriorityFeePerGas</code> field for EIP-1559 …\nMissing signature for transaction.\nMissing <code>to</code> field for EIP-4844 transaction.\nMissing y parity in signature.\nAdditional fields for Optimism transaction receipts\nType that represents the signature parity byte, meant for …\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nContainer type for all signature fields in RPC\n<code>alloy_primitives::SignatureError</code>.\nTransaction object used in RPC\nAdditional fields in the context of a block that contains …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nEIP2930\nAccount addresses that would be loaded at the start of …\nBase fee of the block.\nThe price paid by the eip-4844 transaction per blob gas.\nBlob gas used by the eip-4844 transaction\nBlob versioned hashes for EIP-4844 transactions.\nContains the blob hashes for eip-4844 transactions.\nThe blob data.\nHash of the block.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block.\nNumber of the block this transaction was included within.\nBlock number\nThe chain ID for the transaction.\nThe chain id of the transaction, if any.\nThe blob commitments.\nContract address created, or None if not a deployment.\nGas used\nTransaction data\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nThe price paid post-execution by the transaction (i.e. …\nReturns the argument unchanged.\nAddress of the sender\nThe address of the transaction author.\nSender\nThe gas limit for the transaction.\nGas amount\nThe legacy gas price.\nGas Price\nEstimated gas used with access list.\nGas used by this transaction alone.\nHash of the transaction.\nHash\nIndex of the transaction in the block\nThe inner struct.\nThe receipt envelope.\nThe receipt envelope, which contains the consensus receipt …\nTransaction data.\nTransaction data\nData\nCalls <code>U::from(self)</code>.\nConverts Transaction into TransactionRequest.\nReturns true if the transaction is a legacy or 2930 …\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nLog send from contracts.\nThe bloom filter.\nThe max fee per blob gas for EIP-4844 blob transactions.\nConfigured max fee per blob gas for eip-4844 transactions\nThe max base fee per gas the sender is willing to pay.\nMax BaseFeePerGas the user is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe miner’s tip.\nThe nonce of the transaction.\nNonce\nMisc Optimism-specific types.\nAll fields not present in the inner struct.\nArbitrary extra fields.\nThe blob proofs.\nThe R field of the signature; the point on the curve.\nThe receipt.\nThe S field of the signature; the point on the curve.\nBlob sidecar for EIP-4844 transactions.\nAll <em>flattened</em> fields of the transaction signature.\nThe post-transaction stateroot (pre Byzantium)\nIf transaction is executed successfully.\nKeys of storage that would be loaded at the start of …\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nRecipient\nTransaction Hash.\nIndex within the block.\nTransaction Index\nThe EIP-2718 transaction type. See EIP-2718 for more …\nEIP2718\nThe transaction type.\nFor EIP-155, EIP-2930 and Blob transactions this is set to …\nThe value transferred in the transaction, in wei.\nTransferred value\nThe y parity of the signature. This is only used for typed …\nOptimism specific transaction fields\nAdditional fields for Optimism transaction receipts\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField indicating whether the transaction is a system …\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nThe ETH value to mint on L2\nHash that uniquely identifies the source of the deposit.\nTransaction Pool Content\nTransaction Pool Content From\nTransaction Pool Inspect\nTransaction summary as found in the Txpool Inspection …\nTransaction Pool Status\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas amount\nGas Price\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\npending tx\npending tx\npending tx\nnumber of pending tx\nqueued tx\nqueued tx\nqueued tx\nnumber of queued tx\nRemoves the transactions from the given sender\nRecipient (None when contract creation)\nTransferred value\nTypes used by tracing backends.\n<code>trace_filter</code> types and support\nGeth tracing types.\nTypes for opcode tracing.\nOtterscan specific types for RPC responses.\nTypes for trace module.\nBuilder style functions for <code>trace_call</code>\nUntagged error variant\nUntagged success variant\nThe result of a single transaction trace.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the hash of the transaction that was traced.\nTrace failure produced by the tracer\nTrace results produced by the tracer\ntransaction hash\ntransaction hash\nOnly return traces for transactions with matching <code>from</code> <em>and</em> …\nTrace filter.\nHelper type for matching <code>from</code> and <code>to</code> addresses. Empty sets …\nHow to apply <code>from_address</code> and <code>to_address</code> filters.\nReturn traces for transactions with matching <code>from</code> OR <code>to</code> …\nSets the <code>after</code> field of the struct\nOutput offset\nSets the <code>count</code> field of the struct\nOutput amount\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from_address</code> field of the struct\nFrom address\nSets the <code>from_block</code> field of the struct\nFrom block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>TraceFilterMatcher</code> for this filter.\nReturns <code>true</code> if the given <code>from</code> and <code>to</code> addresses match this …\nSets the <code>from_address</code> field of the struct\nHow to apply <code>from_address</code> and <code>to_address</code> filters.\nSets the <code>to_address</code> field of the struct\nTo address\nSets the <code>to_block</code> field of the struct\nTo block\nHelper type to track the kind of change of an AccountState.\nRepresents the state of an account.\nblockTraceResult represents the results of tracing a …\nbuilt-in tracer\nThe configuration for the call tracer.\nThe response object for <code>debug_traceTransaction</code> with …\nRepresents a recorded call.\nThe response for call tracer\nThe callTracer tracks all the call frames executed during …\nThe account was created.\nThe default mode returns the accounts necessary to execute …\nThe response for the default struct log tracer\nGeth Default struct log trace frame\nDiff mode returns the differences between the transaction…\nRepresents the account states before and after the …\nHelper type for DiffMode to represent a specific set\nUntagged error variant\nThe 4byte tracer response object.\nThe response for four byte tracer\nThe 4byteTracer collects the function selectors of every …\nAvailable built-in tracers\nConfiguration of the tracer\nAvailable tracers\nBindings for additional <code>debug_traceCall</code> options\nBindings for additional <code>debug_traceTransaction</code> options\nDefault tracing options for the struct looger.\nTracing response objects\nAny other trace response, such as custom javascript …\ncustom JS tracer\nThe account was modified.\nThe response for mux tracer\nThe mux tracer is a tracer that can run multiple tracers …\nAn empty frame response that’s only an empty json object …\nAn empty json response\nThis tracer is noop. It returns an empty object and is …\nCorresponds to the post state of the DiffMode\nCorresponds to the pre state of the DiffMode\nThe config for the prestate tracer.\nA tracer that records AccountStates. The prestate tracer …\nIncludes all the account states necessary to execute a …\nThe response for pre-state byte tracer\nThe prestate tracer has two modes: prestate and diff. The …\nThe account was selfdestructed.\nRepresents a struct log entry in a trace\nUntagged success variant\nResult type for geth style transaction trace\nThe address of the contract that was called.\nReturns the account states after the transaction is …\nReturns the account states before and after the …\nThe optional balance of the account.\nBlock number corresponding to the trace task\nThe block overrides to apply\nGeth call tracer types.\nConfigures a CallConfig\nRecorded child calls.\nThe optional code of the account.\nThe common tracing options\nThe data of the log.\nEnables debug mode.\nprint output during capture end\nCurrent call depth\nIf <code>diffMode</code> is set to true, the response frame includes …\nDisables memory capture.\nDisable memory capture\nDisables return data capture.\nDisable return data capture\nDisables stack capture.\ndisable stack capture\nDisables storage capture.\nDisable storage capture\nEnables memory capture.\nenable memory capture\nEnables return data capture.\nEnable return data capture\nError message, if any.\nError message if any\nWhether the transaction failed\nGeth 4byte tracer types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe address of that initiated the call.\nCreates a new <code>AccountState</code> with the given account info.\nConsumes the config and tries to deserialize it into the …\nHow much gas was left before the call.\nHow much gas was used.\nremaining gas\ncost for executing op\nHow much gas was used by the call.\nBlock hash corresponding to the trace task\nCalldata input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the CallConfig if it is a call config.\nReturns the raw json value\nReturns the MuxConfig if it is a mux config.\nReturns the PreStateConfig if it is a prestate config.\nReturns true if the account was created\nReturns true if this trace was requested without diffmode.\nIs default mode if diff_mode is not set\nReturns true if this trace was requested with diffmode.\nReturns true if this trace was requested with diffmode.\nReturns <code>true</code> if memory capture is enabled\nReturns true the account was modified\nReturns if this is a null object\nReturns true if this is the post state of the DiffMode\nReturns true if this is the pre state of the DiffMode\nReturns <code>true</code> if return data capture is enabled\nReturns true the account was modified\nReturns <code>true</code> if stack capture is enabled\nReturns <code>true</code> if storage capture is enabled\nmaximum length of output, but zero means unlimited\nLogs emitted by this call.\nref …\nSize of memory.\nGeth <code>muxTracer</code> types.\nThe optional nonce of the account.\nNoop tracer response.\nSets the only top call flag.\nWhen set to true, this will only trace the primary …\nopcode to be executed\nOutput of the call, if any.\nprogram counter\nThe account states after the transaction is executed.\nThe account states before the transaction is executed.\nPre-state Geth tracer types.\nConfigures a PreStateConfig\nRefund counter\nRemoves balance,nonce or code if they match the given …\nRemoves all zero values from the storage of the …\nThe sets of the DiffMode should only contain changed …\nLast call’s return data. Enabled via enableReturnData\nOutput of the transaction\nWhy this call reverted, if it reverted.\nEVM stack\nThe state overrides to apply\nThe storage of the account.\nStorage slots of current contract read from and written …\nRecorded traces of the transaction\nA string of decimal integers that overrides the …\nThe address of the contract that was called.\nThe topics of the log.\nThe custom tracer to use.\nConfig specific to given <code>tracer</code>.\nTrace results produced by the trace task\nAll the options\nThe type of the call.\nValue transferred.\nEnables block overrides\nSets the debug field.\nSets the disable_memory field.\nSets the disable_return_data field.\nSets the disable_stack field.\nSets the disable_storage field.\nSets the enable_memory field.\nSets the enable_return_data field.\nSets the limit field.\nSets the with log flag.\nWhen set to true, this will include the logs emitted by …\nEnables state overrides\nSets the timeout to use for tracing\nSets the tracer to use\nSets the tracing options\nTrace failure produced by the tracer\nTrace results produced by the tracer\ntransaction hash\ntransaction hash\nThe configuration for the call tracer.\nThe response object for <code>debug_traceTransaction</code> with …\nRepresents a recorded call.\nThe address of the contract that was called.\nRecorded child calls.\nThe data of the log.\nError message, if any.\nThe address of that initiated the call.\nHow much gas was left before the call.\nHow much gas was used by the call.\nCalldata input.\nLogs emitted by this call.\nWhen set to true, this will only trace the primary …\nOutput of the call, if any.\nWhy this call reverted, if it reverted.\nThe address of the contract that was called.\nThe topics of the log.\nThe type of the call.\nValue transferred.\nWhen set to true, this will include the logs emitted by …\nThe 4byte tracer response object.\nA <code>muxTracer</code> config that contains the configuration for …\nA <code>muxTracer</code> frame response that contains the results of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn empty frame response that’s only an empty json object …\nHelper type to track the kind of change of an AccountState.\nRepresents the state of an account.\nThe account was created.\nThe default mode returns the accounts necessary to execute …\nDiff mode returns the differences between the transaction…\nRepresents the account states before and after the …\nHelper type for DiffMode to represent a specific set\nThe account was modified.\nCorresponds to the post state of the DiffMode\nCorresponds to the pre state of the DiffMode\nThe config for the prestate tracer.\nA tracer that records AccountStates. The prestate tracer …\nIncludes all the account states necessary to execute a …\nThe account was selfdestructed.\nThe optional balance of the account.\nThe optional code of the account.\nIf <code>diffMode</code> is set to true, the response frame includes …\nThe optional nonce of the account.\nThe account states after the transaction is executed.\nThe account states before the transaction is executed.\nThe storage of the account.\nOpcode gas usage for a transaction.\nGas information for a single opcode.\nOpcode gas usage for a transaction.\nThe block hash\nThe block number\nHow many times the opcode was executed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCombined gas used by all instances of the opcode\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the opcode\nThe gas used by each opcode in the transaction\nThe transaction hash\nAll executed transactions in the block in the order they …\nCustom struct for otterscan <code>getBlockDetails</code> RPC response\nCustom struct for otterscan <code>getContractCreator</code> RPC …\nInternal issuance struct for <code>BlockDetails</code> struct\nCustom struct for otterscan <code>getInternalOperations</code> RPC …\nOperation Create\nOperation Create2\nOperation Contract self destruct\nOperation Transfer\nOperation type enum for <code>InternalOperation</code> struct\nCustom <code>Block</code> struct that includes transaction count for …\nCustom struct for otterscan <code>getBlockTransactions</code> RPC …\nThe receipt of a transaction.\nCustom transaction receipt struct for otterscan …\nCustom struct for otterscan <code>traceTransaction</code> RPC response\nCustom struct for otterscan <code>searchTransactionsAfter</code>and …\nGas used\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog send from contracts.\nThe bloom filter.\nThe transaction receipt.\nIf transaction is executed successfully.\nThe transaction type.\nThe diff of an account after a transaction\nRepresents the various types of actions recorded during …\nAn external action type.\nNew storage value added.\nBlock rewards\nRegular call\nContract call.\nCall\nOutput of a regular call transaction.\nRepresents a certain CallType of a <em>call</em> or message …\nCall code\nOutcome of a CALL.\nCall type.\nExisting storage value changed.\nA changed value\nA CREATE call\nContract creation.\nOutput of a CREATE transaction.\nRepresents a <em>create</em> action, either a <code>CREATE</code> operation or a …\nOutcome of a CREATE.\nDelegate call\nRepresents how a value changed.\nA wrapper for TransactionTrace that includes additional …\nA diff of some chunk of memory.\nNone\nExisting storage value removed.\nRewards if any (pre POS)\nA block reward.\nRecorded reward of a block.\nWhat kind of reward.\nParity style traces never renamed suicide to selfdestruct: …\nContract suicide/selfdestruct.\nRepresents a <em>selfdestruct</em> action fka <code>suicide</code>.\nNew-type for list of account diffs\nProvides information detailing all altered portions of the …\nStatic call\nA diff of some storage value.\nDefault trace\nRepresents the output of a trace.\nThe Outcome of a traced transaction with optional settings\nA <code>FullTrace</code> with an additional transaction hash\nDifferent Trace diagnostic targets.\nA parity style trace of a transaction.\nExisting value didn’t change.\nReward for uncle block\nA record of an executed VM operation.\nA record of a single VM instruction, opcode level.\nA record of a full VM trace for a CALL/CREATE.\nProvides a full trace of the VM’s state throughout the …\nRepresents what kind of trace this is\ndestroyed/suicided address.\nAddress of the created contract.\nAuthor’s address.\nHow the balance changed, if at all\nBalance of the contract just before it was destroyed.\nHash of the block, if not pending.\nBlock number the transaction is included in, None if …\nThe type of the call.\nCreates a new Delta::Changed variant\nHow the code changed, if at all\nContract code.\nThe code to be executed.\nThe gas cost for this instruction.\nThe changed data.\nThe error message if the transaction failed.\nInformation concerning the execution of the operation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOriginal value\nAddress of the sending account.\nThe address of the creator.\nThe recorded trace.\nThe gas available for executing the call.\nThe gas available for the creation init code.\nReturns the gas used by this trace.\nGas used by the call.\nGas used by the call.\nIndex of the instruction in the set.\nThe init code.\nThe input data provided to the call.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the value is added\nReturns true if this is a call action\nReturns true if the value is changed\nReturns true if this is a create action\nReturns true if the value is removed\nReturns true if this is a reward action\nReturns true if this is a selfdestruct action\nReturns true if the value is unchanged\nStorage key.\nReturns what kind of action this is\nIf altered, the memory delta.\nHow the nonce changed, if at all\nOffset into memory the change begins.\nStringified opcode.\nAll executed instructions.\nOutput of the trace\nThe output data of the call.\nThe program counter.\nThe stack item placed, if any.\ndestroyed contract heir.\nOutput of the trace, can be CALL or CREATE\nReward type.\nSets the gas used by this trace.\nSets the gas used of the root trace.\nEnabled if TraceType::StateDiff is provided\nAll touched/changed storage values\nThe altered storage value, if any.\nSubordinate trace of the CALL/CREATE if applicable.\nHow many subtraces this trace has.\nNew value\nAddress of the destination/target account.\nEnabled if TraceType::Trace is provided, otherwise an …\nTrace of the transaction and its result.\nThe identifier of this transaction trace in the set.\nHash of the traced transaction.\nHash of the transaction\nTransaction index within the block, None if pending.\nThe total gas used.\nStorage value belonging to the key.\nValue transferred to the destination account.\nThe value with which the new account is endowed.\nReward amount.\nEnabled if TraceType::VmTrace is provided\nContainer type for <code>trace_call</code> arguments\nOptional: blockId\nOptional: BlockOverrides\ncall request object\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new <code>TraceCallRequest</code> given a <code>TransactionRequest</code> …\nOptional: StateOverride\ntrace types\nSets the <code>BlockId</code> Note: this is optional\nSets the <code>BlockOverrides</code> Note: this is optional\nSets the <code>StateOverride</code> Note: this is optional\nInserts <code>TraceType::StateDiff</code>\nInserts <code>TraceType::Trace</code>\nInserts a single trace type.\nInserts multiple trace types from an iterator.\nInserts <code>TraceType::VmTrace</code>\nA storage key type that can be serialized to and from a …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelpers for dealing with numbers. Numeric serde helpers.\nSerde serialization and deserialization for <code>bool</code> as <code>0x0</code> or …\nSerialize a B256 as a hex string <em>without</em> the “0x” …\nSerialize a byte vec as a hex string <em>without</em> the “0x” …\nStorage related helpers.\nJson U256 serde helpers.\nserde functions for handling primitive optional <code>u128</code> via …\nserde functions for handling <code>Vec&lt;Vec&lt;u128&gt;&gt;</code> via U128\nserde functions for handling <code>Vec&lt;u128&gt;</code> via U128\nserde functions for handling primitive <code>u128</code> via U128\nserde functions for handling <code>Option&lt;u64&gt;</code> via U64\nserde functions for handling <code>u64</code> via U64\nserde functions for handling <code>Option&lt;u8&gt;</code> via U8\nserde functions for handling <code>u8</code> via U8\nDeserializes an <code>Option&lt;u128&gt;</code> accepting a hex quantity …\nSerializes <code>Option&lt;u128&gt;</code> as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>Option</code> from U64 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>u64</code> from U64 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>Option</code> from U8 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>u8</code> from U8 accepting a hex quantity string …\nSerializes u64 as hex string\nDeserializes a <code>bool</code> via a U1 quantity.\nSerializes a <code>bool</code> via a U1 quantity.\nA storage key type that can be serialized to and from a …\nDeserializes the input into an Option&lt;HashMap&lt;B256, …\nConverts a Bytes value into a B256, accepting inputs that …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\n<code>alloy_dyn_abi</code> error.\n<code>ecdsa</code> error.\nContains the error value\nGeneric error type for <code>Signer</code> implementations.\n<code>hex</code> error.\nContains the success value\nGeneric error.\nResult type alias for <code>Error</code>.\n<code>sign_hash</code> is not supported by the signer.\n<code>sign_message</code> is not supported by the signer.\n<code>sign_transaction</code> is not supported by the signer.\n<code>sign_typed_data</code> is not supported by the signer.\nAn ECDSA Signature, consisting of V, R, and S.\nSignature error.\nAsynchronous Ethereum signer.\nSynchronous Ethereum signer.\nMismatch between provided transaction chain ID and signer …\nThis operation is not supported by the signer.\nAn unsupported signer operation.\nReturns the signer’s Ethereum Address.\nReturns the string representation of the operation.\nReturns the signer’s chain ID.\nReturns the signer’s chain ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the error is <code>UnsupportedOperation</code>.\nConstructs a new <code>Other</code> error.\nSets the signer’s chain ID.\nEncodes and signs the typed data according to [EIP-712] …\nEncodes and signs the typed data according to EIP-712 for …\nSigns the given hash.\nSigns the given hash.\nSigns the hash of the provided message after prefixing it, …\nSigns the hash of the provided message after prefixing it, …\nUtility to get and set the chain ID on a transaction and …\nEncodes and signs the typed data according to EIP-712.\nEncodes and signs the typed data according to EIP-712.\nReturns the <code>UnsupportedSignerOperation</code> if the error is …\nUtility functions for working with Ethereum signatures.\nSets the signer’s chain ID and returns <code>self</code>.\nThe signer’s chain ID.\nThe chain ID provided by the transaction.\nAmazon Web Services Key Management Service (AWS KMS) …\nErrors thrown by <code>AwsSigner</code>.\nThrown when the AWS KMS API returns an error.\n<code>hex</code> error.\n<code>ecdsa</code> error.\nThrown when the AWS KMS API returns a response without a …\nThrown when the AWS KMS API returns a signing error.\nThrown when the AWS KMS API returns a response without a …\n<code>spki</code> error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch the pubkey associated with this signer’s key ID.\nFetch the pubkey associated with a key ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate a new signer from an existing <code>Client</code> and key …\nSign a digest with this signer’s key\nSign a digest with the key associated with a key ID.\nReference to a GCP KeyRing.\nGoogle Cloud Platform Key Management Service (GCP KMS) …\nErrors thrown by <code>GcpSigner</code>.\nThrown when the GCP KMS API returns a signing error.\n<code>ecdsa</code> error.\nIdentifies a specific key version in the key ring.\nThrown on a request error.\n<code>spki</code> error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch the pubkey associated with this signer’s key.\nThe GCP project ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe GCP location e.g. <code>global</code>.\nThe GCP key ring name.\nCreate a new GCP KeyRing reference.\nConstruct a new specifier for a key with a given keyring, …\nInstantiate a new signer from an existing <code>Client</code>, keyring …\nSign a digest with this signer’s key\nsecp256k1 curve point expressed in affine coordinates.\nCompressed SEC1-encoded secp256k1 (K-256) curve point.\nSEC1-encoded secp256k1 (K-256) curve point.\nsecp256k1 (K-256) field element serialized as bytes.\nBase point of secp256k1.\nBase point of secp256k1.\nAdditive identity of the group: the point at infinity.\nAdditive identity of the group: the point at infinity.\nNon-zero secp256k1 (K-256) scalar field element.\nMultiplicative identity.\nA point on the secp256k1 curve in projective coordinates.\nsecp256k1 (K-256) public key.\nScalars are elements in the finite field modulo n.\nsecp256k1 (K-256) elliptic curve.\nsecp256k1 (K-256) secret key.\n256-bit unsigned big integer.\nBytes used by a wide reduction: twice the width of …\nZero scalar.\nReturns self + rhs mod n.\nDoubles this point.\nElliptic Curve Digital Signature Algorithm (ECDSA).\nCalculates SECP256k1 endomorphism: <code>self * lambda</code>.\nCheck whether <code>self</code> is equal to an affine point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse the given <code>EncodedPoint</code> as an …\nAttempts to parse the given byte array as an SEC1-encoded …\nReturns a (nearly) uniformly-random scalar, generated in …\nReturns a uniformly-random scalar, generated using …\nReturns the base point of secp256k1.\nReturns the base point of SECP256k1.\nReturns the identity of the group: the point at infinity.\nReturns the additive identity of SECP256k1, also known as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the scalar.\nFast variable-time inversion using Stein’s algorithm.\nIs this point the identity point?\nChecks if the scalar is zero.\nModulo multiplies two scalars.\nCalculates <code>k * G</code>, where <code>G</code> is the generator.\nNegates the scalar.\nTaproot Schnorr signatures as defined in BIP340.\nRight shifts the scalar.\nTonelli-Shank’s algorithm for q mod 16 = 1 …\nModulo squares the scalar.\nReturns self - rhs mod n.\nReturns the affine representation of this point.\nReturns the SEC1 encoding of this scalar.\nConvert to curve representation.\nECDSA/secp256k1 signature (ASN.1 DER encoded)\nSignature errors.\nMaximum supported value for the recovery ID (inclusive).\nRecovery IDs, a.k.a. “recid”.\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 signing key\nECDSA/secp256k1 verification key (i.e. public key)\nReturns the argument unchanged.\nConvert a <code>u8</code> into a <code>RecoveryId</code>.\nLow-level ECDSA primitives.\nCalls <code>U::from(self)</code>.\nDid the affine x-coordinate of 𝑘×𝑮 overflow the …\nIs the affine y-coordinate of 𝑘×𝑮 odd?\nCreate a new <code>RecoveryId</code> from the following 1-bit arguments:\nConvert this <code>RecoveryId</code> into a <code>u8</code>.\nGiven a public key, message digest, and signature, use …\nGiven a public key, message, and signature, use trial …\nGiven a public key, message digest, and signature, use …\nPreferred digest to use when computing ECDSA signatures …\nBind a preferred <code>Digest</code> algorithm to an elliptic curve …")