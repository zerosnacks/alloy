searchState.loadedDescShard("alloy", 2, "Try to sign the given prehashed message using ECDSA.\nVerify the given prehashed message using ECDSA.\nPartial implementation of the <code>bits2int</code> function as defined …\nSign a prehashed message digest using the provided secret …\nTry to sign the prehashed message.\nTry to sign the given message digest deterministically …\nVerify message digest against the provided signature.\nVerify the prehashed message against the provided ECDSA …\nVerify the prehashed message against the provided ECDSA …\nPreferred <code>Digest</code> algorithm to use when computing this …\nSign the given prehashed message <code>Digest</code> using <code>Self</code>.\nDerive the <code>DigestSigner</code> trait for a type which impls …\nVerify the provided signature for the given prehashed …\nDerive the <code>DigestVerifier</code> trait for a type which impls …\nContains the error value\nSignature errors.\nSigning keypair with an associated verifying key.\nSigning keypair with an associated verifying key.\nContains the success value\nMarker trait for <code>Signature</code> types computable as …\nCombination of <code>DigestSigner</code> and <code>RandomizedSigner</code> with …\nSign the given message using the provided external …\nByte representation of a signature.\nResult type.\nSupport for decoding/encoding signatures as bytes.\nSign the provided message bytestring using <code>Self</code> (e.g. a …\nDerive the <code>Signer</code> trait for a type which impls <code>DigestSigner</code>…\nSign the provided message bytestring using <code>&amp;mut Self</code> (e.g. …\nVerify the provided message bytestring using <code>Self</code> (e.g. a …\nDerive the <code>Verifier</code> trait for a type which impls …\nVerifying key type for this keypair.\nVerifying key type for this keypair.\nGet the length of this signature when encoded.\nHazardous Materials: low-level APIs which can be insecure …\nSign the given message and return a digital signature\nSign the given message, update the state, and return a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given message and return a digital signature\nEncode signature as its byte representation.\nEncode signature as a byte vector.\nAttempt to sign the given message, returning a digital …\nAttempt to sign the given message, updating the state, and …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given message, returning a digital …\nUse <code>Self</code> to verify that the provided signature for a given …\nVerify the signature against the given <code>Digest</code> output.\nGet the verifying key which can verify signatures produced …\nFixed size output value which provides a safe <code>Eq</code> …\nConvenience wrapper trait covering functionality of …\nModification of the <code>Digest</code> trait suitable for trait …\nTrait for hash functions with extendable-output (XOF).\nTrait for hash functions with extendable-output (XOF) able …\nTrait for hash functions with fixed-size output.\nTrait for hash functions with fixed-size output able to …\nMarker trait for cryptographic hash functions.\nTypes which can be initialized from another type (usually …\nBuffer length is not equal to hash output size.\nThe error type returned when key and/or IV used in the …\nThe error type used in variable hash traits.\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nMaximum size of output hash.\nConvenience wrapper trait covering functionality of …\nError type for when the <code>Output</code> of a <code>Mac</code> is not equal to …\nMarker trait for Message Authentication algorithms.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nReader\nResettable types.\nTypes which consume data with byte granularity.\nTrait for hash functions with variable-size output.\nTrait for hash functions with variable-size output able to …\nTrait for reader types which are used to extract …\nClone hasher state into a boxed trait object\nDigest input data in a chained manner.\nProcess input data in a chained manner.\nProcess input data in a chained manner.\nLow-level traits operating on blocks and wrappers around …\nCompute hash of <code>data</code>.\nCompute hash of <code>data</code> and write it to <code>output</code>.\nCompute hash of <code>data</code> and write it into <code>output</code>.\nRetrieve result and consume hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and consume boxed hasher instance\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and consume hasher.\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and reset the hasher …\nRetrieve result and consume the hasher instance.\nRetrieve result and reset the hasher state.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and consume the hasher …\nConsume value and write result into provided array.\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and reset hasher instance\nWrite result into the output buffer.\nWrite result into the output buffer and reset the hasher …\nRetrieve XOF reader and consume hasher instance.\nFinalize XOF and write result into <code>out</code>.\nRetrieve XOF reader and reset hasher instance state.\nFinalize XOF, write result into <code>out</code>, and reset the hasher …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplement dummy type with hidden docs which is used to “…\nInitialize value from the <code>inner</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner <code>Output</code> array this type wraps.\nCreate new value from fixed size key.\nCreate new hasher instance.\nCreate new value from fixed size key.\nCreate new hasher instance with the given output size.\nCreate a new <code>CtOutput</code> value.\nCreate new value from variable size key.\nCreate new value from variable size key.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nGet output size of the hasher\nGet output size of the hasher instance provided to the <code>new</code> …\nReturn output size in bytes.\nRead output into the <code>buffer</code>. Can be called an unlimited …\nRead output into a boxed slice of the specified size.\nReset state to its initial value.\nReset hasher instance to its initial state.\nReset hasher instance to its initial state.\nReset MAC instance to its initial state.\nProcess data, updating the internal state.\nDigest input data.\nUpdate state using the provided data.\nUpdate state using the provided data.\nCheck if tag/code value is correct for the processed input.\nCheck if tag/code value is correct for the processed input …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using left side bytes …\nCheck truncated tag correctness using right side bytes …\nBlock on which <code>BlockBuffer</code> operates.\nBuffer for block processing of data.\nTrait for buffer kinds.\nEager block buffer kind, which guarantees that buffer …\nEager block buffer.\nBlock buffer error.\nLazy block buffer kind, which guarantees that buffer …\nLazy block buffer.\nDigest data in <code>input</code> in blocks of size <code>BlockSize</code> using the …\nCompress remaining data after padding it with <code>delim</code>, zeros …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn slice of data stored inside the buffer.\nReturn current cursor position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPad message with 0x80, zeros and 128-bit message length …\nPad message with 0x80, zeros and 64-bit message length …\nPad message with 0x80, zeros and 64-bit message length …\nCreate new buffer from slice.\nPad remaining data with zeros and return resulting block.\nReturn number of remaining bytes in the internal buffer.\nReset buffer by setting cursor position to zero.\nSet buffer content and cursor position.\nSet <code>data</code> to generated blocks.\nReturn size of the internal buffer in bytes.\nCreate new buffer from slice.\nTrait making <code>GenericArray</code> work, marking types to be used …\nAssociated type representing the array type for the number\nStruct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> …\nAn iterator that moves out of a <code>GenericArray</code>\nImplementation for <code>arr!</code> macro.\nMacro allowing for easy generation of Generic Arrays. …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice containing the entire array.\nReturns the remaining items of this iterator as a slice\nExtracts a slice containing the entire array.\nConstruct a <code>GenericArray</code> from a slice by cloning its …\nReturns the argument unchanged.\nConverts mutable slice to a mutable generic array reference\nReturns the argument unchanged.\nConverts slice to a generic array reference with inferred …\nCreates a new <code>GenericArray</code> instance from an iterator with …\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nFunctional programming with generic sequences\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>GenericArray</code> iterator implementation.\nUseful traits for manipulating sequences of data stored in …\nHelper trait for <code>arr!</code> macro\nHelper type for <code>arr!</code> macro\nResulting length\nDefines functional programming methods for generic …\nMapped sequence type\nDefines the relationship between one generic sequence and …\nAccessor type for a mapped generic sequence\nFolds (or reduces) a sequence of data into a single value.\nMaps a <code>GenericSequence</code> to another <code>GenericSequence</code>.\nCombines two <code>GenericSequence</code> instances and iterates …\nAn iterator that moves out of a <code>GenericArray</code>\nDefines <code>GenericSequence</code>s which can be joined together, …\nFirst part of the resulting split array\nDefines some sequence with an associated length and …\n<code>GenericArray</code> associated length\nDefines any <code>GenericSequence</code> which can be lengthened or …\n<code>GenericSequence</code> that has one more element than <code>Self</code>\nResulting sequence formed by the concatenation.\nSequence to be concatenated with <code>self</code>\nSecond part of the resulting split array\nConcrete sequence type used in conjuction with reference …\nAccessor for <code>GenericSequence</code> item type, which is really …\nDefines a <code>GenericSequence</code> which can be shortened by …\n<code>GenericSequence</code> that has one less element than <code>Self</code>\nDefines a <code>GenericSequence</code> that can be split into two parts …\nReturns a new array with the given element appended to the …\nConcatenate, or join, two sequences.\nInitializes a new sequence instance using the given …\nReturns a new array without the last element, and the last …\nReturns a new array without the first element, and the …\nReturns a new array with the given element prepended to …\nSplits an array at the given index, returning the separate …\nThe terminating type for type arrays.\nA <strong>type operator</strong> that returns the absolute value.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Pow</code>: …\nA <strong>type operator</strong> that computes the greatest common divisor …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nThe concrete value for the type. Can be used in <code>const</code> …\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nAlias for the associated type of <code>Len</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Logarithm2</code>: …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Max</code>: …\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nType-level signed integers with negative sign.\nAlias for the associated type of <code>Neg</code>: …\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nType-level signed integers with positive sign.\nDivision as a partial function. This <strong>type operator</strong> …\nAlias for the associated type of <code>PartialDiv</code>: …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\n<code>TArr</code> is a type that acts as an array of types. It is …\nA <strong>type operator</strong> for taking a concrete integer value from a …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nAlias for the associated type of <code>BitXor</code>: …\nThe type-level signed integer 0.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nA type-level array of type-level numbers.\nAsserts that a type is <code>True</code>, aka <code>B1</code>.\nAsserts that two types are the same.\nType-level bits.\nA convenience macro for comparing type numbers. Use <code>op!</code> …\nType aliases for many constants.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nType-level signed integers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nAll of the <strong>marker traits</strong> used in typenum.\nMethod returning the maximum\nMethod returning the minimum\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this strictly …\nInstantiates a singleton representing this strictly …\nInstantiates a singleton representing the integer 0.\nInstantiates a singleton representing this unsigned …\nInstantiates a singleton representing this unsigned …\nConvenient type operations.\nAliases for the type operators used in this crate. Their …\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nCreate a new type-level array. Only usable on Rust 1.13.0 …\nMethod returning the concrete value for the type.\nUseful <strong>type operators</strong> that are not defined in <code>core::ops</code>.\nType-level unsigned integers.\nThe terminating type for type arrays.\n<code>TArr</code> is a type that acts as an array of types. It is …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nInstantiates a singleton representing this bit.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time signed integers.\nType-level signed integers with negative sign.\nType-level signed integers with positive sign.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time bits.\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nInstantiates a singleton representing this bit.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nAlias for the associated type of <code>Pow</code>: …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nAlias for the associated type of <code>Len</code>: …\nAlias for the associated type of <code>Logarithm2</code>: …\nAlias for the associated type of <code>Max</code>: …\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nAlias for the associated type of <code>Neg</code>: …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nAlias for the associated type of <code>PartialDiv</code>: …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\nAlias for the associated type of <code>BitXor</code>: …\nA <strong>type operator</strong> that returns the absolute value.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nA <strong>type operator</strong> that computes the greatest common divisor …\nThe concrete value for the type. Can be used in <code>const</code> …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nDivision as a partial function. This <strong>type operator</strong> …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nA <strong>type operator</strong> for taking a concrete integer value from a …\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nMethod returning the maximum\nMethod returning the minimum\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nMethod returning the concrete value for the type.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nA <strong>type operator</strong> that, when implemented for unsigned …\nAlias for the result of calling <code>SetBit</code>: …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nType alias used to represent an “arc” (i.e. integer …\nArc exceeds allowed range (i.e. for first or second OID)\nArc is too big (exceeds 32-bit limits of this library).\n<code>Iterator</code> over <code>Arc</code> values (a.k.a. nodes) in an …\nA trait which associates an OID with a type.\nBase 128 encoding error (used in BER/DER serialization of …\nExpected a digit, but was provided something else.\nA trait which associates a dynamic, <code>&amp;self</code>-dependent OID …\nInput data is empty.\nContains the error value\nOID errors.\nOID length is invalid (too short or too long).\nMinimum 3 arcs required.\nThe OID associated with this type.\nObject identifier (OID).\nContains the success value\nResult type\nTrailing <code>.</code> character at end of input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the OID associated with this value.\nWhat was found instead of a digit\nArc value that is erroneous.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nBuffer type used by type which implements <code>BufferKindUser</code>.\nBlock buffer kind over which type operates.\nTypes which use <code>BlockBuffer</code> functionality.\nType wrapped by <code>CoreWrapper</code>.\nA proxy trait to a core type implemented by <code>CoreWrapper</code>\nWrapper around <code>BufferKindUser</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nCore trait for hash functions with extendable (XOF) output …\nCore trait for hash functions with fixed output size.\nTruncate left side, i.e. <code>&amp;out[..n]</code>.\nSize of the output in bytes.\nTypes which return data with the given size.\nXOF reader core state.\nResettable types.\nTruncate right side, i.e. <code>&amp;out[m..]</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nSide which should be used in a truncated result.\nType which used for defining truncation side in the …\nTypes which consume data in blocks.\nCore trait for hash functions with variable output size.\nCore reader trait for extendable-output function (XOF) …\nWrapper around <code>XofReaderCore</code> implementations.\nReturn block size in bytes.\nDecompose wrapper into inner parts.\nFinalize state using remaining data stored in the provided …\nFinalize hasher and write full hashing result into the <code>out</code> …\nRetrieve XOF reader using remaining data stored in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new wrapper from <code>core</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize hasher state for given output size.\nReturn output size in bytes.\nRead next XOF block.\nReset state to its initial value.\nUpdate state using the provided data blocks.\nWrite algorithm name into <code>f</code>.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nInner type.\nTypes which can be initialized from another type (usually …\nTypes which can be initialized from another type and …\nTypes which use another type for initialization.\nThe error type returned when key and/or IV used in the …\nInitialization vector (nonce) used by <code>IvSizeUser</code> …\nInitialization vector size in bytes.\nTypes which use initialization vector (nonce) for …\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nTypes which can be initialized from key and initialization …\nKey size in bytes.\nTypes which use key for initialization.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nParallel blocks on which <code>ParBlocksSizeUser</code> implementors …\nNumber of blocks which can be processed in parallel.\nTypes which can process blocks in parallel.\nResettable types.\nReturn block size in bytes.\nInitialize value from the <code>inner</code>.\nInitialize value using <code>inner</code> and <code>iv</code> array.\nInitialize value using <code>inner</code> and <code>iv</code> slice.\nReturn IV size in bytes.\nReturn key size in bytes.\nCreate new value from fixed size key.\nCreate new value from fixed length key and nonce.\nCreate new value from variable size key.\nCreate new value from variable length key and nonce.\nReturn output size in bytes.\nReset state to its initial value.\nWrite algorithm name into <code>f</code>.\nSign the provided message prehash, returning a digital …\nVerify the provided message prehash using <code>Self</code> (e.g. a …\nSign the provided message prehash using the provided …\nAttempt to sign the given message digest, returning a …\nAttempt to sign the given message digest, returning a …\nUse <code>Self</code> to verify that the provided signature for a given …\nCodes at or above this point can be used by users to …\nA marker trait used to indicate that an <code>RngCore</code> or …\nAn extension trait that is automatically implemented for …\nError type of random number generators\nCodes below this point represent OS Errors (i.e. positive …\nA random number generator that retrieves randomness from …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nUpcast to an <code>RngCore</code> trait object.\nThe <code>BlockRngCore</code> trait and implementation helpers\nRetrieve the error code, if any.\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nHelper functions for implementing <code>RngCore</code> functions.\nReference the inner error (<code>std</code> only)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLittle-Endian utilities\nConstruct from any type supporting <code>std::error::Error</code>\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nExtract the raw OS error code (if this error came from the …\nCreate a new PRNG using a <code>u64</code> seed.\nUnwrap the inner error (<code>std</code> only)\nFill <code>dest</code> entirely with random data.\nA wrapper type implementing <code>RngCore</code> for some type …\nA wrapper type implementing <code>RngCore</code> for some type …\nA trait for RNGs which do not generate random numbers …\nResults element type, e.g. <code>u32</code>.\nResults type. This is the ‘block’ an RNG implementing …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new block of results.\nGenerate a new set of results immediately, setting the …\nGenerate a new set of results immediately, setting the …\nGet the index into the result buffer.\nGet the index into the result buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nReset the number of available results. This will force a …\nReset the number of available results. This will force a …\nImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nAlgorithm <code>ObjectIdentifier</code> for elliptic curve public key …\nAffine point type for a given curve with a <code>CurveArithmetic</code> …\nElliptic curve point in affine coordinates.\nNormalize point(s) in projective representation by …\nHow many bits of information can be reliably stored in the …\nElliptic curve.\nElliptic curve with an arithmetic implementation.\nPrime order elliptic curve group.\nGenerator of the <code>t-order</code> multiplicative subgroup.\nContains the error value\nElliptic curve errors.\nThis trait represents an element of a field.\nByte representation of a base/scalar field element of a …\nTrait for decoding/encoding <code>Curve::Uint</code> from/to <code>FieldBytes</code> …\nSize of serialized field elements of this elliptic curve.\nSize of a serialized field element in bytes.\nThis trait represents an element of a cryptographic group.\nModulus of the field written as a string for debugging …\nScalar modulus.\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nNon-zero scalar type.\nThe one element of the field, the multiplicative identity.\nMultiplicative identity.\nOrder of this elliptic curve, i.e. number of elements in …\nContains the success value\nThe output of the batch normalization; a container of …\nMarker trait for elliptic curves with prime order.\nPrime order elliptic curve with projective arithmetic …\nThis represents an element of a non-binary prime field.\nProjective point type for a given curve with a …\nElliptic curve point in projective coordinates.\nElliptic curve public keys.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nResult type with the <code>elliptic-curve</code> crate’s <code>Error</code> type.\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nScalar field element for a particular elliptic curve.\nScalars modulo the order of this group’s scalar field.\nScalar field modulo this curve’s order.\nGeneric scalar type with primitive functionality.\nElliptic curve secret keys.\nInverse of $2$ in the field.\nInteger type used to represent field elements of this …\nThe zero element of the field, the additive identity.\nZero scalar.\nBorrow the inner <code>AffinePoint</code> from this <code>PublicKey</code>.\nBorrow the inner limbs as a slice.\nBorrow the inner secret <code>ScalarPrimitive</code> value.\nBorrow the inner <code>C::Uint</code>.\nPerform a batched conversion to affine representation on a …\nCubes this element.\nDecode unsigned integer from serialized field element.\nDoubles this element.\nDoubles this element.\nEncode unsigned integer into serialized field element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an <code>AffinePoint</code> into a <code>PublicKey</code>\nDecode <code>ScalarPrimitive</code> from a serialized field element\nDeserialize secret key from an encoded secret scalar.\nInitialize <code>PublicKey</code> from an <code>EncodedPoint</code>\nAttempts to convert a byte representation of a field …\nDecode a <code>NonZeroScalar</code> from a big endian-serialized field …\nAttempts to convert a byte representation of a field …\nDecode <code>PublicKey</code> (compressed or uncompressed) from the …\nDeserialize secret key encoded in the SEC1 ASN.1 DER …\nParse <code>SecretKey</code> from PEM-encoded SEC1 <code>ECPrivateKey</code> format.\nCompute a <code>PublicKey</code> from a secret <code>NonZeroScalar</code> value …\nDecode <code>ScalarPrimitive</code> from a big endian byte slice.\nDeserialize secret key from an encoded secret scalar …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nCreate a <code>NonZeroScalar</code> from a <code>C::Uint</code>.\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nReturns true iff this element is even.\nIs this <code>ScalarPrimitive</code> value even?\nDetermines if this point is the identity.\nReturns true iff this element is odd.\nIs this <code>ScalarPrimitive</code> value odd?\nReturns true iff this element is zero.\nIs this <code>ScalarPrimitive</code> value equal to zero?\nReturns true iff this element is zero.\nCreate a <code>NonZeroScalar</code> from a scalar.\nCreate a new scalar from <code>Curve::Uint</code>.\nCreate a new secret key from a scalar value.\nTraits for arithmetic operations on elliptic curve field …\nTraits for elliptic curve points.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nGet the <code>PublicKey</code> which corresponds to this secret key\nReturns an element chosen uniformly at random using a …\nReturns an element chosen uniformly at random from the …\nGenerate a random <code>NonZeroScalar</code>.\nGenerate a random <code>ScalarPrimitive</code>.\nGenerate a random <code>SecretKey</code>.\nScalar types.\nSupport for SEC1 elliptic curve encoding formats.\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nEncode <code>ScalarPrimitive</code> as a serialized field element.\nSerialize raw secret scalar as a big endian integer.\nSerialize this <code>PublicKey</code> as a SEC1 <code>EncodedPoint</code>, …\nConvert this <code>PublicKey</code> to a <code>NonIdentity</code> of the inner …\nGet the secret <code>NonZeroScalar</code> value for this key.\nConvert this <code>PublicKey</code> to a <code>ProjectivePoint</code> for the given …\nConverts an element of the prime field into the standard …\nConvert this <code>PublicKey</code> into the …\nSerialize secret key in the SEC1 ASN.1 DER <code>ECPrivateKey</code> …\nSerialize private key as self-zeroizing PEM-encoded SEC1 …\nConvert to a <code>C::Uint</code>.\nComplete projective formulas for prime order elliptic …\nCompute <code>self + rhs mod p</code>.\nSupport for decoding a <code>GenericArray</code> as a big integer.\nSupport for encoding a big integer as a <code>GenericArray</code>.\nTotal size of the represented integer in bits.\nSize of this integer in bits.\nSize of the inner integer in bits.\nTotal size of the represented integer in bits.\nTotal size of the represented integer in bytes.\nSize of this integer in bytes.\nSize of the inner integer in bytes.\nTotal size of the represented integer in bytes.\nIntegers whose representation takes a bounded amount of …\nAlias for a byte array whose size is defined by …\nSize of a byte array which encodes a big integer.\nProvides intentionally-checked arithmetic on <code>T</code>.\nChecked addition.\nChecked multiplication.\nChecked subtraction.\nConcatenate two numbers into a “wide” double-width …\nConcatenate two numbers into a “wide” combined-width …\nA boolean value returned by constant-time <code>const fn</code>s.\nEncoding support.\nThe falsy value.\nInteger type.\nConstant-time inversion.\nThe number of limbs used on this platform.\nThe number of limbs used on this platform.\nBig integers are represented as an array of smaller CPU …\nMaximum value this integer can express.\nMaximum value this <code>Limb</code> can express.\nMaximum value this integer can express.\nMaximum value this <code>Uint</code> can express.\nConcatenated output: combination of <code>Lo</code> and <code>Self</code>.\nCompute <code>self * rhs mod p</code>.\nPerforms modular multi-exponentiation using Montgomery’s …\nPerforms modular multi-exponentiation using Montgomery’s …\nCompute <code>-self mod p</code>.\nWrapper type for non-zero integers.\nThe value <code>1</code>.\nThe value <code>1</code>.\nThe value <code>1</code>.\nThe value <code>1</code>.\nBig integer which decodes a <code>GenericArray</code>.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nConcatenated output: twice the width of <code>Self</code>.\nSplit output: high/low components of the value.\nOutput of the inversion.\nConstant-time exponentiation.\nConstant-time exponentiation with exponent of a bounded …\nRandom number generation support.\nModular random number generation support.\nA pre-calculated reciprocal for division by a single limb.\nByte array representation.\nSplit a number in half, returning the most significant …\nSplit a number into parts, returning the most significant …\nSupport for optimized squaring\nCompute <code>self - rhs mod p</code>.\nThe truthy value.\n1024-bit unsigned big integer.\n128-bit unsigned big integer.\n1280-bit unsigned big integer.\n1536-bit unsigned big integer.\n16384-bit unsigned big integer.\n1792-bit unsigned big integer.\n192-bit unsigned big integer.\n2048-bit unsigned big integer.\n256-bit unsigned big integer.\n3072-bit unsigned big integer.\n320-bit unsigned big integer.\n32768-bit unsigned big integer.\n3584-bit unsigned big integer.\n384-bit unsigned big integer.\n4096-bit unsigned big integer.\n4224-bit unsigned big integer.\n4352-bit unsigned big integer.\n448-bit unsigned big integer.\n512-bit unsigned big integer.\n576-bit unsigned big integer.\n6144-bit unsigned big integer.\n64-bit unsigned big integer.\n640-bit unsigned big integer.\n704-bit unsigned big integer.\n768-bit unsigned big integer.\n8192-bit unsigned big integer.\n832-bit unsigned big integer.\n896-bit unsigned big integer.\n960-bit unsigned big integer.\nStack-allocated big unsigned integer.\nWide integer type: double the width of <code>Word</code>.\nUnsigned integer type that the <code>Limb</code> newtype wraps.\nProvides intentionally-wrapped arithmetic on <code>T</code>.\nThe value <code>0</code>.\nThe value <code>0</code>.\nThe value <code>0</code>.\nZero values.\nComputes <code>self + rhs + carry</code>, returning the result along …\nComputes <code>a + b + carry</code>, returning the result along with …\nCompute <code>self + rhs mod p</code>.\nComputes <code>self + rhs mod p</code>.\nComputes <code>self + rhs mod p</code> for the special modulus …\nBorrow the limbs of this <code>Uint</code>.\nBorrow the limbs of this <code>Uint</code> mutably.\nBorrow the inner limbs as an array of <code>Word</code>s.\nBorrow the inner limbs as a mutable array of <code>Word</code>s.\nGet the value of the bit at position <code>index</code>, as a truthy or …\nReturns <code>true</code> if the bit at position <code>index</code> is set, <code>false</code> …\nCalculates <code>a &amp; b</code>.\nComputes bitwise <code>a &amp; b</code>.\nCalculates <code>a | b</code>.\nComputes bitwise <code>a &amp; b</code>.\nCalculate the number of bits needed to represent this …\nCalculate the number of bits needed to represent this …\nCalculate the number of bits needed to represent this …\nCalculates <code>a ^ b</code>.\nComputes bitwise <code>a ^ b</code>.\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>AND</code>, returning a <code>CtOption</code> which …\nPerform checked division, returning a <code>CtOption</code> which …\nPerform checked multiplication, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>OR</code>, returning a <code>CtOption</code> which …\nPerform checked reduction, returning a <code>CtOption</code> which …\nSee <code>Self::checked_sqrt_vartime</code>.\nPerform checked sqrt, returning a <code>CtOption</code> which <code>is_some</code> …\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>XOR</code>, returning a <code>CtOption</code> which …\nPerform a comparison of the inner value in variable-time.\nReturns the Ordering between <code>self</code> and <code>rhs</code> in variable time.\nConcatenate the two halves, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConst-friendly assertion that two values are equal.\nConst-friendly assertion that two values are NOT equal.\nCreates a new non-zero limb in a const context. The second …\nCreates a new non-zero integer in a const context. The …\nComputes <code>self</code> % <code>rhs</code>, returns the remainder and and the …\nComputes <code>self</code> % <code>rhs</code>, returns the remainder and and the …\nCreates a <code>Residue</code> with the given value for a specific …\nComputes <code>self</code> / <code>rhs</code> using a pre-made reciprocal, returns …\nPre-calculates a reciprocal for a known divisor, to be …\nReturns a default instance of this object. It is a …\nComputes self / rhs, returns the quotient, remainder.\nComputes <code>self</code> / <code>rhs</code>, returns the quotient (q) and …\nComputes <code>self</code> / <code>rhs</code> using a pre-made reciprocal, returns …\nPerforms an equality check in variable-time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize from a big-endian byte array.\nDecode a non-zero integer from big endian bytes.\nDecode from big endian bytes.\nDecode from big endian bytes.\nCreate a new <code>Uint</code> from the provided big endian hex string.\nCreate a new <code>Uint</code> from the provided big endian bytes.\nDeserialize from a little-endian byte array.\nDecode a non-zero integer from big endian bytes.\nDecode from little endian bytes.\nDecode from little endian bytes.\nCreate a new <code>Uint</code> from the provided little endian hex …\nCreate a new <code>Uint</code> from the provided little endian bytes.\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU128</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u128</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u16</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU16</code> (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU16</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u16</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u32</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU32</code> (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU32</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u32</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u64</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU64</code> (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU64</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u64</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u8</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU8</code> (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU8</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u8</code> (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>Uint</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>WideWord</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>Word</code> (const-friendly)\nCreate a <code>Uint</code> from an array of <code>Word</code>s (i.e. word-sized …\nImplements a modulus with the given name, type, and value, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserialize from a big-endian <code>GenericArray</code>.\nDeserialize from a little-endian <code>GenericArray</code>.\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>. …\nComputes 1/<code>self</code> mod <code>2^k</code>.\nComputes 1/<code>self</code> mod <code>2^k</code>. This method is constant-time …\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>, …\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>, …\nComputes the inverse.\nIs this integer value an even number?\nIs this integer value an odd number?\nIs this limb an odd number?\nDetermine if this value is equal to zero.\nCalculate the number of leading zeros in the binary …\nCalculate the number of leading zeros in the binary …\nCalculate the number of leading zeros in the binary …\nComputes <code>self + (b * c) + carry</code>, returning the result …\nImplements modular arithmetic for constant moduli.\nMultiply <code>self</code> by <code>rhs</code>, returning a concatenated “wide” …\nCompute <code>self * rhs mod p</code>.\nComputes <code>self * rhs mod p</code> for the special modulus …\nCompute “wide” multiplication, with a product twice …\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCompute <code>-self mod p</code>.\nComputes <code>-a mod p</code>. Assumes <code>self</code> is in <code>[0, p)</code>.\nComputes <code>-a mod p</code> for the special modulus <code>p = MAX+1-c</code> …\nCreate a new checked arithmetic wrapper for the given …\nCreate a new non-zero integer.\nA non-const-fn version of <code>new_const()</code>, wrapping the result …\nConst-friendly <code>Uint</code> constructor.\nCalculate the number of limbs required to represent the …\nCalculates <code>!a</code>.\nComputes bitwise <code>!a</code>.\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nImport prelude for this crate: includes important traits.\nGenerate a cryptographically secure random value.\nGenerate a random <code>NonZero&lt;T&gt;</code>.\nGenerate a cryptographically secure random <code>Uint</code>.\nGenerate a cryptographically secure random number which is …\nGenerate a cryptographically secure random <code>Uint</code> which is …\nComputes self % rhs, returns the remainder.\nComputes <code>self</code> % 2^k. Faster than reduce since its a power …\nConstruct a <code>Uint&lt;T&gt;</code> from the unsigned integer value, …\nPerform saturating addition.\nPerform saturating addition, returning <code>MAX</code> on overflow.\nPerform saturating multiplication.\nPerform saturating multiplication, returning <code>MAX</code> on …\nPerform saturating subtraction.\nPerform saturating subtraction, returning <code>ZERO</code> on …\nComputes <code>self - (rhs + borrow)</code>, returning the result along …\nComputes <code>a - (b + borrow)</code>, returning the result along with …\nComputes <code>self &lt;&lt; rhs</code>. Panics if <code>rhs</code> overflows <code>Limb::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &lt;&lt; n</code>. Returns zero if <code>n &gt;= Self::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &lt;&lt; shift</code>.\nComputes a left shift on a wide input as <code>(lo, hi)</code>.\nComputes <code>self &gt;&gt; rhs</code>. Panics if <code>rhs</code> overflows <code>Limb::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &lt;&lt; n</code>. Returns zero if <code>n &gt;= Self::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &gt;&gt; n</code>.\nComputes a right shift on a wide input as <code>(lo, hi)</code>.\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number into parts, returning its high and low …\nSee <code>Self::sqrt_vartime</code>.\nComputes √(<code>self</code>) Uses Brent &amp; Zimmermann, Modern …\nComputes the same as <code>self.mul(self)</code>, but may be more …\nSquare self, returning a concatenated “wide” result.\nSquare self, returning a “wide” result in two parts as …\nCompute <code>self - rhs mod p</code>.\nComputes <code>self - rhs mod p</code>.\nComputes <code>self - rhs mod p</code> for the special modulus …\nSerialize to a big-endian byte array.\nEncode to big endian bytes.\nSerialize to a little-endian byte array.\nEncode to little endian bytes.\nConvert this <code>Uint</code> into its inner limbs.\nCreate an array of <code>Word</code>s (i.e. word-sized unsigned …\nCalculate the number of trailing ones the binary …\nCalculate the number of trailing ones in the binary …\nCalculate the number of trailing ones in the binary …\nCalculate the number of trailing zeros in the binary …\nCalculate the number of trailing zeros in the binary …\nCalculate the number of trailing zeros in the binary …\nPerform wrapping addition, discarding overflow.\nPerform wrapping addition, discarding overflow.\nPerform wrapping bitwise <code>AND</code>.\nWrapped division is just normal division i.e. <code>self</code> / <code>rhs</code> …\nPerform wrapping multiplication, discarding overflow.\nPerform wrapping multiplication, discarding overflow.\nPerform wrapping negation.\nPerform wrapping negation.\nPerform wrapping bitwise <code>OR</code>.\nWrapped (modular) remainder calculation is just <code>self</code> % <code>rhs</code>.\nSee <code>Self::wrapping_sqrt_vartime</code>.\nWrapped sqrt is just normal √(<code>self</code>) There’s no way …\nPerform wrapping subtraction, discarding underflow and …\nPerform wrapping subtraction, discarding underflow and …\nPerform wrapping bitwise `XOR``.\nThe original type.\nA generalization for numbers kept in optimized …\nImplements <code>Residue</code>s, supporting modular arithmetic with a …\nAlgorithm 14.32 in Handbook of Applied Cryptography …\nConvert the number back from the optimized representation.\nImplements <code>DynResidue</code>s, supporting modular arithmetic with …\nNumber of limbs required to encode a residue\nThe constant modulus\nThe lowest limbs of -(MODULUS^-1) mod R\nThe representation of 1 mod <code>MOD</code>.\nParameter used in Montgomery reduction\nR^2, used to move into Montgomery form\nR^3, used to perform a multiplicative inverse\nA residue mod <code>MOD</code>, represented using <code>LIMBS</code> limbs. The …\nThe parameters to efficiently go to and from the …\nThe representation of 0 mod <code>MOD</code>.\nAdds <code>rhs</code>.\nAccess the <code>Residue</code> value in Montgomery form.\nMutably access the <code>Residue</code> value in Montgomery form.\nPerforms the modular division by 2, that is for given <code>x</code> …\nReturns the argument unchanged.\nCreate a <code>Residue</code> from a value in Montgomery form.\nCalls <code>U::from(self)</code>.\nComputes the residue <code>self^-1</code> representing the …\nMultiplies by <code>rhs</code>.\nNegates the number.\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nRetrieves the integer currently encoded in this <code>Residue</code>, …\nComputes the (reduced) square of a residue.\nSubtracts <code>rhs</code>.\nExtract the value from the <code>Residue</code> in Montgomery form.\nA residue represented using <code>LIMBS</code> limbs. The odd modulus …\nThe parameters to efficiently go to and from the …\nAdds <code>rhs</code>.\nAccess the <code>DynResidue</code> value in Montgomery form.\nMutably access the <code>DynResidue</code> value in Montgomery form.\nPerforms the modular division by 2, that is for given <code>x</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>DynResidue</code> from a value in Montgomery form.\nCreate <code>DynResidueParams</code> corresponding to a <code>ResidueParams</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the residue <code>self^-1</code> representing the …\nReturns the modulus which was used to initialize these …\nMultiplies by <code>rhs</code>.\nNegates the number.\nInstantiates a new set of <code>ResidueParams</code> representing the …\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nInstantiates a new set of <code>ResidueParams</code> representing the …\nInstantiates a new <code>Residue</code> that represents 1.\nReturns the parameter struct used to initialize this …\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nRetrieves the integer currently encoded in this <code>Residue</code>, …\nComputes the (reduced) square of a residue.\nSubtracts <code>rhs</code>.\nExtract the value from the <code>DynResidue</code> in Montgomery form.\nInstantiates a new <code>Residue</code> that represents zero.\nCompute <code>self + rhs mod p</code>.\nSupport for decoding a <code>GenericArray</code> as a big integer.\nSupport for encoding a big integer as a <code>GenericArray</code>.\nTotal size of the represented integer in bits.\nSize of this integer in bits.\nTotal size of the represented integer in bytes.\nSize of this integer in bytes.\nIntegers whose representation takes a bounded amount of …\nSize of a byte array which encodes a big integer.\nChecked addition.\nChecked multiplication.\nChecked subtraction.\nConcatenate two numbers into a “wide” double-width …\nConcatenate two numbers into a “wide” combined-width …\nEncoding support.\nInteger type.\nConstant-time inversion.\nThe number of limbs used on this platform.\nMaximum value this integer can express.\nConcatenated output: combination of <code>Lo</code> and <code>Self</code>.\nCompute <code>self * rhs mod p</code>.\nPerforms modular multi-exponentiation using Montgomery’s …\nPerforms modular multi-exponentiation using Montgomery’s …\nCompute <code>-self mod p</code>.\nThe value <code>1</code>.\nBig integer which decodes a <code>GenericArray</code>.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nConcatenated output: twice the width of <code>Self</code>.\nSplit output: high/low components of the value.\nOutput of the inversion.\nConstant-time exponentiation.\nConstant-time exponentiation with exponent of a bounded …\nRandom number generation support.\nModular random number generation support.\nByte array representation.\nSplit a number in half, returning the most significant …\nSplit a number into parts, returning the most significant …\nSupport for optimized squaring\nCompute <code>self - rhs mod p</code>.\nThe value <code>0</code>.\nZero values.\nCompute <code>self + rhs mod p</code>.\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked multiplication, returning a <code>CtOption</code> which …\nPerform checked subtraction, returning a <code>CtOption</code> which …\nConcatenate the two halves, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nDeserialize from a big-endian byte array.\nDecode from big endian bytes.\nDeserialize from a little-endian byte array.\nDecode from little endian bytes.\nDeserialize from a big-endian <code>GenericArray</code>.\nDeserialize from a little-endian <code>GenericArray</code>.\nComputes the inverse.\nIs this integer value an even number?\nIs this integer value an odd number?\nDetermine if this value is equal to zero.\nCompute <code>self * rhs mod p</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCompute <code>-self mod p</code>.\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nGenerate a cryptographically secure random value.\nGenerate a cryptographically secure random number which is …\nSplit this number in half, returning its high and low …\nSplit this number into parts, returning its high and low …\nComputes the same as <code>self.mul(self)</code>, but may be more …\nCompute <code>self - rhs mod p</code>.\nSerialize to a big-endian byte array.\nEncode to big endian bytes.\nSerialize to a little-endian byte array.\nEncode to little endian bytes.\nThe <code>Choice</code> struct represents a choice for use in …\nA type which can be conditionally negated in constant time.\nA type which can be conditionally selected in constant …\nAn <code>Eq</code>-like trait that produces a <code>Choice</code> instead of a <code>bool</code>.\nA type which can be compared in some manner and be …\nA type which can be compared in some manner and be …\nThe <code>CtOption&lt;T&gt;</code> type represents an optional value similar …\nReturns a <code>None</code> value if the option is <code>None</code>, otherwise …\nConditionally assign <code>other</code> to <code>self</code>, according to <code>choice</code>.\nNegate <code>self</code> if <code>choice == Choice(1)</code>; otherwise, leave it …\nSelect <code>a</code> or <code>b</code> according to <code>choice</code>.\nConditionally swap <code>self</code> and <code>other</code> if <code>choice == 1</code>; …\nDetermine if two items are equal.\nTwo <code>CtOption&lt;T&gt;</code>s are equal if they are both <code>Some</code> and their …\nDetermine whether <code>self &gt; other</code>.\nDetermine whether <code>self &lt; other</code>.\nDetermine if two items are NOT equal.\nReturns the contained value, consuming the <code>self</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a true <code>Choice</code> if this value is <code>None</code>.\nReturns a true <code>Choice</code> if this value is <code>Some</code>.\nReturns a <code>None</code> value if the option is <code>None</code>, otherwise …\nThis method is used to construct a new <code>CtOption&lt;T&gt;</code> and …\nReturns <code>self</code> if it contains a value, and otherwise returns …\nThis returns the underlying value but panics if it is not …\nThis returns the underlying value if it is <code>Some</code> or the …\nThis returns the underlying value if it is <code>Some</code> or the …\nUnwrap the <code>Choice</code> wrapper to reveal the underlying <code>u8</code>.\nMarker trait for types whose <code>Default</code> is the desired …\nFallible trait for representing cases where zeroization …\nTrait for securely erasing values from memory.\nDerive the <code>Zeroize</code> trait.\nMarker trait signifying that this type will …\nDerive the <code>ZeroizeOnDrop</code> trait.\n<code>Zeroizing</code> is a a wrapper for any <code>Z: Zeroize</code> type which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMove value inside a <code>Zeroizing</code> wrapper which ensures it …\nTry to zero out this object from memory using Rust …\nZero out this object from memory using Rust intrinsics …\nExtension trait for iterators over mutable field elements …\nA non-allocating batch inverter.\nHow many bits of information can be reliably stored in the …\nGenerator of the <code>t-order</code> multiplicative subgroup.\nThis trait represents an element of a field.\nTrait for constructing a <code>PrimeField</code> element from a …\nModulus of the field written as a string for debugging …\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nThe one element of the field, the multiplicative identity.\nThis represents an element of a non-binary prime field.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nInverse of $2$ in the field.\nThe subset of prime-order fields such that <code>(modulus - 1)</code> …\nThe zero element of the field, the additive identity.\nA field element of small multiplicative order $N$.\nConsumes this iterator and inverts each field element …\nCubes this element.\nDoubles this element.\nReturns the argument unchanged.\nAttempts to convert a byte representation of a field …\nAttempts to convert a byte representation of a field …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nReturns a field element that is congruent to the provided …\nHelper methods for implementing the <code>ff</code> traits.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nInverts each field element in <code>elements</code> (when nonzero). …\nInverts each field element in <code>items</code> (when nonzero). …\nReturns true iff this element is even.\nReturns true iff this element is odd.\nReturns true iff this element is zero.\nReturns true iff this element is zero.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nReturns an element chosen uniformly at random using a …\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nConverts an element of the prime field into the standard …\nComputes:\nConstant-time implementation of Tonelli–Shanks’ …\nThe affine representation for this elliptic curve.\nEfficient representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group.\nA helper trait for types with a group operation.\nA helper trait for references with a group operation.\nThe encoding of group elements.\nScalars modulo the order of this group’s scalar field.\nA helper trait for types implementing group scalar …\nA helper trait for references implementing group scalar …\nAffine representation of a point on an elliptic curve that …\nA “w-ary non-adjacent form” scalar multiplication …\nA fixed window table for a group element, precomputed to …\nExtension trait on a <code>Group</code> that provides helpers used by …\nA “w-ary non-adjacent form” scalar, that uses …\nGiven a base and a number of scalars, compute a window …\nPerforms exponentiation given a base.\nConverts a batch of projective elements into affine …\nDoubles this element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to deserialize a group element from its encoding.\nAttempts to deserialize a group element, not checking if …\nAttempts to deserialize an element from its uncompressed …\nAttempts to deserialize an uncompressed element, not …\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if this point is the identity.\nConstruct a new wNAF context without allocating.\nComputes the w-NAF representation of the given scalar with …\nComputes a window table for the given base with the …\nReturns an element chosen uniformly at random from the …\nRecommends a wNAF window size given the number of scalars …\nPerforms exponentiation given a scalar.\nGiven a scalar, compute its wNAF representation and return …\nConstructs new space for the window table while borrowing …\nConstructs new space for the scalar representation while …\nConverts this element into its affine representation.\nConverts this element into its byte encoding. This may or …\nConverts this element into its uncompressed encoding, so …\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group …\nThe large prime-order subgroup in which cryptographic …\nMaps <code>self</code> to the prime-order subgroup by multiplying this …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nReturns <code>self</code> if it is contained in the prime-order …\nDetermines if this point represents the point at infinity; …\nDetermines if this element is of small order.\nDetermines if this element is “torsion free”, i.e., is …\nConverts this element to its curve representation.\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a prime-order …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nDetermines if this point represents the point at infinity; …\nConverts this element to its curve representation.\nThe addition operator <code>+</code>.\nThe addition assignment operator <code>+=</code>.\nPerform a batched inversion on a sequence of field …\nBytes used as input to <code>Reduce::reduce_bytes</code>.\nPerform an inversion on a field element (i.e. base field …\nLinear combination.\nLinear combination (extended version).\nThe multiplication operator <code>*</code>.\nMultiplication by the generator.\nThe unary negation operator <code>-</code>.\nField element type\nThe output of batch inversion. A container of field …\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>&gt;&gt;</code> operator.\nModular reduction.\nModular reduction to a non-zero output.\nThe right shift operator <code>&gt;&gt;</code>. Note that because this trait …\nThe right shift assignment operator <code>&gt;&gt;=</code>.\nThe subtraction operator <code>-</code>.\nThe subtraction assignment operator <code>-=</code>.\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nInvert a batch of field elements.\nInvert a field element.\nInvert a field element in variable time.\nCalculates <code>x * k + y * l</code>.\nCalculates <code>x1 * k1 + ... + xn * kn</code>.\nPerforms the <code>*</code> operation.\nMultiply by the generator of the prime-order subgroup.\nPerforms the unary <code>-</code> operation.\nPerform a modular reduction, returning a field element.\nInterpret the given bytes as an integer and perform a …\nPerform a modular reduction, returning a field element.\nInterpret the given bytes as an integer and perform a …\nPerforms the <code>&gt;&gt;</code> operation.\nPerforms the <code>&gt;&gt;=</code> operation.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\n<code>AlgorithmIdentifier</code> reference which has <code>AnyRef</code> parameters.\nASN.1 DER-related errors.\nA trait which associates an OID with a type.\nCarriage return: <code>\\r</code> (Pre-OS X Macintosh)\nCarriage return + line feed: <code>\\r\\n</code> (Windows)\nParse a private key object from a PKCS#8 encoded document.\nParse a public key object from an encoded SPKI document.\nASN.1 DER-encoded document.\nSerialize a private key object to a PKCS#8 encoded …\nSerialize a public key object to a SPKI-encoded document.\nContains the error value\nError type\nMalformed cryptographic key contained in a PKCS#8 document.\nLine feed: <code>\\n</code> (Unix OSes)\nLine endings: variants of newline characters that can be …\nThe OID associated with this type.\nObject identifier (OID).\nContains the success value\n<code>AlgorithmIdentifier::parameters</code> is malformed or otherwise …\nPKCS#8 <code>PrivateKeyInfo</code>.\nPublic key errors propagated from the <code>spki::Error</code> type.\nResult type\nSecret <code>Document</code> type.\nX.509 <code>SubjectPublicKeyInfo</code> (SPKI) as defined in RFC 5280 …\n<code>SubjectPublicKeyInfo</code> with <code>AnyRef</code> algorithm parameters, and …\nDenotes PKCS#8 v1: no public key field.\nDenotes PKCS#8 v2: <code>OneAsymmetricKey</code> with public key field.\nVersion identifier for PKCS#8 documents.\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nX.509 <code>AlgorithmIdentifier</code> for the private key type.\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nGet the byte serialization of this <code>LineEnding</code>.\nGet the ASN.1 DER-encoded bytes of this document.\nBorrow the inner serialized bytes of this document.\nTry to decode the inner ASN.1 DER message contained in this\nTry to decode the inner ASN.1 DER message as the given …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode the provided type as ASN.1 DER, storing the …\nEncode the provided type as ASN.1 DER.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>SubjectPublicKeyInfoOwned</code> from any object that …\nDecode ASN.1 DER document from PEM.\nDecode ASN.1 DER document from PEM.\nDeserialize PKCS#8 private key from ASN.1 DER-encoded data …\nDeserialize PKCS#8-encoded private key from PEM.\nDeserialize object from ASN.1 DER-encoded […\nDeserialize PEM-encoded [<code>SubjectPublicKeyInfo</code>].\nIs this version expected to have a public key?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>SecretDocument</code>.\nConvert to an ASN.1 DER-encoded byte vector.\nGet the encoded length of this <code>LineEnding</code>.\nGet the length of the encoded ASN.1 DER in bytes.\nGet the length of the encoded ASN.1 DER in bytes.\nCreate a new PKCS#8 <code>PrivateKeyInfo</code> message.\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm <code>parameters</code>.\nPrivate key data.\nPublic key data, optionally available if version is V2.\nRead ASN.1 DER document from a file.\nRead ASN.1 DER document from a file.\nRead PEM-encoded ASN.1 DER document from a file.\nRead PEM-encoded ASN.1 DER document from a file.\nLoad PKCS#8 private key from an ASN.1 DER-encoded file on …\nLoad PKCS#8 private key from a PEM-encoded file on the …\nLoad public key object from an ASN.1 DER-encoded file on …\nLoad public key object from a PEM-encoded file on the …\nPublic key data\nPublic key data\nReturn an allocated ASN.1 DER serialization as a byte …\nEncode ASN.1 DER document as a PEM string with …\nEncode ASN.1 DER document as a PEM string.\nSerialize a <code>SecretDocument</code> containing a PKCS#8-encoded …\nSerialize this private key as PEM-encoded PKCS#8 with the …\nSerialize a <code>Document</code> containing a SPKI-encoded public key.\nSerialize this public key as PEM-encoded SPKI with the …\nReturn an ASN.1 DER-encoded byte vector.\nGet the PKCS#8 <code>Version</code> for this structure.\nWrite ASN.1 DER document to a file.\nWrite ASN.1 DER document to a file.\nWrite PEM-encoded ASN.1 DER document to a file.\nWrite PEM-encoded ASN.1 DER document to a file.\nWrite ASN.1 DER-encoded PKCS#8 private key to the given …\nWrite ASN.1 DER-encoded PKCS#8 private key to the given …\nWrite ASN.1 DER-encoded public key to the given path\nWrite ASN.1 DER-encoded public key to the given path\nASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.\nASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.\n<code>APPLICATION</code>: types whose meaning is specific to an …\nApplication tag.\n<code>BIT STRING</code> tag: <code>3</code>.\n<code>BMPString</code> tag: <code>30</code>.\n<code>BOOLEAN</code> tag: <code>1</code>.\nASN.1 <code>CHOICE</code> denotes a union of one or more possible …\nClass of an ASN.1 tag.\n<code>CONTEXT-SPECIFIC</code>: types whose meaning is specific to a …\nContext-specific tag.\nDate-and-time type shared by multiple ASN.1 types (e.g. …\nDate-and-time related errors.\nDecoding trait.\nMarker trait for data structures that can be decoded from …\nPEM decoding trait.\nDecode the value part of a Tag-Length-Value encoded field, …\nDER ordering trait.\nASN.1 DER-encoded document.\nEncoding trait.\nPEM encoding trait.\nReference encoder: wrapper type which impls <code>Encode</code> for any …\nEncode the value part of a Tag-Length-Value encoded field, …\nReference value encoder: wrapper type which impls …\n<code>ENUMERATED</code> tag: <code>10</code>.\nContains the error value\nError type.\nError type.\n<code>EXPLICIT</code> tagging.\nThis error indicates a previous DER parsing operation …\nFile not found error.\nTypes which have a constant ASN.1 <code>Tag</code>.\n<code>GeneralizedTime</code> tag: <code>24</code>.\nASN.1 DER headers: tag + length component of TLV-encoded …\nIndefinite length.\nThis is the maximum date represented by the <code>DateTime</code> This …\n<code>IA5String</code> tag: <code>22</code>.\n<code>IMPLICIT</code> tagging.\nMessage is incomplete and does not contain all of the …\nLength type with support for indefinite lengths as used by …\nIndefinite length disallowed.\n<code>INTEGER</code> tag: <code>2</code>.\nI/O errors.\nASN.1-encoded length.\nIncorrect length for a given field.\nMaximum length currently supported: 256 MiB\nTag number <code>0</code>\nTag number <code>1</code>\nTag number <code>10</code>\nTag number <code>11</code>\nTag number <code>12</code>\nTag number <code>13</code>\nTag number <code>14</code>\nTag number <code>15</code>\nTag number <code>16</code>\nTag number <code>17</code>\nTag number <code>18</code>\nTag number <code>19</code>\nTag number <code>2</code>\nTag number <code>20</code>\nTag number <code>21</code>\nTag number <code>22</code>\nTag number <code>23</code>\nTag number <code>24</code>\nTag number <code>25</code>\nTag number <code>26</code>\nTag number <code>27</code>\nTag number <code>28</code>\nTag number <code>29</code>\nTag number <code>3</code>\nTag number <code>30</code>\nTag number <code>4</code>\nTag number <code>5</code>\nTag number <code>6</code>\nTag number <code>7</code>\nTag number <code>8</code>\nTag number <code>9</code>\n<code>AnyRef</code> representation of the ASN.1 <code>NULL</code> type.\nReader type used by <code>Reader::read_nested</code>.\nMessage is not canonically encoded.\n<code>NULL</code> tag: <code>5</code>.\n<code>NumericString</code> tag: <code>18</code>.\nLength of <code>1</code>\nLength of <code>1</code>.\n<code>OBJECT IDENTIFIER</code> tag: <code>6</code>.\n<code>OCTET STRING</code> tag: <code>4</code>.\nOID is improperly encoded.\nUnknown OID.\nContains the success value\nInteger overflow occurred (library bug!).\nMessage is longer than this library’s internal limits …\nPEM encoding errors.\n<code>Reader</code> type which decodes PEM on-the-fly.\n<code>Writer</code> type which outputs PEM-encoded data.\nPermission denied reading file.\n<code>PrintableString</code> tag: <code>19</code>.\n<code>PRIVATE</code>: types whose meaning is specific to a given …\nPrivate tag number.\nReader trait which reads DER-encoded input.\nReader does not support the requested operation.\n<code>REAL</code> tag: <code>9</code>.\nResult type.\nSecret <code>Document</code> type.\nMarker trait for ASN.1 <code>SEQUENCE</code>s.\n<code>SEQUENCE</code> tag: <code>16</code>.\n<code>SET</code> and <code>SET OF</code> tag: <code>17</code>.\n<code>SET</code> cannot contain duplicates.\n<code>SET</code> ordering error: items not in canonical order.\n<code>Reader</code> which consumes an input byte slice.\n<code>Writer</code> which encodes DER into a mutable output byte slice.\nASN.1 tag\nASN.1 tags.\nTagging modes: <code>EXPLICIT</code> versus <code>IMPLICIT</code>.\nUnknown tag mode.\nASN.1 tag numbers (i.e. lower 5 bits of a <code>Tag</code>).\nInvalid tag number.\nUnexpected tag.\nUnknown/unsupported tag.\nTypes which have an ASN.1 <code>Tag</code>.\n<code>TeletexString</code> tag: <code>20</code>.\nUndecoded trailing data at end of message.\n<code>UNIVERSAL</code>: built-in types whose meaning is the same in all …\n<code>UTCTime</code> tag: <code>23</code>.\nUTF-8 errors.\n<code>UTF8String</code> tag: <code>12</code>.\nUnexpected value.\nDER value ordering trait.\n<code>VideotexString</code> tag: <code>21</code>.\n<code>VisibleString</code> tag: <code>26</code>.\nWriter trait which outputs encoded DER.\nLength of <code>0</code>\nLength of <code>0</code>.\nCreate an <code>APPLICATION</code> tag with this tag number.\nModule containing all of the various ASN.1 built-in types …\nAssert that this <code>Tag</code> matches the provided expected tag.\nAnnotate an <code>ErrorKind</code> with context about where it occurred,\nIs the provided <code>Tag</code> decodable as a variant of this <code>CHOICE</code>?\nGet the <code>Class</code> that corresponds to this <code>Tag</code>.\nAttempt to decode an ASN.1 <code>CONTEXT-SPECIFIC</code> field with the …\nCreate a <code>CONTEXT-SPECIFIC</code> tag with this tag number.\nEncode a <code>CONTEXT-SPECIFIC</code> field with the provided tag …\nGet the day.\nAttempt to decode this message using the provided decoder.\nDecode a value which impls the <code>Decode</code> trait.\nAttempt to decode this <code>AnyRef</code> type into the inner value.\nAttempt to decode this <code>Any</code> type into the inner value.\nAttempt to decode this message using the provided <code>Reader</code>.\nReturn an <code>Ordering</code> between <code>self</code> and <code>other</code> when serialized …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode a value which impls the <code>Encode</code> trait.\nEncode the provided type as an <code>Any</code> value.\nEncode this value to the provided byte slice, returning a …\nEncode this message as ASN.1 DER, appending it to the …\nEncode value (sans [<code>Tag</code>]+<code>Length</code> header) as ASN.1 DER using …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nFinish decoding, returning the given value if there is no …\nFinish encoding PEM, writing the post-encapsulation …\nFinish encoding to the buffer, returning a slice …\nGet the length of DER Tag-Length-Value (TLV) encoded data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse <code>Self</code> from the provided DER-encoded byte slice.\nTry to decode this type from PEM.\nInstantiate from <code>SystemTime</code>.\nCompute a <code>DateTime</code> from the given <code>Duration</code> since the …\nGet the <code>Header</code> used to encode this value.\nGet the hour.\nCreate a new <code>ErrorKind::Incomplete</code> for the given length.\nGet the length of the input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this an application tag?\nDoes this tag represent a constructed (as opposed to …\nIs this a context-specific tag?\nIs this length definite?\nDid the decoding operation fail due to an error?\nDid the decoding operation fail due to an error?\nHave we read all of the input data?\nIs this length indefinite?\nIs this value an ASN.1 <code>NULL</code> value?\nIs this value an ASN.1 <code>NULL</code> value?\nIs this a private tag?\nIs this a universal tag?\nIs this length equal to zero?\nGet the <code>ErrorKind</code> which occurred.\nLength of the encoded value\nCreate an <code>Error</code> for an invalid <code>Length</code>.\nGet the minutes.\nGet the month.\nCreate a new PEM writer which outputs into the provided …\nCreate a new <code>AnyRef</code> from the provided <code>Tag</code> and DER bytes.\nCreate a new <code>Any</code> from the provided <code>Tag</code> and DER bytes.\nCreate a new <code>DateTime</code> from the given UTC time components.\nCreate a new <code>Error</code>.\nCreate a new <code>Header</code> from a <code>Tag</code> and a specified length.\nCreate a new <code>Length</code> for any value which fits inside of a …\nCreate a definite length from a type which can be …\nCreate a new PEM reader which decodes data on-the-fly.\nCreate a new slice reader for the given byte slice.\nCreate a new tag number (const-friendly).\nCreate a new encoder with the given byte slice as a …\nCreate an <code>Error</code> for an non-canonical value with the ASN.1 …\n<code>Any</code> representation of the ASN.1 <code>NULL</code> type.\nGet the <code>TagNumber</code> (lower 6-bits) for this tag.\nGet the octet encoding for this <code>Tag</code>.\nOffset within the original input stream.\nPeek at the next byte of input without modifying the …\nPeek forward in the input data, attempting to decode a …\nPeek at the next byte in the decoder and attempt to decode …\nGet the position within the buffer.\nGet the position inside of the message where the error …\nCreate a <code>PRIVATE</code> tag with this tag number.\nRead a single byte.\nAttempt to read input data, writing it into the provided …\nRead nested data of the given length.\nAttempt to read data borrowed directly from the input as a …\nRead a byte vector of the given length.\nA module for working with referenced data.\nGet the number of bytes still remaining in the buffer.\nPerform saturating addition of two lengths.\nPerform saturating subtraction of two lengths.\nGet the seconds.\nRead an ASN.1 <code>SEQUENCE</code>, creating a nested <code>Reader</code> for the …\nAttempt to decode this value an ASN.1 <code>SEQUENCE</code>, creating a …\nAttempt to decode this value an ASN.1 <code>SEQUENCE</code>, creating a …\nEncode an ASN.1 <code>SEQUENCE</code> of the given length.\nGet the ASN.1 tag that this type is encoded with.\nTag representing the type of the encoded value\nObtain a slice of bytes contain a complete TLV production …\nEncode this type as DER, returning a byte vector.\nTry to encode this type as PEM.\nConvert to <code>SystemTime</code>.\nGet the PEM label which will be used in the encapsulation …\nGet the PEM label which will be used in the encapsulation …\nCreate an <code>Error</code> because the current tag was unexpected, …\nCompute <code>Duration</code> since <code>UNIX_EPOCH</code> from the given calendar …\nGet the raw value for this <code>AnyRef</code> type as a byte slice.\nAllow access to value\nGet the inner value.\nReturn an <code>Ordering</code> between value portion of TLV-encoded …\nReturn an error for an invalid value with the given tag.\nCreate an <code>Error</code> for an invalid value with the ASN.1 type …\nCompute the length of this value (sans [<code>Tag</code>]+<code>Length</code> …\nWrite the given DER-encoded bytes as output.\nWrite a single byte.\nGet the year.\nActual tag encountered in the message.\nActual length of the message buffer currently being …\nRaw byte value of the tag.\nLength of the decoded data.\nTag the decoder was expecting (if there is a single such …\nExpected message length.\nOID value that was unrecognized by a parser for a …\nTotal length of the remaining data left in the buffer.\nTag of the value being decoded.\nTag of the value which is not canonically encoded.\nTag of the unexpected value.\nIs this tag constructed? (vs primitive).\nIs this tag constructed? (vs primitive).\nIs this tag constructed? (vs primitive).\nTag number.\nTag number.\nTag number.\nASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.\nASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.\nOwned form of ASN.1 <code>BIT STRING</code> type.\nIterator over the bits of a <code>BitString</code>.\nASN.1 <code>BIT STRING</code> type.\nASN.1 <code>BMPString</code> type.\nASN.1 <code>CHOICE</code> denotes a union of one or more possible …\nContext-specific field which wraps an owned inner value.\nContext-specific field reference.\nASN.1 <code>GeneralizedTime</code> type.\nASN.1 <code>IA5String</code> type.\nASN.1 <code>IA5String</code> type.\nSigned arbitrary precision ASN.1 <code>INTEGER</code> type.\nSigned arbitrary precision ASN.1 <code>INTEGER</code> reference type.\nLength of an RFC 5280-flavored ASN.1 DER-encoded <code>UtcTime</code>.\nMaximum number of unused bits allowed.\nMaximum number of unused bits allowed.\nMaximum year that can be represented as a <code>UTCTime</code>.\nASN.1 <code>NULL</code> type.\nObject identifier (OID).\nASN.1 <code>OCTET STRING</code> type: owned form..\nASN.1 <code>OCTET STRING</code> type: borrowed form.\nASN.1 <code>PrintableString</code> type.\nASN.1 <code>PrintableString</code> type.\nMarker trait for ASN.1 <code>SEQUENCE</code>s.\nASN.1 <code>SEQUENCE OF</code> backed by an array.\nIterator over the elements of an <code>SequenceOf</code>.\nThe <code>SequenceRef</code> type provides raw access to the octets …\nASN.1 <code>SET OF</code> backed by an array.\nIterator over the elements of an <code>SetOf</code>.\nASN.1 <code>SET OF</code> backed by a <code>Vec</code>.\nASN.1 <code>TeletexString</code> type.\nASN.1 <code>TeletexString</code> type.\nUnsigned arbitrary precision ASN.1 <code>INTEGER</code> type.\nUnsigned arbitrary precision ASN.1 <code>INTEGER</code> reference type.\nASN.1 <code>UTCTime</code> type.\nASN.1 <code>UTF8String</code> type.\nASN.1 <code>VideotexString</code> type.\nAdd an element to this <code>SequenceOf</code>.\nAdd an item to this <code>SetOf</code>.\nAdd an element to this <code>SetOfVec</code>.\nBorrow the inner byte slice.\nBorrow the inner byte slice.\nBorrow the encoded UCS-2 as bytes.\nBorrow the inner byte slice which contains the least …\nBorrow the inner byte slice which contains the least …\nBorrow the inner byte slice which contains the least …\nBorrow the inner byte slice which contains the least …\nBorrow the inner byte slice.\nBorrow the inner byte slice.\nBorrow the elements of this <code>SetOfVec</code> as a slice.\nGet the length of this <code>BIT STRING</code> in bits.\nGet the length of this <code>BIT STRING</code> in bits.\nIterator over the bits of this <code>BIT STRING</code>.\nIterator over the bits of this <code>BIT STRING</code>.\nGet the number of bytes/octets needed to represent this …\nIs the provided <code>Tag</code> decodable as a variant of this <code>CHOICE</code>?\nGet an iterator over characters in the string.\nGet an iterator over the <code>u16</code> codepoints.\nAttempt to decode an <code>EXPLICIT</code> ASN.1 <code>CONTEXT-SPECIFIC</code> field …\nAttempt to decode an <code>IMPLICIT</code> ASN.1 <code>CONTEXT-SPECIFIC</code> field …\nParse <code>T</code> from this <code>OCTET STRING</code>’s contents.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nExtend a <code>SetOfVec</code> using an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new ASN.1 <code>BIT STRING</code> from the given bytes.\nCreate a new ASN.1 <code>BIT STRING</code> from the given bytes.\nCreate a <code>GeneralizedTime</code> from a <code>DateTime</code>.\nCreate a <code>UtcTime</code> from a <code>DateTime</code>.\nCreate a new <code>SetOfVec</code> from the given iterator.\nInstantiate from <code>SystemTime</code>.\nInstantiate from <code>SystemTime</code>.\nCreate a new <code>BmpString</code> from its UCS-2 encoding.\nCreate a new <code>GeneralizedTime</code> given a <code>Duration</code> since …\nCreate a new <code>UtcTime</code> given a <code>Duration</code> since <code>UNIX_EPOCH</code> …\nCreate a new <code>BmpString</code> from a UTF-8 string.\nGet an element of this <code>SequenceOf</code>.\nGet the nth element from this <code>SetOf</code>.\nGet the nth element from this <code>SetOfVec</code>.\nIs the number of unused bits a value other than 0?\nIs the number of unused bits a value other than 0?\nInsert an item into this <code>SetOf</code>.\nInsert an item into this <code>SetOfVec</code>. Must be unique.\nInsert an item into this <code>SetOf</code>.\nInsert an item into this <code>SetOfVec</code>. Must be unique.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain the inner bytes.\nTake ownership of the octet string.\nConvert this <code>SetOfVec</code> into the inner <code>Vec</code>.\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs this <code>SequenceOf</code> empty?\nIs this <code>SetOf</code> empty?\nIs this <code>SetOfVec</code> empty?\nIterate over the elements in this <code>SequenceOf</code>.\nIterate over the elements of this <code>SetOf</code>.\nIterate over the elements of this <code>SetOfVec</code>.\nGet the length of this <code>IntRef</code> in bytes.\nGet the length of this <code>Int</code> in bytes.\nGet the length of this <code>UintRef</code> in bytes.\nGet the length of this <code>Uint</code> in bytes.\nGet the length of the inner byte slice.\nGet the length of the inner byte slice.\nNumber of elements in this <code>SequenceOf</code>.\nNumber of elements in this <code>SetOf</code>.\nNumber of elements in this <code>SetOfVec</code>.\nCreate a new ASN.1 <code>BIT STRING</code> from a byte slice.\nCreate a new ASN.1 <code>BIT STRING</code> from a byte slice.\nCreate a new <code>IA5String</code>.\nCreate a new <code>IA5String</code>.\nCreate a new <code>IntRef</code> from a byte slice.\nCreate a new <code>Int</code> from a byte slice.\nCreate a new <code>UintRef</code> from a byte slice.\nCreate a new <code>Uint</code> from a byte slice.\nCreate a new ASN.1 <code>OCTET STRING</code> from a byte slice.\nCreate a new ASN.1 <code>OCTET STRING</code>.\nCreate a new ASN.1 <code>PrintableString</code>.\nCreate a new ASN.1 <code>PrintableString</code>.\nCreate a new <code>SequenceOf</code>.\nCreate a new <code>SetOf</code>.\nCreate a new <code>SetOfVec</code>.\nCreate a new ASN.1 <code>TeletexString</code>.\nCreate a new ASN.1 <code>TeletexString</code>.\nCreate a new ASN.1 <code>UTF8String</code>.\nCreate a new ASN.1 <code>VideotexString</code>.\nBorrow the raw bytes of this <code>BIT STRING</code>.\nBorrow the raw bytes of this <code>BIT STRING</code>.\nTag mode: <code>EXPLICIT</code> VS <code>IMPLICIT</code>.\nTag mode: <code>EXPLICIT</code> VS <code>IMPLICIT</code>.\nContext-specific tag number sans the leading <code>0b10000000</code> …\nContext-specific tag number sans the leading <code>0b10000000</code> …\nConvert this <code>GeneralizedTime</code> into a <code>DateTime</code>.\nConvert this <code>UtcTime</code> into a <code>DateTime</code>.\nConvert to <code>SystemTime</code>.\nConvert to <code>SystemTime</code>.\nGet the duration of this timestamp since <code>UNIX_EPOCH</code>.\nGet the duration of this timestamp since <code>UNIX_EPOCH</code>.\nGet the number of unused bits in this byte slice.\nGet the number of unused bits in the octet serialization …\nValue of the field.\nValue of the field.\nWidth at which the Base64 body of RFC7468-compliant PEM is …\nBase64-related errors.\nBuffered Base64 decoder type.\nBuffered Base64 encoder type.\nCarriage return: <code>\\r</code> (Pre-OS X Macintosh)\nCarriage return + line feed: <code>\\r\\n</code> (Windows)\nCharacter encoding-related errors.\nBuffered PEM decoder.\nErrors in the encapsulated text (which aren’t …\nBuffered PEM encoder.\nContains the error value\nPEM errors.\nHeader detected in the encapsulated text.\nLine feed: <code>\\n</code> (Unix OSes)\nInvalid label.\nInvalid length.\nLine endings: variants of newline characters that can be …\nContains the success value\nExpected PEM type label for a given document, e.g. …\nMarker trait for types with an associated PEM type label.\nErrors in the post-encapsulation boundary.\nErrors in the pre-encapsulation boundary.\n“Preamble” (text before pre-encapsulation boundary) …\nResult type with the <code>pem-rfc7468</code> crate’s <code>Error</code> type.\nUnexpected PEM type label.\nBorrow the inner <code>Base64Encoder</code>.\nDecode a PEM document according to RFC 7468’s “Strict…\nDecode data into the provided output buffer.\nDecode the encapsulation boundaries of a PEM document …\nDecode all of the remaining data in the input buffer into …\nDecode a PEM document according to RFC 7468’s “Strict…\nCompute the length of a PEM encoded document which …\nCompute the length of a PEM encoded document with the …\nEncode a PEM document according to RFC 7468’s “Strict…\nEncode the provided input data.\nEncode a PEM document according to RFC 7468’s “Strict…\nGet the length of a PEM encoded document with the given …\nFinish encoding PEM, writing the post-encapsulation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAre we finished decoding the PEM input?\nCreate a new PEM <code>Encoder</code> with the default options which …\nCreate a new PEM <code>Decoder</code> with the default options.\nCreate a new PEM <code>Encoder</code> which wraps at the given line …\nCreate a new PEM <code>Decoder</code> which wraps at the given line …\nGet the decoded length of the remaining PEM data after …\nGet the PEM type label used for this document.\nGet the PEM type label for the input document.\nValidate that a given label matches the expected label.\nType label that was expected.\nThe resulting type referencing back to Self\nThe resulting type after obtaining ownership.\nA trait for borrowing data from an owned struct\nA trait for cloning a referenced structure and getting …\nCreates a new object referencing back to the self for …\nCreates a new object taking ownership of the data\n<code>AlgorithmIdentifier</code> for this structure.\nX.509 <code>AlgorithmIdentifier</code> as defined in RFC 5280 Section …\n<code>AlgorithmIdentifier</code> reference which has <code>Any</code> parameters.\n<code>AlgorithmIdentifier</code> reference which has <code>AnyRef</code> parameters.\n<code>AlgorithmIdentifier</code> with <code>ObjectIdentifier</code> parameters.\nAlgorithm parameters are missing.\nASN.1 DER-related errors.\nReturns <code>AlgorithmIdentifier</code> associated with the structure.\nParse a public key object from an encoded SPKI document.\nASN.1 DER-encoded document.\nReturns <code>AlgorithmIdentifier</code> associated with the structure.\nReturns <code>AlgorithmIdentifier</code> associated with the signature …\nSerialize a public key object to a SPKI-encoded document.\nContains the error value\nError type\nMalformed cryptographic key contained in a SPKI document.\nMaximum size of a BER/DER-encoded OID in bytes.\nObject identifier (OID).\nUnknown algorithm OID.\nContains the success value\nAlgorithm parameters.\nAlgorithm parameters.\nResult type with <code>spki</code> crate’s <code>Error</code> type.\n<code>AlgorithmIdentifier</code> for the corresponding singature system.\nReturns <code>AlgorithmIdentifier</code> associated with the signature …\nReturns the <code>BitString</code> encoding of the signature.\nX.509 <code>SubjectPublicKeyInfo</code> (SPKI) as defined in RFC 5280 …\n<code>SubjectPublicKeyInfo</code> with <code>Any</code> algorithm parameters, and …\n<code>SubjectPublicKeyInfo</code> with <code>AnyRef</code> algorithm parameters, and …\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nX.509 <code>AlgorithmIdentifier</code> for the public key type\n<code>AlgorithmIdentifier</code> for this structure.\nReturn the arc with the given index, if it exists.\nIterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…\nGet the BER/DER serialization of this OID as bytes.\nAssert the <code>algorithm</code> OID is an expected value.\nAssert the values of the <code>algorithm</code> and <code>parameters</code> OIDs.\nAssert <code>parameters</code> is an OID and has the expected value.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an OID from a slice of <code>Arc</code> values (i.e. integers).\nParse an OID from from its BER/DER encoding.\nDeserialize object from ASN.1 DER-encoded […\nDeserialize PEM-encoded [<code>SubjectPublicKeyInfo</code>].\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the length of this <code>ObjectIdentifier</code> in arcs.\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nConvert to a pair of <code>ObjectIdentifier</code>s.\nAlgorithm <code>parameters</code>.\nAlgorithm <code>parameters</code>.\nAlgorithm <code>parameters</code>.\nAlgorithm <code>parameters</code>.\nGet the <code>parameters</code> field as an <code>AnyRef</code>.\nGet the <code>parameters</code> field as an <code>ObjectIdentifier</code>.\nGet the parent OID of this one (if applicable).\nPush an additional arc onto this OID, returning the child …\nLoad public key object from an ASN.1 DER-encoded file on …\nLoad public key object from a PEM-encoded file on the …\n<code>AlgorithmIdentifier</code> for the corresponding singature system.\nPublic key data\nPublic key data\nPublic key data\n<code>BitString</code> encoding for this signature.\nSerialize a <code>Document</code> containing a SPKI-encoded public key.\nSerialize this public key as PEM-encoded SPKI with the …\nWrite ASN.1 DER-encoded public key to the given path\nWrite ASN.1 DER-encoded public key to the given path\nUnrecognized OID value found in e.g. a SPKI …\nAccess to the affine coordinates of an elliptic curve …\nAffine point type for a given curve with a <code>CurveArithmetic</code> …\nElliptic curve point in affine coordinates.\nNormalize point(s) in projective representation by …\nShould point compaction be applied by default?\nShould point compression be applied by default?\nElliptic curve with an arithmetic implementation.\nDecompact an elliptic curve point from an x-coordinate.\nDecompress an elliptic curve point.\nDouble a point (i.e. add it to itself)\nField element representation.\nNon-identity point type.\nThe output of the batch normalization; a container of …\nPoint compaction settings.\nPoint compression settings.\nProjective point type for a given curve with a …\nElliptic curve point in projective coordinates.\nScalar field modulo this curve’s order.\nPerform a batched conversion to affine representation on a …\nAttempt to decompact an elliptic curve point\nAttempt to decompress an elliptic curve point.\nDouble this point.\nReturns the argument unchanged.\nDecode a <code>NonIdentity</code> from its encoding.\nCalls <code>U::from(self)</code>.\nCreate a <code>NonIdentity</code> from a point.\nGenerate a random <code>NonIdentity&lt;ProjectivePoint&gt;</code>.\nConverts this element into its affine representation.\nConverts this element to its curve representation.\nReturn wrapped point.\nGet the affine x-coordinate as a serialized field element.\nIs the affine y-coordinate odd?\nScalar blinded with a randomly generated masking value.\nInstantiate a scalar from an unsigned integer without …\nIs this scalar greater than n / 2?\nNon-zero scalar type.\nScalar field element for a particular elliptic curve.\nGeneric scalar type with primitive functionality.\nUnsigned integer type (i.e. <code>Curve::Uint</code>)\nReturns the argument unchanged.\nInstantiate scalar from an unsigned integer without …\nCalls <code>U::from(self)</code>.\nIs this scalar greater than or equal to n / 2?\nCreate a new <code>BlindedScalar</code> from a scalar and a …\nCompact curve point\nCompact point (<code>0x05</code>)\nCompressed curve point\nCompressed point with even y-coordinate (<code>0x02</code>)\nCompressed point with odd y-coordinate (<code>0x03</code>)\nEncoded elliptic curve point with point compression.\nSize of a compressed elliptic curve point.\nSize of a compressed point for the given elliptic curve …\nEnum representing the coordinates of either compressed or …\nEncoded elliptic curve point sized appropriately for a …\nTrait for deserializing a value from a SEC1 encoded curve …\nIdentity point (a.k.a. point at infinity)\nIdentity point (<code>0x00</code>)\nTrait for supported modulus sizes which precomputes the …\nTag byte used by the <code>Elliptic-Curve-Point-to-Octet-String</code> …\nTrait for serializing a value to a SEC1 encoded curve …\nTrait for serializing a value to a SEC1 encoded curve …\nUncompressed curve point\nUncompressed point (<code>0x04</code>)\nEncoded elliptic curve point <em>without</em> point compression.\nSize of an uncompressed elliptic curve point.\nSize of an uncompressed point for the given elliptic curve …\nSize of an untagged point for given elliptic curve, i.e. …\nValidate that the given <code>EncodedPoint</code> represents the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize the type this trait is impl’d on from an …\nParse a tag value from a byte\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this point compact?\nIs this point compressed?\nIs this point the identity point?\nCompute the expected total message length for a message …\nGet the tag octet needed to encode this set of <code>Coordinates</code>\nSerialize this value as a SEC1 <code>EncodedPoint</code>, optionally …\nSerialize this value as a SEC1 <code>EncodedPoint</code>, optionally …\nValidate that the given <code>EncodedPoint</code> is a valid public key …\nx-coordinate\nx-coordinate\nx-coordinate\ny-coordinate\nIs the y-coordinate odd?\nAffine point whose coordinates are represented by the …\nProjective point whose coordinates are represented by the …\nImplements the complete addition formula from …\nImplements the complete mixed addition formula from …\nImplements the exception-free point doubling formula from …\nSize of a Taproot Schnorr signature in bytes.\nAn extension trait that is automatically implemented for …\nSignature errors.\nTaproot Schnorr signature as defined in BIP340.\nTaproot Schnorr signature serialized as bytes.\nTaproot Schnorr signing key.\nTaproot Schnorr verifying key.\nBorrow the inner <code>AffinePoint</code> this type wraps.\nBorrow the secret <code>NonZeroScalar</code> value for this key.\nUpcast to an <code>RngCore</code> trait object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse signing key from big endian-encoded bytes.\nParse verifying key from big endian-encoded x-coordinate.\nCreate a new error with an associated source.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new error with no associated source\nGenerate a cryptographically random <code>SigningKey</code>.\nCompute Schnorr signature.\nSerialize as bytes.\nSerialize as bytes.\nSerialize this signature as bytes.\nGet the <code>VerifyingKey</code> that corresponds to this signing key.\nConvenience wrapper trait covering functionality of …\nSHA-224 hasher.\nSHA-256 hasher.\nCore block-level SHA-256 hasher with variable output size.\nSHA-384 hasher.\nSHA-512 hasher.\nCore block-level SHA-512 hasher with variable output size.\nSHA-512/224 hasher.\nSHA-512/256 hasher.\nProcess input data in a chained manner.\nCompute hash of <code>data</code>.\nRetrieve result and consume hasher instance.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new hasher instance.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nReset hasher instance to its initial state.\nProcess data, updating the internal state.\nLedger wallet type\n<code>hex</code> error.\nError when using the Ledger transport.\nUnderlying Ledger transport error.\nLedger Live-generated HD path\nA Ledger Ethereum signer.\nLegacy generated HD Path\nAny other path\n<code>semver</code> error.\nGot a response, but it didn’t contain as much data as …\nSignature Error\nDevice response was unexpectedly empty.\nThrown when trying to sign using EIP-712 with an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the account which corresponds to our derivation path\nGets the account which corresponds to the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate the application by acquiring a lock on the …\nSigns an Ethereum transaction’s RLP bytes (requires …\nReturns the semver of the Ethereum ledger app\nNumber of bytes expected.\nNumber of bytes received.\nUnderlying Trezor transport error.\nCould not retrieve device features.\nTrezor wallet type.\nThrown when converting from a hex string.\nNeed to provide a chain ID for EIP-155 signing.\nAny other path.\nThrown when converting a semver requirement.\nSignature Error\nError when using the Trezor transport\nTrezor Live-generated HD path\nA Trezor Ethereum signer.\nThrown when trying to sign an EIP-712 struct with an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the account which corresponds to our derivation path\nGets the account which corresponds to the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a new Trezor signer.\nConverts an ECDSA public key to its corresponding Ethereum …\nConvert a raw, uncompressed public key to its …\nConverts an ECDSA private key to its corresponding …\n<code>coins_bip32</code> error.\n<code>coins_bip39</code> error.\n<code>ecdsa</code> error.\n<code>eth_keystore</code> error.\n<code>hex</code> error.\n<code>std::io</code> error.\nA wallet instantiated with a locally stored private key\nRepresents a structure that can resolve into a <code>LocalWallet</code>.\n<code>MnemonicBuilder</code> error.\nAn Ethereum private-public key pair which can be used for …\nError thrown by <code>Wallet</code>.\nA wallet instantiated with a YubiHSM\nReturns this wallet’s chain ID.\nBorrow the secret <code>NonZeroScalar</code> value for this key.\nBuilds a <code>LocalWallet</code> using the parameters set in mnemonic …\nBuilds a <code>LocalWallet</code> using the parameters set in the …\nBuilds a <code>LocalWallet</code> using the parameters set in the …\nReturns this wallet’s chain ID.\nConnects to a yubi key’s ECDSA account at the provided id\nDecrypts an encrypted JSON from the provided path to …\nSets the derivation path of the child key to be derived.\nCreates a new encrypted JSON with the provided private key …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Wallet instance from a raw scalar serialized …\nCreates a new Wallet instance from a raw scalar serialized …\nUploads the provided keypair on the yubi at the provided id\nCreates a new Wallet instance from a <code>SigningKey</code>.\nCreates a new Wallet instance from a raw scalar serialized …\nSets the derivation path of the child key to be derived. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this wallet and returns its signer.\nCreates a new random ECDSA keypair on the yubi at the …\nCreates a new random encrypted JSON with the provided …\nConstruct a new wallet with an external <code>PrehashSigner</code>.\nSets the password used to construct the seed from the …\nSets the phrase in the mnemonic builder. The phrase can …\nCreates a new random keypair seeded with <code>rand::thread_rng()</code>…\nCreates a new random keypair seeded with the provided RNG.\nReturns this wallet’s signer.\nSerialize this <code>Wallet</code>’s <code>SigningKey</code> as a <code>B256</code> byte array.\nSerialize this <code>Wallet</code>’s <code>SigningKey</code> as a <code>FieldBytes</code> byte …\nSets the word count of a mnemonic phrase to be generated …\nSets the path to which the randomly generated phrase will …\nDescribes an error propagated from the BIP-32 crate.\nThe ChineseSimplified wordlist that implements the …\nThe ChineseTraditional wordlist that implements the …\nThe Czech wordlist that implements the Wordlist trait.\nThe English wordlist that implements the Wordlist trait.\nHolds valid entropy lengths for a mnemonic\nThe French wordlist that implements the Wordlist trait.\nDescribes the error when the mnemonic’s entropy length …\nDescribes the error when the wordlist is queried at an …\nDescribes the error when the given phrase is invalid.\nDescribes the error when the wordlist does not contain the …\nDescribes the error when the word count provided for …\nThe Italian wordlist that implements the Wordlist trait.\nThe Japanese wordlist that implements the Wordlist trait.\nThe Korean wordlist that implements the Wordlist trait.\nMnemonic represents entropy that can be represented as a …\nThe error type returned while interacting with mnemonics.\nThe Portuguese wordlist that implements the Wordlist trait.\nSixteen bytes of entropy\nThe Spanish wordlist that implements the Wordlist trait.\nThirtyTwo bytes of entropy\nTwenty bytes of entropy\nTwentyEight bytes of entropy\nTwentyFour bytes of entropy\nThe Wordlist trait that every language’s wordlist must …\nThe error type returned while interacting with wordists.\nDescribes an error propagated from the wordlist errors.\nReturns the derived child private key of the corresponding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiates new entropy from an RNG. Fails if the …\nAttempts to instantiate Entropy from a slice. Fails if the …\nReturns the word of a given index from the word list.\nReturns the word list as a string.\nReturns the index of a given word from the word list.\nReturns the index of a given word from the word list.\nReturns the index of a given word from the word list.\nReturns the index of a given word from the word list.\nReturns the index of a given word from the word list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the entropy array\nReturns the master private key of the corresponding …\nMnemonic phrases\nReturns a new mnemonic generated using the provided random …\nReturns a new mnemonic for a given phrase. The 12-24 …\nReturns a new mnemonic given the word count, generated …\nConverts the mnemonic into phrase.\nConvert to a bip23 seed\nWordlists\nComputes the number of words in the mnemonic\nDescribes an error propagated from the BIP-32 crate.\nHolds valid entropy lengths for a mnemonic\nDescribes the error when the mnemonic’s entropy length …\nDescribes the error when the given phrase is invalid.\nDescribes the error when the word count provided for …\nMnemonic represents entropy that can be represented as a …\nThe error type returned while interacting with mnemonics.\nSixteen bytes of entropy\nThirtyTwo bytes of entropy\nTwenty bytes of entropy\nTwentyEight bytes of entropy\nTwentyFour bytes of entropy\nDescribes an error propagated from the wordlist errors.\nThe ChineseSimplified wordlist that implements the …\nThe ChineseTraditional wordlist that implements the …\nThe Czech wordlist that implements the Wordlist trait.\nThe English wordlist that implements the Wordlist trait.\nThe French wordlist that implements the Wordlist trait.\nDescribes the error when the wordlist is queried at an …\nDescribes the error when the wordlist does not contain the …\nThe Italian wordlist that implements the Wordlist trait.\nThe Japanese wordlist that implements the Wordlist trait.\nThe Korean wordlist that implements the Wordlist trait.\nThe Portuguese wordlist that implements the Wordlist trait.\nThe Spanish wordlist that implements the Wordlist trait.\nThe Wordlist trait that every language’s wordlist must …\nThe error type returned while interacting with wordists.\nThe Chinese (Simplified) wordlist\nThe Chinese (Traditional) wordlist\nThe Czech wordlist\nThe English wordlist\nThe French wordlist\nReturns the word of a given index from the word list.\nReturns the word list as a string.\nReturns the index of a given word from the word list.\nThe Italian wordlist\nThe Japanese wordlist\nThe Korean wordlist\nThe Portuguese wordlist\nThe Spanish wordlist\nThe ChineseSimplified wordlist that implements the …\nChineseSimplified word list, split into words\nThe list of words as supported in the Chinese (Simplified) …\nThe ChineseTraditional wordlist that implements the …\nChineseTraditional word list, split into words\nThe list of words as supported in the Chinese …")