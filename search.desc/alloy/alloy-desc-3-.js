searchState.loadedDescShard("alloy", 3, "The Czech wordlist that implements the Wordlist trait.\nCzech word list, split into words\nThe list of words as supported in the Czech language.\nThe English wordlist that implements the Wordlist trait.\nEnglish word list, split into words\nThe list of words as supported in the English language.\nThe French wordlist that implements the Wordlist trait.\nFrench word list, split into words\nThe list of words as supported in the French language.\nThe Italian wordlist that implements the Wordlist trait.\nItalian word list, split into words\nThe list of words as supported in the Italian language.\nThe Japanese wordlist that implements the Wordlist trait.\nJapanese word list, split into words\nThe list of words as supported in the Japanese language.\nThe Korean wordlist that implements the Wordlist trait.\nKorean word list, split into words\nThe list of words as supported in the Korean language.\nPortuguese word list, split into words\nThe Portuguese wordlist that implements the Wordlist trait.\nThe list of words as supported in the Portuguese language.\nSpanish word list, split into words\nThe list of words as supported in the Spanish language.\nThe Spanish wordlist that implements the Wordlist trait.\nCryptographic algorithm types supported by the <code>YubiHSM 2</code>\nAsymmetric algorithms\nAuditing policy options\nYubiHSM 2 symmetric PSK authentication\nBox containing a thread-safe + <code>&#39;static</code> error suitable for …\n<code>change-authentication-key</code>: overwrite existing …\n<code>create-otp-aead</code>: create an OTP AEAD\nObject attributes specifying which operations are allowed …\nYubiHSM client: main API in this crate for accessing …\nAbstract interface to multiple types of YubiHSM 2 …\nError context: stores an error source (as a <code>BoxError</code>) and …\nCredentials used to establish a session with the HSM\n<code>decrypt-oaep</code>: perform RSA-OAEP decryption\n<code>decrypt-otp</code>: decrypt OTP\n<code>decrypt-pkcs</code>: perform RSA-PKCS1v1.5 decryption\nDefault timeout for USB communication (30 seconds)\n<code>delete-asymmetric-key</code>: delete asymmetric key objects\n<code>delete-authentication-key</code>: delete authentication::Key …\n<code>delete-hmac-key</code>: delete HMACKey objects\n<code>delete-opaque</code>: delete opaque objects\n<code>delete-otp-aead-key</code>: delete Yubic OTP AEAD key objects\n<code>delete-template</code>: delete template objects\n<code>delete-wrap-key</code>: delete WrapKey objects\n<code>derive-ecdh</code>: perform ECDH operation\nLogical partition within the <code>YubiHSM 2</code>, allowing several …\n<code>exportable-under-wrap</code>: mark an object as exportable under …\n<code>export-wrapped</code>: export objects under keywrap\nElliptic Curve Diffie-Hellman (i.e. key exchange) …\nECDSA algorithms\nError type\nAudit logging permanently enabled; not possible to turn off\n<code>generate-asymmetric-key</code>: generate asymmetric objects\n<code>generate-hmac-key</code>: generate HMAC key objects\n<code>generate-otp-aead-key</code>: generate Yubico OTP AEAD objects\n<code>generate-wrap-key</code>: generate wrapkey objects\n<code>get-log-entries</code>: read the log store\n<code>get-opaque</code>: read opaque objects\n<code>get-option</code>: read device-global options\n<code>get-pseudo-random</code>: extract random bytes\n<code>get-template</code>: read SSH template objects\nHMAC algorithms\nConfiguration options for the HTTP (i.e. <code>yubihsm-connector</code>…\n<code>import-wrapped</code>: import keywrapped objects\nError message type: provide additional context with a …\nRSA-PSS mask generating functions\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nAudit logging disabled\nAudit logging enabled\nOpaque data types\n<code>put-asymmetric-key</code>: write asymmetric objects\n<code>put-authentication-key</code>: write authentication key objects\n<code>put-hmac-key</code>: write HMAC key objects\n<code>put-opaque</code>: Write Opaque Objects\n<code>set-option</code>: write device-global options\n<code>put-otp-aead-key</code>: write OTP AEAD key objects\n<code>put-template</code>: write template objects\n<code>put-wrap-key</code>: write WrapKey objects\n<code>randomize-otp-aead</code>: create an OTP AEAD from random data\n<code>reset-device</code>: factory reset the device\n<code>rewrap-from-otp-aead-key</code>: rewrap AEADs from an OTP AEAD …\n<code>rewrap-to-otp-aead-key</code>: rewrap AEADs to an OTP AEAD key …\nRSA algorithms (signing and encryption)\n<code>sign-attestation-certificate</code>: create attestation (i.e. …\n<code>sign-ecdsa</code>: compute ECDSA digital signature\n<code>sign-eddsa</code>: compute EdDSA (i.e. Ed25519) digital signature\n<code>sign-hmac</code>: compute HMAC for data\n<code>sign-pkcs</code>: compute RSA-PKCS1v1.5 digital signature\n<code>sign-pss</code>: compute RSA-PSS digital signature\n<code>sign-ssh-certificate</code>: sign SSH certificates\nSSH template algorithms\nunknown capability: bit 47\nunknown capability: bit 48\nunknown capability: bit 49\nunknown capability: bit 50\nunknown capability: bit 51\nunknown capability: bit 52\nunknown capability: bit 53\nunknown capability: bit 54\nunknown capability: bit 55\nunknown capability: bit 56\nunknown capability: bit 57\nunknown capability: bit 58\nunknown capability: bit 59\nunknown capability: bit 60\nunknown capability: bit 61\nunknown capability: bit 62\nunknown capability: bit 63\n<code>unwrap-data</code>: unwrap user-provided data\nConfiguration for connecting to the YubiHSM via USB\nA Universally Unique Identifier (UUID).\n<code>verify-hmac</code>: verify HMAC for data\n<code>wrap-data</code>: wrap user-provided data\nObject wrap (i.e. HSM-to-HSM encryption) algorithms\nYubico OTP algorithms\nAddress of <code>yubihsm-connector</code> (IP address or DNS name)\nCryptographic algorithms supported by the YubiHSM 2\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nAsymmetric cryptography i.e. digital signatures and …\nGet <code>asymmetric::Algorithm</code>\nGet the <code>Domain</code> object corresponding to the given-numbered …\nAttestation Certificates: generate an X.509 certificate …\nAuditing options (for use with the <code>get_option</code> and …\nYubiHSM 2 authentication functionality (i.e. credentials …\nGet <code>authentication::Algorithm</code>\nAuth key to authenticate with\nKey ID to authenticate with\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBlink the HSM’s LEDs (to identify it) for the given …\nGet a <code>Braced</code> formatter.\nObject attributes specifying which operations are allowed …\nYubiHSM client: core functionality of this crate.\nYubiHSM commands: types and traits for modeling the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConnect to the HSM (idempotently, i.e. returns success if …\nMethods of connecting to a YubiHSM 2:\nBorrow this client’s YubiHSM connector (which is <code>Clone</code>…\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCreate a <code>yubihsm::Client</code>, but defer connecting until …\nDecrypt data encrypted with RSA-OAEP\nDelete an object of the given ID and type.\nHSM device-related functionality\nGet the device error, if this is a device error\nGet information about the HSM device.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nLogical partitions within the HSM, allowing several …\nElliptic Curve Diffie Hellman Key Exchange.\nGet <code>ecdh::Algorithm</code>\nElliptic Curve Digital Signature Algorithm (ECDSA) support\nGet <code>ecdsa::Algorithm</code>\nEcho a message sent to the HSM.\nEd25519 digital signature algorithm support\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nError types\nExport an encrypted object from the HSM using the given …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreate a set of credentials from the given auth key and …\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nConvert an unsigned byte into an Algorithm (if valid)\nConvert an unsigned byte into a object::Type (if valid)\nGenerate a new asymmetric key within the HSM.\nGenerate a new HMAC key within the HSM.\nGenerate a new wrap key within the HSM.\nGet the audit policy setting for a particular command.\nGet the audit policy settings for all commands.\nGet the forced auditing global option: when enabled, the …\nGet audit logs from the HSM device.\nGet information about an object.\nGet an opaque object stored in the HSM.\nGet some number of bytes of pseudo random data generated …\nGet the public key for an asymmetric key stored on the …\nGet storage info (i.e. currently free storage) from the …\nGet a certificate template (i.e. for SSH CA) stored in the …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nHash-based Message Authentication Code (HMAC)\nGet <code>hmac::Algorithm</code>\nCreate a new HTTP connector\nGet a <code>Hyphenated</code> formatter.\nImport an encrypted object from the HSM using the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nGet the kind of error\nList objects visible from the current session.\nThe ‘max UUID’ (all ones).\nGet <code>rsa::mgf::Algorithm</code>\nCreate a new error context\nCreate a new error message\nCreate new <code>Credentials</code> (auth key ID + <code>authentication::Key</code>)\nThe ‘nil UUID’ (all zeros).\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nObjects within the <code>YubiHSM 2</code> (keys, certificates, or other …\nOpaque object support: store arbitrary data in the HSM\nGet <code>opaque::Algorithm</code>\nOpen a connection via a Connector to a YubiHSM, returning …\nYubico One Time Password (OTP) functionality\nGet <code>OtpAlg</code>\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nPing the HSM, ensuring we have a live connection and …\nPort <code>yubihsm-connector</code> process is listening on\nPut an existing asymmetric key into the HSM.\nPut an existing <code>authentication::Key</code> into the HSM.\nPut an existing HMAC key into the HSM.\nPut an opaque object (X.509 certificate or other …\nPut an existing OTP AEAD key into the HSM.\nPut a template object (i.e. for SSH CA) into the HSM.\nPut an existing wrap key into the HSM.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReset the HSM to a factory default state and reboot, …\nReset the HSM to a factory default state and reboot, …\nResponses to command sent from the HSM.\nRSA (Rivest–Shamir–Adleman) asymmetric cryptosystem …\nGet <code>rsa::Algorithm</code>\nSend a command message to the HSM, then read and return …\nSerial number of the YubiHSM to connect to\nAuthenticated/encrypted sessions with the HSM.\nGet current <code>Session</code> (either opening a new one or returning …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nConfigure the audit policy settings for a particular …\nPut the forced auditing global option: when enabled, the …\nSet the index of the last consumed index of the HSM audit …\nInitial YubiHSM 2 setup functionality using declarative …\nObtain an X.509 attestation certificate for a key within …\nCompute an ECDSA signature of the given digest (i.e. a …\nCompute an Ed25519 signature with the given key ID.\nCompute an HMAC tag of the given data with the given key …\nGet a <code>Simple</code> formatter.\nSecure Shell Certificate Authority Functionality\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCertificate templates.\nGet <code>template::Algorithm</code>\nTimeout for connecting, reading, and writing in …\nTimeout for USB operations (default 1s)\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nReturns a 128bit little-endian value containing the value.\nSerialize algorithm ID as a byte\nSerialize this object type as a byte\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDecrypt data which was encrypted (using AES-CCM) under a …\nGet a <code>Urn</code> formatter.\nCreate a new USB connector. For more advanced usage …\nVerify an HMAC tag of the given data with the given key ID.\n“Wrapping” support: YubiHSM 2 key/object encryption …\nGet <code>wrap::Algorithm</code>\nEncrypt data (with AES-CCM) using the given wrap key.\nCryptographic algorithm types supported by the <code>YubiHSM 2</code>\nAsymmetric algorithms\nYubiHSM 2 symmetric PSK authentication\nElliptic Curve Diffie-Hellman (i.e. key exchange) …\nECDSA algorithms\n<code>Algorithm</code>-related errors\nKinds of <code>Algorithm</code>-related errors\nHMAC algorithms\nRSA-PSS mask generating functions\nOpaque data types\nRSA algorithms (signing and encryption)\nInvalid algorithm tag\nSSH template algorithms\nObject wrap (i.e. HSM-to-HSM encryption) algorithms\nYubico OTP algorithms\nCreate an error context from this error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAsymmetric algorithms (RSA or ECC)\nbrainpool256r1\nbrainpool384r1\nbrainpool512r1\nsecp256k1\nNIST P-224 (secp224r1)\nNIST P-256 (secp256r1, prime256v1)\nNIST P-384 (secp384r1)\nP-521 (secp521r1)\nEd25519\nResponse from <code>command::get_public_key</code>\n2048-bit RSA\n3072-bit RSA\n4096-bit RSA\nAlgorithm of the public key\nGet slice of the inner byte vector\nThe public key in raw bytes. Keys have the following …\nReturn the ECDSA public key of the given curve type if …\nReturn the Ed25519 public key if applicable\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an unsigned byte tag into an <code>Algorithm</code> (if valid)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap inner byte vector\nReturn the size of the given key (as expected by the …\nGet length of the key\nSerialize algorithm ID as a byte\nPreferred <code>Digest</code> algorithm to use when computing this …\nSign the given prehashed message <code>Digest</code> using <code>Self</code>.\nDerive the <code>DigestSigner</code> trait for a type which impls …\nVerify the provided signature for the given prehashed …\nDerive the <code>DigestVerifier</code> trait for a type which impls …\nContains the error value\nSignature errors.\nSigning keypair with an associated verifying key.\nSigning keypair with an associated verifying key.\nContains the success value\nMarker trait for <code>Signature</code> types computable as …\nCombination of <code>DigestSigner</code> and <code>RandomizedSigner</code> with …\nSign the given message using the provided external …\nByte representation of a signature.\nResult type.\nSupport for decoding/encoding signatures as bytes.\nSign the provided message bytestring using <code>Self</code> (e.g. a …\nDerive the <code>Signer</code> trait for a type which impls <code>DigestSigner</code>…\nSign the provided message bytestring using <code>&amp;mut Self</code> (e.g. …\nVerify the provided message bytestring using <code>Self</code> (e.g. a …\nDerive the <code>Verifier</code> trait for a type which impls …\nVerifying key type for this keypair.\nVerifying key type for this keypair.\nGet the length of this signature when encoded.\nHazardous Materials: low-level APIs which can be insecure …\nSign the given message and return a digital signature\nSign the given message, update the state, and return a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given message and return a digital signature\nEncode signature as its byte representation.\nEncode signature as a byte vector.\nAttempt to sign the given message, returning a digital …\nAttempt to sign the given message, updating the state, and …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given message, returning a digital …\nUse <code>Self</code> to verify that the provided signature for a given …\nVerify the signature against the given <code>Digest</code> output.\nGet the verifying key which can verify signatures produced …\nFixed size output value which provides a safe <code>Eq</code> …\nConvenience wrapper trait covering functionality of …\nModification of the <code>Digest</code> trait suitable for trait …\nTrait for hash functions with extendable-output (XOF).\nTrait for hash functions with extendable-output (XOF) able …\nTrait for hash functions with fixed-size output.\nTrait for hash functions with fixed-size output able to …\nMarker trait for cryptographic hash functions.\nTypes which can be initialized from another type (usually …\nBuffer length is not equal to hash output size.\nThe error type returned when key and/or IV used in the …\nThe error type used in variable hash traits.\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nMaximum size of output hash.\nConvenience wrapper trait covering functionality of …\nError type for when the <code>Output</code> of a <code>Mac</code> is not equal to …\nMarker trait for Message Authentication algorithms.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nReader\nResettable types.\nTypes which consume data with byte granularity.\nTrait for hash functions with variable-size output.\nTrait for hash functions with variable-size output able to …\nTrait for reader types which are used to extract …\nClone hasher state into a boxed trait object\nDigest input data in a chained manner.\nProcess input data in a chained manner.\nProcess input data in a chained manner.\nLow-level traits operating on blocks and wrappers around …\nCompute hash of <code>data</code>.\nCompute hash of <code>data</code> and write it to <code>output</code>.\nCompute hash of <code>data</code> and write it into <code>output</code>.\nRetrieve result and consume hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and consume boxed hasher instance\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and consume hasher.\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and reset the hasher …\nRetrieve result and consume the hasher instance.\nRetrieve result and reset the hasher state.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and consume the hasher …\nConsume value and write result into provided array.\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and reset hasher instance\nWrite result into the output buffer.\nWrite result into the output buffer and reset the hasher …\nRetrieve XOF reader and consume hasher instance.\nFinalize XOF and write result into <code>out</code>.\nRetrieve XOF reader and reset hasher instance state.\nFinalize XOF, write result into <code>out</code>, and reset the hasher …\nImplement dummy type with hidden docs which is used to “…\nInitialize value from the <code>inner</code>.\nCreate new value from fixed size key.\nCreate new hasher instance.\nCreate new value from fixed size key.\nCreate new hasher instance with the given output size.\nCreate new value from variable size key.\nCreate new value from variable size key.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nGet output size of the hasher\nGet output size of the hasher instance provided to the <code>new</code> …\nReturn output size in bytes.\nRead output into the <code>buffer</code>. Can be called an unlimited …\nRead output into a boxed slice of the specified size.\nReset state to its initial value.\nReset hasher instance to its initial state.\nReset hasher instance to its initial state.\nReset MAC instance to its initial state.\nProcess data, updating the internal state.\nDigest input data.\nUpdate state using the provided data.\nUpdate state using the provided data.\nCheck if tag/code value is correct for the processed input.\nCheck if tag/code value is correct for the processed input …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using left side bytes …\nCheck truncated tag correctness using right side bytes …\nBlock on which <code>BlockBuffer</code> operates.\nBuffer for block processing of data.\nTrait for buffer kinds.\nEager block buffer kind, which guarantees that buffer …\nEager block buffer.\nBlock buffer error.\nLazy block buffer kind, which guarantees that buffer …\nLazy block buffer.\nTrait making <code>GenericArray</code> work, marking types to be used …\nAssociated type representing the array type for the number\nStruct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> …\nAn iterator that moves out of a <code>GenericArray</code>\nImplementation for <code>arr!</code> macro.\nMacro allowing for easy generation of Generic Arrays. …\nFunctional programming with generic sequences\n<code>GenericArray</code> iterator implementation.\nUseful traits for manipulating sequences of data stored in …\nHelper trait for <code>arr!</code> macro\nHelper type for <code>arr!</code> macro\nResulting length\nDefines functional programming methods for generic …\nMapped sequence type\nDefines the relationship between one generic sequence and …\nAccessor type for a mapped generic sequence\nFolds (or reduces) a sequence of data into a single value.\nMaps a <code>GenericSequence</code> to another <code>GenericSequence</code>.\nCombines two <code>GenericSequence</code> instances and iterates …\nAn iterator that moves out of a <code>GenericArray</code>\nDefines <code>GenericSequence</code>s which can be joined together, …\nFirst part of the resulting split array\nDefines some sequence with an associated length and …\n<code>GenericArray</code> associated length\nDefines any <code>GenericSequence</code> which can be lengthened or …\n<code>GenericSequence</code> that has one more element than <code>Self</code>\nResulting sequence formed by the concatenation.\nSequence to be concatenated with <code>self</code>\nSecond part of the resulting split array\nConcrete sequence type used in conjuction with reference …\nAccessor for <code>GenericSequence</code> item type, which is really …\nDefines a <code>GenericSequence</code> which can be shortened by …\n<code>GenericSequence</code> that has one less element than <code>Self</code>\nDefines a <code>GenericSequence</code> that can be split into two parts …\nReturns a new array with the given element appended to the …\nConcatenate, or join, two sequences.\nInitializes a new sequence instance using the given …\nReturns a new array without the last element, and the last …\nReturns a new array without the first element, and the …\nReturns a new array with the given element prepended to …\nSplits an array at the given index, returning the separate …\nThe terminating type for type arrays.\nA <strong>type operator</strong> that returns the absolute value.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Pow</code>: …\nA <strong>type operator</strong> that computes the greatest common divisor …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nThe concrete value for the type. Can be used in <code>const</code> …\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nAlias for the associated type of <code>Len</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Logarithm2</code>: …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Max</code>: …\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nType-level signed integers with negative sign.\nAlias for the associated type of <code>Neg</code>: …\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nType-level signed integers with positive sign.\nDivision as a partial function. This <strong>type operator</strong> …\nAlias for the associated type of <code>PartialDiv</code>: …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\n<code>TArr</code> is a type that acts as an array of types. It is …\nA <strong>type operator</strong> for taking a concrete integer value from a …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nAlias for the associated type of <code>BitXor</code>: …\nThe type-level signed integer 0.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nA type-level array of type-level numbers.\nAsserts that a type is <code>True</code>, aka <code>B1</code>.\nAsserts that two types are the same.\nType-level bits.\nA convenience macro for comparing type numbers. Use <code>op!</code> …\nType aliases for many constants.\nType-level signed integers.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nAll of the <strong>marker traits</strong> used in typenum.\nMethod returning the maximum\nMethod returning the minimum\nInstantiates a singleton representing this bit.\nConvenient type operations.\nAliases for the type operators used in this crate. Their …\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nCreate a new type-level array. Only usable on Rust 1.13.0 …\nMethod returning the concrete value for the type.\nUseful <strong>type operators</strong> that are not defined in <code>core::ops</code>.\nType-level unsigned integers.\nThe terminating type for type arrays.\n<code>TArr</code> is a type that acts as an array of types. It is …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nInstantiates a singleton representing this bit.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time signed integers.\nType-level signed integers with negative sign.\nType-level signed integers with positive sign.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time bits.\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nInstantiates a singleton representing this bit.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nAlias for the associated type of <code>Pow</code>: …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nAlias for the associated type of <code>Len</code>: …\nAlias for the associated type of <code>Logarithm2</code>: …\nAlias for the associated type of <code>Max</code>: …\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nAlias for the associated type of <code>Neg</code>: …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nAlias for the associated type of <code>PartialDiv</code>: …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\nAlias for the associated type of <code>BitXor</code>: …\nA <strong>type operator</strong> that returns the absolute value.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nA <strong>type operator</strong> that computes the greatest common divisor …\nThe concrete value for the type. Can be used in <code>const</code> …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nDivision as a partial function. This <strong>type operator</strong> …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nA <strong>type operator</strong> for taking a concrete integer value from a …\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nMethod returning the maximum\nMethod returning the minimum\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nMethod returning the concrete value for the type.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nA <strong>type operator</strong> that, when implemented for unsigned …\nAlias for the result of calling <code>SetBit</code>: …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nType alias used to represent an “arc” (i.e. integer …\nArc exceeds allowed range (i.e. for first or second OID)\nArc is too big (exceeds 32-bit limits of this library).\n<code>Iterator</code> over <code>Arc</code> values (a.k.a. nodes) in an …\nA trait which associates an OID with a type.\nBase 128 encoding error (used in BER/DER serialization of …\nExpected a digit, but was provided something else.\nA trait which associates a dynamic, <code>&amp;self</code>-dependent OID …\nInput data is empty.\nContains the error value\nOID errors.\nOID length is invalid (too short or too long).\nMinimum 3 arcs required.\nThe OID associated with this type.\nObject identifier (OID).\nContains the success value\nResult type\nTrailing <code>.</code> character at end of input.\nGet the OID associated with this value.\nWhat was found instead of a digit\nArc value that is erroneous.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nBuffer type used by type which implements <code>BufferKindUser</code>.\nBlock buffer kind over which type operates.\nTypes which use <code>BlockBuffer</code> functionality.\nType wrapped by <code>CoreWrapper</code>.\nA proxy trait to a core type implemented by <code>CoreWrapper</code>\nWrapper around <code>BufferKindUser</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nCore trait for hash functions with extendable (XOF) output …\nCore trait for hash functions with fixed output size.\nTruncate left side, i.e. <code>&amp;out[..n]</code>.\nSize of the output in bytes.\nTypes which return data with the given size.\nXOF reader core state.\nResettable types.\nTruncate right side, i.e. <code>&amp;out[m..]</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nSide which should be used in a truncated result.\nType which used for defining truncation side in the …\nTypes which consume data in blocks.\nCore trait for hash functions with variable output size.\nCore reader trait for extendable-output function (XOF) …\nWrapper around <code>XofReaderCore</code> implementations.\nReturn block size in bytes.\nFinalize state using remaining data stored in the provided …\nFinalize hasher and write full hashing result into the <code>out</code> …\nRetrieve XOF reader using remaining data stored in the …\nInitialize hasher state for given output size.\nReturn output size in bytes.\nRead next XOF block.\nReset state to its initial value.\nUpdate state using the provided data blocks.\nWrite algorithm name into <code>f</code>.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nInner type.\nTypes which can be initialized from another type (usually …\nTypes which can be initialized from another type and …\nTypes which use another type for initialization.\nThe error type returned when key and/or IV used in the …\nInitialization vector (nonce) used by <code>IvSizeUser</code> …\nInitialization vector size in bytes.\nTypes which use initialization vector (nonce) for …\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nTypes which can be initialized from key and initialization …\nKey size in bytes.\nTypes which use key for initialization.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nParallel blocks on which <code>ParBlocksSizeUser</code> implementors …\nNumber of blocks which can be processed in parallel.\nTypes which can process blocks in parallel.\nResettable types.\nReturn block size in bytes.\nInitialize value from the <code>inner</code>.\nInitialize value using <code>inner</code> and <code>iv</code> array.\nInitialize value using <code>inner</code> and <code>iv</code> slice.\nReturn IV size in bytes.\nReturn key size in bytes.\nCreate new value from fixed size key.\nCreate new value from fixed length key and nonce.\nCreate new value from variable size key.\nCreate new value from variable length key and nonce.\nReturn output size in bytes.\nReset state to its initial value.\nWrite algorithm name into <code>f</code>.\nSign the provided message prehash, returning a digital …\nVerify the provided message prehash using <code>Self</code> (e.g. a …\nSign the provided message prehash using the provided …\nAttempt to sign the given message digest, returning a …\nAttempt to sign the given message digest, returning a …\nUse <code>Self</code> to verify that the provided signature for a given …\nA marker trait used to indicate that an <code>RngCore</code> or …\nAn extension trait that is automatically implemented for …\nError type of random number generators\nA random number generator that retrieves randomness from …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nUpcast to an <code>RngCore</code> trait object.\nThe <code>BlockRngCore</code> trait and implementation helpers\nFill <code>dest</code> with random data.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nHelper functions for implementing <code>RngCore</code> functions.\nLittle-Endian utilities\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nCreate a new PRNG using a <code>u64</code> seed.\nFill <code>dest</code> entirely with random data.\nA wrapper type implementing <code>RngCore</code> for some type …\nA wrapper type implementing <code>RngCore</code> for some type …\nA trait for RNGs which do not generate random numbers …\nResults element type, e.g. <code>u32</code>.\nResults type. This is the ‘block’ an RNG implementing …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nGenerate a new block of results.\nImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nAttestation certificates (DER encoded X.509)\nGet slice of the inner byte vector\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnwrap inner byte vector\nGet length of the certificate\nAudit settings for a particular command\nAuditing policy options\nAudit-related errors\nKinds of audit-related errors\nAudit logging permanently enabled; not possible to turn off\nAudit logging disabled\nAudit logging enabled\nInvalid option\nInvalid tag\nGet the audit option\nGet the command type\nCreate an error context from this error\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValid algorithms for auth keys\nCredentials used to establish a session with the HSM\nDefault auth key ID slot\nAuthentication errors\nKinds of authentication errors\n<code>YubiHSM 2</code> authentication keys (2 * AES-128 symmetric PSK) …\nKey size is invalid\nYubiHSM AES PSK authentication\nBorrow the secret authentication keys\nAuth key to authenticate with\nKey ID to authenticate with\nPut an existing auth key into the <code>YubiHSM 2</code>\nCreate an error context from this error\nDerive an auth key from a password (using PBKDF2 + static …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>authentication::Key</code> from a 32-byte slice, …\nConvert an unsigned byte tag into an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>YubiHSM 2</code> authentication keys (2 * AES-128 symmetric PSK) …\nReturn the size of the given key (as expected by the …\nCreate a new Key from the given byte array\nGenerate a random <code>Key</code> using <code>OsRng</code>.\nSerialize algorithm ID as a byte\nPassword from which the default auth key is derived\n<code>YubiHSM 2</code> authentication keys (2 * AES-128 symmetric PSK) …\nNumber of PBKDF2 iterations to perform when deriving auth …\nSalt value to use with PBKDF2 when deriving auth keys from …\nAuth keys are 2 * AES-128 keys\nObject attributes specifying which operations are allowed …\nCouldn’t authenticate session\nYubiHSM client: main API in this crate for accessing …\nSession is closed\nErrors with the connection to the HSM\nCouldn’t create session\nErrors originating in the HSM device\nClient errors\nClient error kinds\nProtocol error occurred\nError response from HSM we can’t further specify\nCreate an error context from this error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCommand IDs for <code>YubiHSM 2</code> operations\nInvalid code\nCommand-related errors\nKinds of command-related errors\nMaximum size of a message sent to/from the YubiHSM\nCreate an error context from this error\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an unsigned byte into a <code>command::Code</code> (if valid)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize a command as a byte\nAccess denied\nAddress provided was not valid\nConnections to the HSM\nCouldn’t connect to the YubiHSM 2\nAbstract interface to multiple types of YubiHSM 2 …\nYubiHSM 2 is busy (in use by another client / process)\n<code>yubihsm-connector</code> related errors\n<code>yubihsm-connector</code> related error kinds\nConfiguration options for the HTTP (i.e. <code>yubihsm-connector</code>…\nInput/output error\nError making request\n<code>yubihsm-connector</code> sent bad response\nConfiguration for connecting to the YubiHSM via USB\nUSB operation failed\nAddress of <code>yubihsm-connector</code> (IP address or DNS name)\nCreate an error context from this error\nReturns the argument unchanged.\nConnection for <code>yubihsm-connector</code> which communicates using …\nCalls <code>U::from(self)</code>.\nPort <code>yubihsm-connector</code> process is listening on\nSend a command message to the HSM, then read and return …\nSerial number of the YubiHSM to connect to\nTimeout for connecting, reading, and writing in …\nTimeout for USB operations (default 1s)\nSupport for connecting to the YubiHSM 2 via USB.\nConfiguration options for the HTTP (i.e. <code>yubihsm-connector</code>…\nAddress of <code>yubihsm-connector</code> (IP address or DNS name)\nPort <code>yubihsm-connector</code> process is listening on\nTimeout for connecting, reading, and writing in …\nA USB device we’ve identified as a YubiHSM 2\nA collection of detected YubiHSM 2 devices, represented as …\nConfiguration for connecting to the YubiHSM via USB\nConnection to HSM via USB\nConnect to the HSM via USB.\nTimeouts when performing USB operations\nUSB vendor ID for Yubico\nYubiHSM 2 bulk in endpoint\nYubiHSM 2 bulk out endpoint\nYubiHSM 2 USB interface number\nUSB product ID for the YubiHSM 2\nGet the address for this device\nBorrow the detected devices as a slice\nGet the bus number for this device\nCreate a new <code>UsbConnector</code> with the given configuration\nDetect connected YubiHSM 2s, returning a collection of them\nBorrow the <code>Device</code> for this connection\nGet the duration value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new timeout from the given number of milliseconds\nCreate a new timeout from the given number of secs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDid we fail to find any YubiHSM 2 devices?\nIterate over the detected YubiHSM 2s\nNumber of detected devices\nCreate a new timeout from the given duration\nConnect to a YubiHSM 2 using the given configuration\nOpen a YubiHSM 2, either selecting one with a particular …\nOpen this device, consuming it and creating a <code>UsbConnection</code>\nProduct vendor and name\nSend a command to the YubiHSM and read its response\nSerial number of the YubiHSM to connect to\nSerial number of the YubiHSM 2 device\nReturn the serial numbers of all connected YubiHSM 2s\nTimeout for USB operations (default 1s)\nAuthentication failure\nCommand unexecuted\nDemo mode(?)\nErrors which originate in the HSM\nKinds of errors which originate in the HSM\nGeneric error\nInformation about an HSM device\nInsufficient permissions\nInvalid command\nInvalid data\nInvalid ID\nInvalid OTP\nInvalid session\nAudit log full\nObject already exists\nObject not found\nYubiHSM serial numbers\nSession failed\nSessions full (HSM has a max of 16)\nSSH CA constraint violation\nStorage failed\nResponse from the Get Storage Info command.\nUnknown HSM error codes\nWrong length\nSupported algorithms\nDevice build version (i.e. patchlevel)\nCreate an error context from this error\nStorage pages which are currently free\nStorage records which are currently free\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>Error</code> from the given <code>response::Code</code> (if …\nCreate a <code>device::ErrorKind</code> from the given byte tag\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSize of the log store (in lines/entries)\nNumber of log lines used\nDevice major version\nDevice minor version\nPage size in bytes\nDevice serial number\nSerialize this <code>device::ErrorKind</code> as a byte tag\nTotal number of storage pages\nTotal number of storage records\nUnknown error code\nAll domains as an array of bitflag types\nLogical partition within the <code>YubiHSM 2</code>, allowing several …\nInvalid domain\nAudit-related errors\nKinds of audit-related errors\nCreate an error context from this error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKey exchange algorithms (a.k.a. Diffie-Hellman)\nElliptic Curve Diffie-Hellman (Weierstrass)\nECDH Public Keys (i.e. uncompressed public points)\nBorrow this SSH certificate as a byte slice\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>PublicKey</code> from an uncompressed public point.\nConvert an unsigned byte tag into a <code>kex::Algorithm</code> (if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize algorithm ID as a byte\nValid algorithms for asymmetric keys\nNIST P-256 elliptic curve.\nNIST P-384 elliptic curve.\nsecp256k1 (K-256) elliptic curve.\n<code>ecdsa-sha1</code>\n<code>ecdsa-sha256</code>\n<code>ecdsa-sha384</code>\n<code>ecdsa-sha512</code>\nECDSA signature (fixed-size). Generic over elliptic curve …\nECDSA signature provider for yubihsm-client\nECDSA algorithms (i.e. hash functions)\nCreate a new YubiHSM-backed ECDSA signer\nSupport for ASN.1 DER-encoded ECDSA signatures as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a signature from fixed-width bytes, i.e. 2 * the …\nParse a signature from ASN.1 DER.\nCreate a <code>Signature</code> from the serialized <code>r</code> and <code>s</code> scalar …\nParse a signature from a byte slice.\nConvert an unsigned byte tag into an <code>ecdsa::Algorithm</code> (if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNIST P-256 elliptic curve (a.k.a. prime256v1, secp256r1)\nNIST P-384 elliptic curve.\nNormalize signature into “low S” form as described in …\nGet the public key for the YubiHSM-backed private key.\nGet the <code>r</code> component of this signature\nGet the <code>s</code> component of this signature\nSupport for SEC1 elliptic curve encoding formats.\nsecp256k1 elliptic curve\nCompute a fixed-size secp256k1 ECDSA signature of a digest …\nCompute a fixed-size P-384 ECDSA signature of a digest …\nCompute a fixed-size P-256 ECDSA signature of a digest …\nSplit the signature into its <code>r</code> and <code>s</code> components, …\nSplit the signature into its <code>r</code> and <code>s</code> scalars.\nSerialize this signature as bytes.\nSerialize this signature as ASN.1 DER.\nSerialize algorithm ID as a byte\nConvert this signature into a byte vector.\nCompute a fixed-size secp256k1 ECDSA signature of the …\nCompute a fixed-sized P-384 ECDSA signature of the given …\nCompute a fixed-sized P-256 ECDSA signature of the given …\nCompute a fixed-size secp256k1 ECDSA signature of the …\nValid algorithms for asymmetric keys\nMappings from ECDSA curves to their corresponding …\n<code>ecdsa-sha1</code>\n<code>ecdsa-sha256</code>\n<code>ecdsa-sha384</code>\n<code>ecdsa-sha512</code>\nYubiHSM asymmetric algorithm for this elliptic curve\nMaximum overhead of an ASN.1 DER-encoded ECDSA signature …\nMaximum size of an ASN.1 DER encoded signature for the …\nASN.1 DER-encoded signature as specified in RFC5912 …\nBorrow this signature as a byte slice\nReturns the argument unchanged.\nParse signature from DER-encoded bytes.\nCalls <code>U::from(self)</code>.\nGet the length of the signature in bytes\nSerialize this signature as a boxed byte slice\nNIST P-256 elliptic curve.\nECDSA/P-256 signature (fixed-size)\nECDSA/P-256 signer\nNIST P-384 elliptic curve.\nECDSA/P-384 signature (fixed-size)\nECDSA/P-384 signer\nCompact curve point\nCompact point (<code>0x05</code>)\nCompressed curve point\nCompressed point with even y-coordinate (<code>0x02</code>)\nCompressed point with odd y-coordinate (<code>0x03</code>)\nEncoded elliptic curve point with point compression.\nSize of a compressed elliptic curve point.\nSize of a compressed point for the given elliptic curve …\nEnum representing the coordinates of either compressed or …\nEncoded elliptic curve point sized appropriately for a …\nTrait for deserializing a value from a SEC1 encoded curve …\nIdentity point (a.k.a. point at infinity)\nIdentity point (<code>0x00</code>)\nTrait for supported modulus sizes which precomputes the …\nTag byte used by the <code>Elliptic-Curve-Point-to-Octet-String</code> …\nTrait for serializing a value to a SEC1 encoded curve …\nTrait for serializing a value to a SEC1 encoded curve …\nUncompressed curve point\nUncompressed point (<code>0x04</code>)\nEncoded elliptic curve point <em>without</em> point compression.\nSize of an uncompressed elliptic curve point.\nSize of an uncompressed point for the given elliptic curve …\nSize of an untagged point for given elliptic curve, i.e. …\nValidate that the given <code>EncodedPoint</code> represents the …\nDeserialize the type this trait is impl’d on from an …\nSerialize this value as a SEC1 <code>EncodedPoint</code>, optionally …\nSerialize this value as a SEC1 <code>EncodedPoint</code>, optionally …\nValidate that the given <code>EncodedPoint</code> is a valid public key …\nx-coordinate\nx-coordinate\nx-coordinate\ny-coordinate\nIs the y-coordinate odd?\nECDSA/secp256k1 signature recovery id (ala Ethereum)\nsecp256k1 (K-256) elliptic curve.\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 signer\nSize of an encoded Ed25519 signature in bytes.\nEd25519 public keys\nEd25519 signature.\nEd25519 signature provider for yubihsm-client\nObtain public key as a byte array reference\nCreate a new YubiHSM-backed Ed25519 signer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an Ed25519 signature from a byte slice.\nCreate an Ed25519 public key from its serialized …\nParse an Ed25519 signature from its <code>R</code> and <code>s</code> components.\nParse an Ed25519 signature from a byte slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert public key into owned byte array\nCreate an Ed25519 public key from a 32-byte array\nGet the public key for the YubiHSM-backed Ed25519 private …\nBytes for the <code>R</code> component of a signature.\nBytes for the <code>s</code> component of a signature.\nReturn the inner byte array.\nBox containing a thread-safe + <code>&#39;static</code> error suitable for …\nError context: stores an error source (as a <code>BoxError</code>) and …\nError type\nError message type: provide additional context with a …\nValid algorithms for HMAC keys\n<code>hmac-sha1</code>\n<code>hmac-sha256</code>\n<code>hmac-sha384</code>\n<code>hmac-sha512</code>\nHMAC tags\nGet slice of the inner byte vector\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an unsigned byte tag into an <code>Algorithm</code> (if valid)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap inner byte vector\nRecommended key length (identical to output size)\nGet length of the tag\nReturn the size of the given key (as expected by the …\nCreate a new HMAC tag\nSerialize algorithm ID as a byte\nFilter objects by algorithm\nAsymmetric private keys\nAuthentication keys for establishing sessions\nFilter objects by capability\nFilter objects by domain\nBrief information about an object as included in …\n<code>Object</code>-related errors\nKinds of <code>Object</code>-related errors\nFilters to apply when listing objects\nObject was generated on the device\nObjects in the HSM are keyed by a tuple of their type an …\nHMAC secret key\nObject identifiers\nFilter by object ID\nObject was imported from the host\nInformation about an object\nNumber of bytes in a label on an object (fixed-size)\nLabels attached to objects\nFilter objects by label\nInvalid label\nRaw data\nInformation about how a key was originally generated\nInvalid object origin\nYubikey-AES OTP encryption/decryption key\nSequence identifiers: number of times an object with a …\nBinary template used to validate SSH certificate requests\nTypes of objects\nFilter by object type\nInvalid object type\nKey-wrapping key for exporting/importing keys\nObject was generated on a device, keywrapped, and …\nObject was imported from host, keywrapped, and reimported\nAlgorithm this object is intended to be used with\nCapabilities (bitfield)\nCreate an error context from this error\nDelegated Capabilities (bitfield)\nDomains from which object is accessible\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new label from a slice, returning an error if it…\nConvert an unsigned byte into a object::Origin (if valid)\nConvert an unsigned byte into a object::Type (if valid)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLabel of object\nLength of object in bytes\nCreate a new object handle\nObject identifier\nID of the object\nObject identifier\nObject type\nType of object\nObject type\nHow did this object originate? (generated, imported, etc)\nThe <code>YubiHSM 2</code> doesnt’ have a unified put object command, …\nSequence: number of times an object with this key ID and …\nSequence: number of times an object with this key ID and …\nTag value for TLV serialization for this filter\nSerialize this object origin as a byte\nSerialize this object type as a byte\nBorrow this label as a string ref\nParameters used when importing objects into the HSM\nObject algorithm\nCapabilities of the object\nDomains in which the key will be accessible\nReturns the argument unchanged.\nID of the object\nCalls <code>U::from(self)</code>.\nLabel for the object (40-bytes)\nCreate minimal <code>import::Params</code> using the given <code>object::Id</code> …\nValid algorithms for opaque data\nArbitrary opaque data\nX.509 certificates\nReturns the argument unchanged.\nConvert an unsigned byte tag into an <code>Algorithm</code> (if valid)\nCalls <code>U::from(self)</code>.\nSerialize algorithm ID as a byte\nYubico OTP using AES-128\nYubico OTP using AES-192\nYubico OTP using AES-256\nValid algorithms for Yubico OTP (AES-based one time …\nReturns the argument unchanged.\nConvert an unsigned byte tag into an <code>OtpAlgorithm</code> (if …\nCalls <code>U::from(self)</code>.\nReturn the size of the given key (as expected by the …\nSerialize algorithm ID as a byte\nBuffer is too small\nCodes associated with HSM responses\nInvalid code\nNetwork error\nConnector error\nCouldn’t find connector\nCryptogram mismatches\nAuthentication failure (HSM)\nCommand unexecuted\nDemo mode (HSM)\nInvalid permissions (HSM)\nInvalid command (HSM)\nInvalid data (HSM)\nInvalid ID (HSM)\nInvalid OTP (HSM)\nInvalid session (HSM)\nAudit log full (HSM)\nObject already exists\nObject not found (HSM)\nOK (HSM)\nSession failed (HSM)\nSessions full (HSM)\nConstraint on CA violated\nStorage failed (HSM)\nWrong length (HSM)\nResponse-related errors\nKinds of response-related errors\nGeneric error\nInitialization error\nInvalid parameters\nMAC mismatch\nHSM memory error (or generic error)\nSession auth error\nSuccessful response for the given command type\nWrong length\nCreate an error context from this error\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an unsigned byte into a Code (if valid)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this an error response?\nIs this a successful response?\nConvert a Code back into its original byte form\nRSA algorithms (signing and encryption)\nRSA encryption with Optimal Asymmetric Encryption Padding …\nRSA PKCS#1v1.5: legacy signature and encryption algorithms\nRSASSA-PSS: Probabilistic Signature Scheme\nReturns the argument unchanged.\nConvert an unsigned byte tag into an <code>Algorithm</code> (if valid)\nCalls <code>U::from(self)</code>.\nMask generating functions for use with RSASSA-PSS …\nRSA encryption with Optimal Asymmetric Encryption Padding …\nRSASSA-PKCS#1v1.5 commands\nRSASSA-PSS: Probabilistic Signature Scheme based on the …\nSerialize algorithm ID as a byte\nMask generating functions for RSASSA-PSS\n<code>mgf-sha1</code>\n<code>mgf-sha256</code>\n<code>mgf-sha384</code>\n<code>mgf-sha512</code>\nReturns the argument unchanged.\nConvert an unsigned byte tag into an <code>Algorithm</code> (if valid)\nCalls <code>U::from(self)</code>.\nSerialize algorithm ID as a byte\nRSA Optimal Asymmetric Encryption Padding (OAEP) algorithms\nRSA OAEP decrypted data\n<code>rsa-oaep-sha1</code>\n<code>rsa-oaep-sha256</code>\n<code>rsa-oaep-sha384</code>\n<code>rsa-oaep-sha512</code>\nGet slice of the inner byte vector\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an unsigned byte tag into an <code>Algorithm</code> (if valid)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap inner byte vector\nGet length of the signature\nSerialize algorithm ID as a byte\nRSA PKCS#1v1.5: legacy algorithms\n<code>rsa-pkcs1-sha1</code>\n<code>rsa-pkcs1-sha256</code>\n<code>rsa-pkcs1-sha384</code>\n<code>rsa-pkcs1-sha512</code>\nReturns the argument unchanged.\nConvert an unsigned byte tag into an <code>Algorithm</code> (if valid)\nCalls <code>U::from(self)</code>.\nSerialize algorithm ID as a byte\nRSASSA-PSS algorithms\n<code>rsa-pss-sha1</code>\n<code>rsa-pss-sha256</code>\n<code>rsa-pss-sha384</code>\n<code>rsa-pss-sha512</code>\nReturns the argument unchanged.\nConvert an unsigned byte tag into an <code>Algorithm</code> (if valid)\nCalls <code>U::from(self)</code>.\nSerialize algorithm ID as a byte\nCouldn’t authenticate session\nSession is closed\nMax command per session exceeded and a new session should …\nCouldn’t create session\nErrors originating in the HSM device\nSession errors\nSession error kinds\nMutex-guarded wrapper type containing a locked session\nSession/Channel IDs\nMessage was intended for a different session than the …\nProtocol error occurred\nError response from HSM we can’t further specify\nAuthenticated and encrypted (SCP03) <code>Session</code> with the HSM. …\nSession timeouts (i.e. YubiHSM’s session inactivity …\nMAC or cryptogram verify failed\nClose this session, consuming it in the process.\nCreate an error context from this error\nDefault timeout: 30 seconds\nHow long has this session been open?\nGet the duration value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new timeout from the given number of secs\nCreate a new session ID from a byte value\nSession ID value (1-16)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this <code>Session</code> still open?\nHas this session timed out?\nNumber of messages sent during this session\nCreate a new timeout from the given duration\nObtain the next session ID\nObtain session ID as a u8\nSetup-related errors\nKinds of setup-related errors\nInvalid label\nYubiHSM 2 provisioning profile: a declarative profile …\nYubiHSM provisioning report\nErrors involving setup report generation\nRoles represent accounts on the device with specific …\nError performing setup\nEnable mandatory consumption of the audit log. See:\nSet the label for this role’s authentication key\nSet the capabilities (i.e. permission) for this role\nCreate an error context from this error\nCreate this role within the YubiHSM 2 device\nDate the device was provisioned\nSet the delegated capabilities for this role\nSerial number of the HSM which was provisioned\nSet the domains this role is allowed to access\nErase and reset an HSM device, then reinitialize it with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a <code>yubihsm::setup::Report</code> from its JSON serialization\nHostname the device was provisioned on\nInitialize an HSM device with the given profile.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new empty profile\nMake a new <code>yubihsm::setup::Report</code> from the ambient …\nCreate a new role object\nUse this profile to provision the YubiHSM 2 with the given …\nYubiHSM 2 provisioning reports which record the server …\nSet the initial roles to provision\nConfigure the auth key ID to use when performing device …\nSoftware that performed the provisioning\nStore this report in the YubiHSM at the given object ID\nSerialize a report as JSON\nUsername of who provisioned the device\nUUID which uniquely identifies this provisioning report\nVersion of the report\nSet the wrap keys to initially provision\nLabel string for the provisioning report object\nYubiHSM provisioning report\nReport versions\nDate the device was provisioned\nSerial number of the HSM which was provisioned\nReturns the argument unchanged.\nHostname the device was provisioned on\nCalls <code>U::from(self)</code>.\nSoftware that performed the provisioning\nUsername of who provisioned the device\nUUID which uniquely identifies this provisioning report\nVersion of the report\nSSH certificate\nSSH certificate template\nBorrow this SSH certificate as a byte slice\nBorrow this SSH certificate template as a byte slice\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an SSH certificate from serialized bytes\nCreate an SSH certificate template from serialized bytes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTemplate algorithms (for SSH)\n<code>template-ssh</code>\nSSH CA certificate templates\nTemplate types\nGet the template algorithm for this template type\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an unsigned byte tag into a <code>template::Algorithm</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an SSH template, if this template is one\nSerialize algorithm ID as a byte\nAES-128 in Counter with CBC-MAC (CCM) mode\nAES-192 in Counter with CBC-MAC (CCM) mode\nAES-256 in Counter with CBC-MAC (CCM) mode\nValid algorithms for “wrap” (symmetric encryption/key …\nWrap-related errors\nKinds of wrap-related errors\nWrap key to import into the device\nWrap message is an invalid length\nWrap wessage (encrypted HSM object or arbitrary data) …\nNonces for AES-CCM keywrapping\nSet the capabilities of this key (what it can be used for)\nCiphertext of the encrypted object\nCreate an error context from this error\nCreate this key within the HSM\nSet the delegated capabilities of this key (what …\nSet the domains this wrap key can be used in (default: all)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>wrap::Key</code> instance. Must be 16, 24, or …\nConvert an unsigned byte tag into a <code>wrap::Algorithm</code> (if …\nLoad a <code>Message</code> from a byte vector\nGenerate a random wrap key with the given key size.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this message into a byte vector\nReturn the size of the given key (as expected by the …\nSet the object label on this key\nCreate a new <code>Message</code>\nNonce used to encrypt the wrapped data\nSerialize algorithm ID as a byte\nWhether the event is anonymous.\nThe ABI representation of this type.\nArray out of bounds access.\nUsed by the <code>assert()</code> builtin.\nTrailing bytes in deserialization buffer.\nThe number of variants in the enum.\nThe number of topics.\nThe number of variants.\nThe number of variants.\nA generic contract error.\nA contract’s custom error.\nA contract’s custom error.\nWhether the ABI-encoded size is dynamic.\nThe <code>TokenSeq</code> type corresponding to the tuple.\nThe underlying tuple type which represents this event’s …\nDivision or modulo by zero.\nThe statically-known ABI-encoded size of the type.\nEIP-712 domain attributes used in determining the domain …\nEmpty array pop.\nEnum conversion error.\nContains the error value\nABI Encoding and Decoding errors.\nA Solidity event topic.\nHex error.\nGeneric / unspecified error.\nA generic contract error.\nRepresents the reason for a revert in a generic contract …\nInvalid enum value.\nCalling invalid internal function.\nCould not decode an event from log topics.\nExtension trait for ABI representation.\nThe minimum length of the data for this type.\nThe name of this type.\nThe name of this type.\nThe struct name.\nThe name of the struct.\nContains the success value\nOther errors.\nOverran deserialization buffer.\nA Solidity panic.\nA panic. See <code>Panic</code> for more information.\nA panic. See <code>Panic</code> for more information.\nRepresents a Solidity panic. Same as the Solidity …\nThe underlying tuple type which represents the error’s …\nThe underlying tuple type which represents this type’s …\nThe underlying tuple type which represents this type’s …\nABI Decoding recursion limit exceeded.\nValidation reserialization did not match input.\nAllocation failed.\nResource error (too large allocation or too large array).\nABI result type.\nThe function’s return struct.\nThe returns’ corresponding TokenSeq type.\nThe underlying tuple type which represents this type’s …\nRepresents a standard Solidity revert. These are thrown by …\nA generic revert. See <code>Revert</code> for more information.\nA generic revert. See <code>Revert</code> for more information.\nThe corresponding Rust type.\nThe error selector: <code>keccak256(SIGNATURE)[0..4]</code>\nThe function selector: <code>keccak256(SIGNATURE)[0..4]</code>\nThe error’s ABI signature.\nThe event’s ABI signature.\nThe function’s ABI signature.\nThe event’s ABI signature hash, or selector: …\nThe name of this type in Solidity.\nIterator over the function or error selectors of a …\nA Solidity function call.\nA Solidity constructor.\nA Solidity enum. This is always a wrapper around a <code>u8</code>.\nA Solidity custom error.\nSolidity event.\nA collection of <code>SolEvent</code>s.\nA collection of ABI-encodable call-like types. This …\nA Solidity struct.\nA Solidity type.\nThe Solidity type that this type corresponds to.\nA Solidity value.\nInvalid encoding in storage.\nThe corresponding <code>TokenSeq</code> type.\nThe arguments’ corresponding TokenSeq type.\nThe arguments’ corresponding TokenSeq type.\nThe corresponding ABI token type.\nA list of Solidity event topics.\nThe underlying tuple type which represents this event’s …\nA typecheck detected a word that does not match the data …\nArithmetic underflow or overflow.\nUnknown selector.\nThe ABI word type.\nEthereum ABI codec implementation.\nReturns the ABI representation of this type.\nABI decode the enum from the given buffer.\nABI decode this error’s arguments from the given slice, …\nABI decode this call’s arguments from the given slice, …\nABI-decodes the given data into one of the variants of <code>self</code>…\nABI-decode this type from the given data.\nDecodes this type’s value from an ABI blob by …\nABI-decodes the dynamic data of this event from the given …\nABI-decode this type from the given data.\nDecodes this type’s value from an ABI blob by …\nABI-decodes the given data into one of the variants of <code>self</code>…\nABI decode this call’s arguments from the given slice, …\nABI decode this call’s arguments from the given slice, …\nABI decode this call’s return values from the given …\nABI-decode this type from the given data.\nDecodes this type’s value from an ABI blob by …\nABI encode the enum.\nABI encode the error to the given buffer <strong>with</strong> its selector.\nABI encode the call to the given buffer <strong>with</strong> its selector.\nABI encode the call to the given buffer.\nABI-encodes <code>self</code> into the given buffer.\nABI-encodes the value.\nTokenizes and ABI-encodes the given value by wrapping it …\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nEncodes an ABI sequence suitable for function parameters.\nTokenizes and ABI-encodes the given value as function …\nABI-encodes <code>self</code> into the given buffer, <em>without</em> any …\nABI encode the enum into the given buffer.\nABI encode the error to the given buffer <strong>without</strong> its …\nABI encode the call to the given buffer <strong>without</strong> its …\nABI encode the call’s return values.\nEncodes an ABI sequence.\nTokenizes and ABI-encodes the given value as a sequence.\nThe size of the encoded data, <em>without</em> any selectors.\nThe size of the error params when encoded in bytes, <strong>without</strong>…\nThe size of the ABI-encoded dynamic data in bytes.\nThe size of the encoded data in bytes, <strong>without</strong> its …\nThe size of the encoded data in bytes.\nCalculate the ABI-encoded size of the data.\nCalculate the ABI-encoded size of the data, counting both …\nReturns the number of bytes that will be used to encode …\nReturns an immutable reference to the inner custom error …\nReturns a mutable reference to the inner custom error if …\nReturns an immutable reference to the inner <code>Panic</code> if <code>self</code> …\nReturns a mutable reference to the inner <code>Panic</code> if <code>self</code> …\nReturns an immutable reference to the inner <code>Revert</code> if <code>self</code> …\nReturns a mutable reference to the inner <code>Revert</code> if <code>self</code> …\nReturns the panic code’s string representation.\nThe EIP-155 chain ID. The user-agent should refuse signing …\nThe Solidity panic code.\nInstantiates a new error with a static str.\nDecode the event from the given log object.\nDecode the events from the given log object.\nDecode the event from the given log object.\nDecode the events from the given log info.\nDecode the event from the given log info.\nDecodes and retrieves the reason for a revert from the …\nDecode the topics of this event from the given data.\nDetokenize the topics into a tuple of rust types.\nDetokenize this type’s value from the given token.\nDetokenize a value from the given token.\nReturns component EIP-712 types. These types are used to …\nEncode this data according to EIP-712 <code>encodeData</code> rules, …\nEncode this data according to EIP-712 <code>encodeData</code> rules, …\nConvenience macro to instantiate an EIP-712 domain.\nEncodes this domain using EIP-712 <code>encodeData</code>.\nThe EIP-712-encoded type string.\nHashes this struct according to EIP-712 <code>hashStruct</code>.\nReturn the root EIP-712 type. This type is used to …\nDoes something.\nCalculates the EIP-712 <code>typeHash</code> for this struct.\nABI-encode the dynamic data of this event.\nEncodes this domain using EIP-712 <code>encodeData</code>.\nABI-encode the dynamic data of this event into the given …\nEncodes this domain using EIP-712 <code>encodeData</code> into the …\nIndexed event parameter encoding.\nEncodes this type as preimage bytes which are then hashed …\nEncode the topics of this event.\nEncode the topics of this event into a fixed-size array.\nEncode the topics of this event into the given buffer.\nThe EIP-712-encoded type string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the panic code for the given number if it is a …\nHashes this domain according to EIP-712 <code>hashStruct</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> matches <code>CustomError</code>.\nReturns <code>true</code> if <code>self</code> matches <code>Panic</code>.\nReturns <code>true</code> if <code>self</code> matches <code>Revert</code>.\nReturns the PanicKind if this panic code is a known …\nThe user readable name of signing domain, i.e. the name of …\nConvert from the tuple type used for ABI encoding and …\nConvert decoded rust data to the event type.\nConvert from the tuple type used for ABI encoding and …\nConvert from the tuple type used for ABI encoding and …\nInstantiate a new EIP-712 domain.\nReturns the number of ABI words (32 bytes) that will be …\nReturns the revert reason string, or <code>&quot;&lt;empty&gt;&quot;</code> if empty.\nThe reason string, provided by the Solidity contract.\nA disambiguating salt for the protocol. This can be used …\nThe selector of this instance.\nThe selector of this type at the given index, used in …\nReturns an iterator over the selectors of this type.\nCalculate the domain separator for the domain object.\nGenerate types that implement <code>alloy-sol-types</code> traits, …\nSolidity types.\nThe name of the associated Solidity type.\nThe name of the associated Solidity type.\nReturns the name of this type in Solidity.\nConvert to the token type used for EIP-712 encoding and …\nTokenize the call’s arguments.\nTokenize the call’s arguments.\nTokenize the enum.\nTokenizes the given value into this type’s token.\nTokenizes the given value into this type’s token.\nTokenize the event’s non-indexed parameters.\nThe number of bytes this type occupies in another topic’…\nThe event’s topics.\nReturns an error if the given selector is not known to …\nReturns an error if the given token cannot be detokenized …\nInstantiates a new <code>Error::TypeCheckFail</code> with the provided …\nInstantiates a new <code>Error::TypeCheckFail</code> with the provided …\nInstantiates a new <code>Error::TypeCheckFail</code> with the provided …\nCalculates the EIP-712 <code>typeHash</code> for this domain.\nInstantiates a new <code>Error::UnknownSelector</code> with the …\nUtilities used by different modules.\nReturns <code>true</code> if the given selector is known to this type.\nReturns <code>true</code> if the given token can be detokenized with …\nThe address of the contract that will verify the signature.\nThe current major version of the signing domain. …\nHex-encoded data.\nThe Solidity type we failed to produce.\nThe invalid log.\nThe maximum valid value.\nThe name of the enum.\nThe name of the enum or event.\nThe type name.\nThe unknown selector.\nThe invalid value.\nTrue if the token represents a dynamically-sized type.\nThe <code>Decoder</code> wraps a byte slice with necessary info to …\nThe ABI encoding of an empty byte array (<code>bytes</code> or <code>string</code>).\nAn ABI encoder.\nTrue for tuples only.\nThe decoder recursion limit. This is currently hardcoded, …\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nShortcut for appending a token sequence.\nAppend a pointer to the current suffix offset.\nAppend a sequence of bytes as a packed sequence with a …\nAppend a sequence length.\nAppend a word to the encoder.\nBump the suffix offset by a given number of words.\nCreate a child decoder, starting at <code>offset</code> bytes from the …\nABI-decodes a token by wrapping it in a single-element …\nDecodes a single token from the underlying buffer.\nDecode a token from a decoder.\nABI-decodes top-level function args.\nDecodes ABI compliant vector of bytes into vector of …\nABI-decode the token sequence from the encoder.\nDecodes a sequence of tokens from the underlying buffer.\nABI-encodes a single token.\nABI-encodes a tuple as ABI function params, suitable for …\nABI-encodes a token sequence.\nABI-encode the token sequence into the encoder.\nFinish the encoding process, returning the encoded words.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAppend head words to the encoder.\nCalculate the number of head words.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinish the encoding process, returning the encoded bytes.\nReturns whether the remaining buffer is empty.\nInstantiate a new empty encoder.\nInstantiate a new decoder from a byte slice and a …\nReturns the current offset in the buffer.\nPeek into the buffer.\nPeek a slice of size <code>len</code> from the buffer without advancing …\nPeek a slice of size <code>len</code> from the buffer at a specific …\nPeek a <code>usize</code> from the buffer, without advancing the offset.\nPeek a <code>usize</code> from the buffer at a specific offset, without …\nPeek the next word from the buffer without advancing the …\nPeek a word from the buffer at a specific offset, without …\nRemoves the last offset and returns it.\nAppends a suffix offset.\nCreate a child decoder, starting at <code>offset</code> bytes from the …\nReturns the number of bytes in the remaining buffer.\nReturns a reference to the remaining bytes in the buffer.\nReturns the number of words in the remaining buffer.\nSets the current offset in the buffer.\nSet whether to validate type correctness.\nDetermine the current suffix offset.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nReturn a child decoder by consuming a word, interpreting …\nTakes a <code>usize</code> offset from the buffer by consuming a word.\nTakes the offset from the child decoder and sets it as the …\nTakes a slice of bytes of the given length by consuming up …\nTakes a slice of bytes of the given length.\nTake a word from the buffer, advancing the offset.\nEthereum ABI tokens.\nCalculate the total number of head and tail words.\nReturns <code>true</code> if this decoder is validating type …\nInstantiate a new encoder with a given capacity in words.\nTrue if the token represents a dynamically-sized type.\nA Dynamic Sequence - <code>T[]</code>\nA Fixed Sequence - <code>T[N]</code>\nTrue for tuples only.\nA Packed Sequence - <code>bytes</code> or <code>string</code>\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nA single EVM word - T for any value type.\nReturns a reference to the array.\nReturns a reference to the word as a slice.\nReturns a reference to the array as a slice.\nReturns a reference to the backing slice.\nReturns a reference to the slice.\nDecode a token from a decoder.\nABI-decode the token sequence from the encoder.\nABI-encode the token sequence into the encoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAppend head words to the encoder.\nCalculate the number of head words.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake the backing array, consuming the token.\nInstantiate a new <code>Bytes</code> by copying the underlying slice.\nInstantiate a new <code>Vec</code> by copying the underlying slice.\nCreate a new word token from a word.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nCalculate the total number of head and tail words.\nAddress - <code>address</code>\nArray - <code>T[]</code>\nThe number of bits in the integer: <code>BITS</code>\nThe number of bytes in the integer: <code>BITS / 8</code>\nBool - <code>bool</code>\nSpecifies the number of bytes in a <code>FixedBytes</code> array as a …\nBytes - <code>bytes</code>\nFixedArray - <code>T[M]</code>\nFixedBytes - <code>bytesX</code>\nFunction - <code>function</code>\nThe name of the <code>Int</code> type: <code>int&lt;N&gt;</code>\nInt - <code>intX</code>\nThe signed integer Rust representation.\nSpecifies the number of bits in an <code>Int</code> or <code>Uint</code> as a type.\nThe name of the <code>FixedBytes</code> type: <code>bytes&lt;N&gt;</code>\nThe difference between the representation’s and this …\nString - <code>string</code>\nStatically guarantees that a <code>FixedBytes</code> byte count is …\nStatically guarantees that a <code>Int</code> or <code>Uint</code> bit count is …\nThe name of the <code>Uint</code> type: <code>uint&lt;N&gt;</code>\nUint - <code>uintX</code>\nThe unsigned integer Rust representation.\nThe index of the most significant byte in the Word type.\nDetokenizes a signed integer.\nDetokenizes an unsigned integer.\nABI-encode a signed integer in packed mode.\nABI-encode an unsigned integer in packed mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTokenizes a signed integer.\nTokenizes an unsigned integer.\nSee <code>usize::next_multiple_of</code>.\nCalculates the padded length of a slice by rounding its …\nCalculates the padded length of a slice of a specific …\nBasic or bearer authentication in http or websocket …\nBackend connection task has stopped.\nHTTP Basic Auth\nBearer Auth\nType alias for a pin-boxed future, with a <code>Send</code> bound on …\nA boxed, Clone-able <code>Transport</code> trait object.\nConnection details for a transport that can be boxed.\nCustom error.\nJSON deserialization error.\nJSON deserialization error.\nContains the error value\nContains the error value\nServer returned an error response.\nServer returned an error response.\nReturned when a local pre-processing step fails. This …\nReturned when a local pre-processing step fails. This …\nMissing batch response.\nServer returned a null response when a non-null response …\nServer returned a null response when a non-null response …\nContains the success value\nContains the success value\nPin-boxed future.\nPubsub service is not available for the current provider.\nAn RPC error.\nFuture for RPC-level requests.\nThe result of a JSON-RPC request.\nJSON serialization error.\nJSON serialization error.\nA <code>Transport</code> manages the JSON-RPC request/response …\nTransport error.\nTransport error.\nThe transport type that is returned by <code>connect</code>.\nConnection details for a transport.\nA transport error is an <code>RpcError</code> containing a …\nTransport error.\nFuture for transport-level requests.\nA transport result is a <code>Result</code> containing a <code>TransportError</code>.\nRpc server returned an unsupported feature.\nRpc server returned an unsupported feature.\nReturns a reference to the inner transport.\nMake a boxed trait object by cloning this transport.\nFallible conversion to an error response.\nInstantiate a new basic auth from an authority string.\nInstantiate a new <code>TransportError::BackendGone</code>.\nInstantiate a new basic auth from a username and password.\nInstantiate a new bearer auth.\nConvert this transport into a boxed trait object.\nInstantiate a new <code>TransportError</code> from a custom error.\nInstantiate a new <code>TransportError</code> from a custom error.\nInstantiate a new <code>DeserError</code> from a <code>serde_json::Error</code> and …\nInstantiate a new <code>ErrorResp</code> from an error response.\nExtract the auth info from a URL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConnect to a transport, and box it.\nConnect to the transport, returning a <code>Transport</code> instance.\nMacro that return an <code>impl Future</code> type, with a <code>Send</code> bound …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the error is a deserialization error.\nCheck if the error is an error response.\nReturns <code>true</code> if the transport connects to a local resource.\nReturns <code>true</code> if the transport is a local transport.\nCheck if the error is a local usage error.\nCheck if the error is a null response.\nCheck if the error is a serialization error.\nCheck if the error is a transport error.\nCheck if the error is an unsupported feature error.\nInstantiate a new <code>LocalUsageError</code> from a custom error.\nInstantiate a new <code>LocalUsageError</code> from a custom error …\nInstantiate a new <code>TransportError</code> from a missing ID.\nInstantiate a new box transport from a suitable transport.\nInstantiate a new <code>TransportError::PubsubUnavailable</code>.\nReturns <code>true</code> if the error is potentially recoverable. This …\nInstantiate a new <code>SerError</code> from a <code>serde_json::Error</code>. This …\nMisc. utilities for building transports.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nAn Http transport.\nA <code>hyper</code> HTTP client.\nGet a reference to the client.\nReturns the argument unchanged.\nGuess whether the URL is local, based on the hostname.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Http</code> transport.\nSet the client.\nSet the URL.\nGet a reference to the URL.\nCreate a new <code>Http</code> transport with a custom client.\nAn IPC Connection object.\nMock IPC server.\nA stream of JSON-RPC items, read from an <code>AsyncRead</code> stream.\nAdd a raw reply to the server.\nAdd a reply to the server.\nAdd a json-rpc response to the server.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMock IPC server.\nCreate a new IPC connection object for any type T that can …\nCreate a new mock IPC server.\nGet the path to the socket.\nRun the server.\nMock IPC server.\nGuess whether the URL is local, based on the hostname.\nConvert to a <code>Box&lt;RawValue&gt;</code> from a <code>Serialize</code> type, mapping …\nAn ongoing connection to a backend.\nSimple connection details for a websocket connection.\nThe authorization header to use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a message from the server.\nHandle inbound text from the websocket.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new websocket connection configuration.\nSend a message to the server.\nSpawn a new backend task.\nThe URL to connect to.\nCreates a new websocket connection configuration with an …")