searchState.loadedDescShard("alloy_pubsub", 0, "alloy-pubsub\nA handle to a backend. Communicates to a …\nThe reciprocal of <code>ConnectionHandle</code>.\nThe expected item.\nSome other value.\nConfiguration objects that contain connection details for …\nA <code>PubSubFrontend</code> is <code>Transport</code> composed of a channel to a …\nA Subscription is a feed of notifications from the server, …\nA Subscription is a feed of notifications from the server …\nAn item in a typed <code>Subscription</code>. This is either the …\nThe number of items to buffer in new subscription …\nSpawn the backend, returning a handle to it.\nNotification from the backend of a terminal error.\nNotifies the frontend of a terminal error.\nInbound channel from frontend.\nInbound channel from remote server via WS.\nReturns <code>true</code> if the transport connects to a local resource.\nThe local ID of the subscription.\nThe channel via which notifications are received.\nNotify the backend of intentional shutdown.\nCauses local shutdown when sender is triggered or dropped.\nChannel of responses to the frontend\nOutbound channel to server.\nConfiguration objects that contain connection details for …\nSpawn the backend, returning a handle to it.\nConvert the configuration object into a service with a …\nConvert the configuration object into a service with a …\nReturns <code>true</code> if the transport connects to a local resource.\nAttempt to reconnect the transport.\nAttempt to reconnect the transport.\nA <code>PubSubFrontend</code> is <code>Transport</code> composed of a channel to a …\nGet the currently configured channel size. This is the …\nThe number of items to buffer in new subscription …\nReturns the argument unchanged.\nGet the subscription ID for a local ID.\nCalls <code>U::from(self)</code>.\nCreate a new frontend.\nSend a request.\nSend a packet of requests, by breaking it up into …\nSet the channel size. This is the number of items to …\nUnsubscribe from a subscription.\nA handle to a backend. Communicates to a …\nThe reciprocal of <code>ConnectionHandle</code>.\nClose the interface, sending an error to the frontend.\nNotification from the backend of a terminal error.\nNotifies the frontend of a terminal error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInbound channel from frontend.\nInbound channel from remote server via WS.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new connection handle.\nReceive a request from the frontend. Ensures that if the …\nSend a pubsub item to the frontend.\nShutdown the backend.\nNotify the backend of intentional shutdown.\nCauses local shutdown when sender is triggered or dropped.\nChannel of responses to the frontend\nOutbound channel to server.\nGet the subscription ID for a local ID.\nInstructions for the pubsub service.\nSend a request.\nUnsubscribe from a subscription.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn active subscription.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCached hash of the request, used for sorting and equality.\nCreate a new active subscription.\nNotify the subscription channel of a new value, if any …\nSerialize the request as a boxed <code>RawValue</code>.\nThe serialized subscription request.\nGet a subscription.\nThe channel via which notifications are broadcast.\nAn in-flight JSON-RPC request.\nThe number of items to buffer in the subscription channel.\nReturns the argument unchanged.\nFulfill the request with a response. This consumes the …\nCalls <code>U::from(self)</code>.\nCheck if the request is a subscription.\nCreate a new in-flight request.\nGet a reference to the serialized request.\nThe request\nThe channel to send the response on.\nManages in-flight requests.\nReturns the argument unchanged.\nHandle a response by sending the payload to the waiter.\nInsert a new in-flight request.\nCalls <code>U::from(self)</code>.\nGet an iterator over the in-flight requests.\nGet the number of in-flight requests.\nChange the server_id of a subscription.\nDrop all server_ids.\nReturns the argument unchanged.\nGet a receiver for a subscription.\nInsert a subscription.\nCalls <code>U::from(self)</code>.\nGet an iterator over the subscriptions.\nGet the number of subscriptions.\nDe-alias an alias, getting the original ID.\nTracks the CURRENT server id for a subscription.\nThe subscriptions.\nNotify the subscription channel of a new value, if the sub …\nRemove a subscription by its local_id.\nInsert or update the server_id for a subscription.\nThe service contains the backend handle, a subscription …\nCreate a new service from a connector.\nThe configuration details required to reconnect.\nDispatch a request to the socket.\nReturns the argument unchanged.\nReconnect by dropping the backend and creating a new one.\nThe backend handle.\nHandle an item from the backend.\nRewrite the subscription id and insert into the …\nThe request manager.\nCalls <code>U::from(self)</code>.\nReconnect the backend, re-issue pending requests, and …\nThe inbound requests.\nService a GetSub instruction.\nService an instruction\nService a request.\nService an unsubscribe instruction.\nSpawn the service.\nThe subscription manager.\nThe expected item.\nSome other value.\nA Subscription is a feed of notifications from the server, …\nA stream of notifications from the server, identified by a …\nA stream of notifications from the server, identified by a …\nA Subscription is a feed of notifications from the server …\nAn item in a typed <code>Subscription</code>. This is either the …\nA stream of notifications from the server, identified by a …\nWrapper for <code>blocking_recv</code>. Block the current thread until …\nWrapper for <code>blocking_recv</code>. Block the current thread until …\nWrapper for <code>blocking_recv</code>, may produce unexpected values. …\nWrapper for <code>blocking_recv</code>. Block the current thread until …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the local ID of the subscription.\nGet the local ID of the subscription.\nGet the local ID of the subscription.\nGet a reference to the inner subscription.\nGet a mutable reference to the inner subscription.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the subscription into a stream that may yield …\nConvert the subscription into its inner <code>RawSubscription</code>.\nConvert the subscription into a stream that returns …\nConvert the subscription into a stream.\nConvert the subscription into a stream.\nReturns <code>true</code> if the broadcast channel is empty (i.e. there …\nReturns <code>true</code> if the broadcast channel is empty (i.e. there …\nReturns the number of messages in the broadcast channel …\nReturns the number of messages in the broadcast channel …\nGet the local ID of the subscription.\nGet the local ID of the subscription.\nThe local ID of the subscription.\nWrapper for <code>recv</code>. Await an item from the channel.\nWrapper for <code>recv</code>. Await an item of the expected type from …\nWrapper for <code>recv</code>, may produce unexpected values. Await an …\nWrapper for <code>recv</code>. Await an item from the channel, …\nWrapper for <code>resubscribe</code>. Create a new Subscription, …\nWrapper for <code>resubscribe</code>. Create a new <code>Subscription</code>, …\nWrapper for <code>resubscribe</code>. Create a new <code>RawSubscription</code>, …\nThe channel via which notifications are received.\nWrapper for <code>same_channel</code>. Returns <code>true</code> if the two …\nWrapper for <code>same_channel</code>. Returns <code>true</code> if the two …\nWrapper for <code>try_recv</code>. Attempt to receive a message from …\nWrapper for <code>try_recv</code>. Attempt to receive a message of the …\nWrapper for <code>try_recv</code>. Attempt to receive a message from …\nWrapper for <code>try_recv</code>. Attempt to receive a message from …")