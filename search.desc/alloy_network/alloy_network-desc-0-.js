searchState.loadedDescShard("alloy_network", 0, "alloy-networks\nTypes for a catch-all network.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nA signer capable of signing any transaction for the …\nThe network header type.\nThe JSON body of a header response.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA signer capable of signing any transaction for the given …\nContains the success value\nThe network receipt envelope type.\nA receipt response.\nThe JSON body of a transaction receipt.\nSigner error.\nA Transaction builder for a network.\nError type for transaction builders.\nThe JSON body of a transaction request.\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nGets the EIP-4844 blob sidecar of the transaction.\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nGet the default signer address. This address should be used\nEIP-2718 traits.\nGet the sender for the transaction.\nGet the gas limit for the transaction.\nGet the legacy gas price for the transaction.\nReturn true if the signer contains a credential for the …\nGet the input data for the transaction.\nGet the kind of transaction.\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nGet the max priority fee per gas for the transaction.\nGet the nonce for the transaction.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nTrim any conflicting keys and populate any computed fields …\nSets the EIP-2930 access list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the chain ID for the transaction.\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the value for the transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nGet the value for the transaction.\nTypes for a catch-all network.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecoding trait for EIP-2718 envelopes. These envelopes …\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nEncoding trait for EIP-2718 envelopes. These envelopes …\nRlp error from <code>alloy_rlp</code>.\nGot an unexpected type flag while decoding.\nDecode an EIP-2718 transaction into a concrete instance\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrue if the envelope is the legacy variant.\nDecode an EIP-2718 transaction in the network format.\nReturn the network encoding. For non-legacy items, this is …\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie.\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nTypes for a mainnet-like Ethereum network.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA signer capable of signing any transaction for the …\nGet the default signer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new signer with the given signer as the default …\nRegister a new signer on this object, and set it as the …\nRegister a new signer on this object. This signer will be …\nGet the signer for the given address.\nResult type for transaction builders\nA custom error.\nContains the error value\nInvalid transaction request\nContains the success value\nSigner error.\nA Transaction builder for a network.\nError type for transaction builders.\nAn unbuilt transaction, along with some error.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nGets the EIP-4844 blob sidecar of the transaction.\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nInstantiate a custom error.\nGet the sender for the transaction.\nReturns the argument unchanged.\nGet the gas limit for the transaction.\nGet the legacy gas price for the transaction.\nGet the input data for the transaction.\nCalls <code>U::from(self)</code>.\nSet the <code>to</code> field to a create call.\nSet the <code>to</code> field to a create call.\nGet the kind of transaction.\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nGet the max priority fee per gas for the transaction.\nGet the nonce for the transaction.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nTrim any conflicting keys and populate any computed fields …\nSets the EIP-2930 access list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nSet the <code>to</code> field to a create call.\nDeploy the code by making a create call with data. This …\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nGet the recipient for the transaction.\nGet the recipient for the transaction.\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the EIP-4844 blob …\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nBuilder-pattern method for setting the value.\nA signer capable of signing any transaction for the given …\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nGet the address of the signer.\nGet the address of the signer.\nGet the default signer address. This address should be used\nReturn true if the signer contains a credential for the …\nAsynchronously sign a transaction request, using the …\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.")