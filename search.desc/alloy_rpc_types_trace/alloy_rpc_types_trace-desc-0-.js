searchState.loadedDescShard("alloy_rpc_types_trace", 0, "alloy-rpc-types-trace\nTypes used by tracing backends.\n<code>trace_filter</code> types and support\nGeth tracing types.\nTypes for opcode tracing.\nOtterscan specific types for RPC responses.\nTypes for trace module.\nBuilder style functions for <code>trace_call</code>\nUntagged error variant\nUntagged success variant\nThe result of a single transaction trace.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the hash of the transaction that was traced.\nTrace failure produced by the tracer\nTrace results produced by the tracer\ntransaction hash\ntransaction hash\nOnly return traces for transactions with matching <code>from</code> <em>and</em> …\nTrace filter.\nHelper type for matching <code>from</code> and <code>to</code> addresses. Empty sets …\nHow to apply <code>from_address</code> and <code>to_address</code> filters.\nReturn traces for transactions with matching <code>from</code> OR <code>to</code> …\nSets the <code>after</code> field of the struct\nOutput offset\nSets the <code>count</code> field of the struct\nOutput amount\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from_address</code> field of the struct\nFrom address\nSets the <code>from_block</code> field of the struct\nFrom block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>TraceFilterMatcher</code> for this filter.\nReturns <code>true</code> if the given <code>from</code> and <code>to</code> addresses match this …\nSets the <code>from_address</code> field of the struct\nHow to apply <code>from_address</code> and <code>to_address</code> filters.\nSets the <code>to_address</code> field of the struct\nTo address\nSets the <code>to_block</code> field of the struct\nTo block\nblockTraceResult represents the results of tracing a …\nbuilt-in tracer\nThe response for call tracer\nThe callTracer tracks all the call frames executed during …\nThe response for the default struct log tracer\nGeth Default struct log trace frame\nUntagged error variant\nThe response for four byte tracer\nThe 4byteTracer collects the function selectors of every …\nAvailable built-in tracers\nConfiguration of the tracer\nAvailable tracers\nBindings for additional <code>debug_traceCall</code> options\nBindings for additional <code>debug_traceTransaction</code> options\nDefault tracing options for the struct looger.\nTracing response objects\nAny other trace response, such as custom javascript …\ncustom JS tracer\nThe response for mux tracer\nThe mux tracer is a tracer that can run multiple tracers …\nAn empty json response\nThis tracer is noop. It returns an empty object and is …\nThe response for pre-state byte tracer\nThe prestate tracer has two modes: prestate and diff. The …\nRepresents a struct log entry in a trace\nUntagged success variant\nResult type for geth style transaction trace\nBlock number corresponding to the trace task\nThe block overrides to apply\nGeth call tracer types.\nConfigures a CallConfig\nThe common tracing options\nEnables debug mode.\nprint output during capture end\nCurrent call depth\nDisables memory capture.\nDisable memory capture\nDisables return data capture.\nDisable return data capture\nDisables stack capture.\ndisable stack capture\nDisables storage capture.\nDisable storage capture\nEnables memory capture.\nenable memory capture\nEnables return data capture.\nEnable return data capture\nError message if any\nWhether the transaction failed\nGeth 4byte tracer types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsumes the config and tries to deserialize it into the …\nHow much gas was used.\nremaining gas\ncost for executing op\nBlock hash corresponding to the trace task\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the CallConfig if it is a call config.\nReturns the raw json value\nReturns the MuxConfig if it is a mux config.\nReturns the PreStateConfig if it is a prestate config.\nReturns <code>true</code> if memory capture is enabled\nReturns if this is a null object\nReturns <code>true</code> if return data capture is enabled\nReturns <code>true</code> if stack capture is enabled\nReturns <code>true</code> if storage capture is enabled\nmaximum length of output, but zero means unlimited\nref …\nSize of memory.\nGeth <code>muxTracer</code> types.\nNoop tracer response.\nopcode to be executed\nprogram counter\nPre-state Geth tracer types.\nConfigures a PreStateConfig\nRefund counter\nLast call’s return data. Enabled via enableReturnData\nOutput of the transaction\nSerializes a storage map as a list of key-value pairs …\nEVM stack\nThe state overrides to apply\nStorage slots of current contract read from and written …\nRecorded traces of the transaction\nA string of decimal integers that overrides the …\nThe custom tracer to use.\nConfig specific to given <code>tracer</code>.\nTrace results produced by the trace task\nAll the options\nEnables block overrides\nSets the debug field.\nSets the disable_memory field.\nSets the disable_return_data field.\nSets the disable_stack field.\nSets the disable_storage field.\nSets the enable_memory field.\nSets the enable_return_data field.\nSets the limit field.\nEnables state overrides\nSets the timeout to use for tracing\nSets the tracer to use\nSets the tracing options\nTrace failure produced by the tracer\nTrace results produced by the tracer\ntransaction hash\ntransaction hash\nThe configuration for the call tracer.\nThe response object for <code>debug_traceTransaction</code> with …\nRepresents a recorded call.\nThe address of the contract that was called.\nRecorded child calls.\nThe data of the log.\nError message, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe address of that initiated the call.\nHow much gas was left before the call.\nHow much gas was used by the call.\nCalldata input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogs emitted by this call.\nSets the only top call flag.\nWhen set to true, this will only trace the primary …\nOutput of the call, if any.\nWhy this call reverted, if it reverted.\nThe address of the contract that was called.\nThe topics of the log.\nThe type of the call.\nValue transferred.\nSets the with log flag.\nWhen set to true, this will include the logs emitted by …\nThe 4byte tracer response object.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>muxTracer</code> config that contains the configuration for …\nA <code>muxTracer</code> frame response that contains the results of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn empty frame response that’s only an empty json object …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper type to track the kind of change of an AccountState.\nRepresents the state of an account.\nThe account was created.\nThe default mode returns the accounts necessary to execute …\nDiff mode returns the differences between the transaction…\nRepresents the account states before and after the …\nHelper type for DiffMode to represent a specific set\nThe account was modified.\nCorresponds to the post state of the DiffMode\nCorresponds to the pre state of the DiffMode\nThe config for the prestate tracer.\nA tracer that records AccountStates. The prestate tracer …\nIncludes all the account states necessary to execute a …\nThe account was selfdestructed.\nReturns the account states after the transaction is …\nReturns the account states before and after the …\nThe optional balance of the account.\nThe optional code of the account.\nIf <code>diffMode</code> is set to true, the response frame includes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>AccountState</code> with the given account info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the account was created\nReturns true if this trace was requested without diffmode.\nIs default mode if diff_mode is not set\nReturns true if this trace was requested with diffmode.\nReturns true if this trace was requested with diffmode.\nReturns true the account was modified\nReturns true if this is the post state of the DiffMode\nReturns true if this is the pre state of the DiffMode\nReturns true the account was modified\nThe optional nonce of the account.\nThe account states after the transaction is executed.\nThe account states before the transaction is executed.\nRemoves balance,nonce or code if they match the given …\nRemoves all zero values from the storage of the …\nThe sets of the DiffMode should only contain changed …\nThe storage of the account.\nOpcode gas usage for a transaction.\nGas information for a single opcode.\nOpcode gas usage for a transaction.\nThe block hash\nThe block number\nHow many times the opcode was executed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCombined gas used by all instances of the opcode\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the opcode\nThe gas used by each opcode in the transaction\nThe transaction hash\nAll executed transactions in the block in the order they …\nCustom struct for otterscan <code>getBlockDetails</code> RPC response\nCustom struct for otterscan <code>getContractCreator</code> RPC …\nInternal issuance struct for <code>BlockDetails</code> struct\nCustom struct for otterscan <code>getInternalOperations</code> RPC …\nOperation Create\nOperation Create2\nOperation Contract self destruct\nOperation Transfer\nOperation type enum for <code>InternalOperation</code> struct\nCustom <code>Block</code> struct that includes transaction count for …\nCustom struct for otterscan <code>getBlockTransactions</code> RPC …\nThe receipt of a transaction.\nCustom transaction receipt struct for otterscan …\nCustom struct for otterscan <code>traceTransaction</code> RPC response\nCustom struct for otterscan <code>searchTransactionsAfter</code>and …\nGas used\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog send from contracts.\nThe bloom filter.\nThe transaction receipt.\nIf transaction is executed successfully.\nThe transaction type.\nThe diff of an account after a transaction\nRepresents the various types of actions recorded during …\nAn external action type.\nNew storage value added.\nBlock rewards\nRegular call\nContract call.\nCall\nOutput of a regular call transaction.\nRepresents a certain CallType of a <em>call</em> or message …\nCall code\nOutcome of a CALL.\nCall type.\nExisting storage value changed.\nA changed value\nA CREATE call\nContract creation.\nOutput of a CREATE transaction.\nRepresents a <em>create</em> action, either a <code>CREATE</code> operation or a …\nOutcome of a CREATE.\nDelegate call\nRepresents how a value changed.\nA wrapper for TransactionTrace that includes additional …\nA diff of some chunk of memory.\nNone\nExisting storage value removed.\nRewards if any (pre POS)\nA block reward.\nRecorded reward of a block.\nWhat kind of reward.\nParity style traces never renamed suicide to selfdestruct: …\nContract suicide/selfdestruct.\nRepresents a <em>selfdestruct</em> action fka <code>suicide</code>.\nNew-type for list of account diffs\nProvides information detailing all altered portions of the …\nStatic call\nA diff of some storage value.\nDefault trace\nRepresents the output of a trace.\nThe Outcome of a traced transaction with optional settings\nA <code>FullTrace</code> with an additional transaction hash\nDifferent Trace diagnostic targets.\nA parity style trace of a transaction.\nExisting value didn’t change.\nReward for uncle block\nA record of an executed VM operation.\nA record of a single VM instruction, opcode level.\nA record of a full VM trace for a CALL/CREATE.\nProvides a full trace of the VM’s state throughout the …\nRepresents what kind of trace this is\ndestroyed/suicided address.\nAddress of the created contract.\nAuthor’s address.\nHow the balance changed, if at all\nBalance of the contract just before it was destroyed.\nHash of the block, if not pending.\nBlock number the transaction is included in, None if …\nThe type of the call.\nCreates a new Delta::Changed variant\nHow the code changed, if at all\nContract code.\nThe code to be executed.\nThe gas cost for this instruction.\nThe changed data.\nThe error message if the transaction failed.\nInformation concerning the execution of the operation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOriginal value\nAddress of the sending account.\nThe address of the creator.\nThe recorded trace.\nThe gas available for executing the call.\nThe gas available for the creation init code.\nReturns the gas used by this trace.\nGas used by the call.\nGas used by the call.\nIndex of the instruction in the set.\nThe init code.\nThe input data provided to the call.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the value is added\nReturns true if this is a call action\nReturns true if the value is changed\nReturns true if this is a create action\nReturns true if the value is removed\nReturns true if this is a reward action\nReturns true if this is a selfdestruct action\nReturns true if the value is unchanged\nStorage key.\nReturns what kind of action this is\nIf altered, the memory delta.\nHow the nonce changed, if at all\nOffset into memory the change begins.\nStringified opcode.\nAll executed instructions.\nOutput of the trace\nThe output data of the call.\nThe program counter.\nThe stack item placed, if any.\ndestroyed contract heir.\nOutput of the trace, can be CALL or CREATE\nReward type.\nSets the gas used by this trace.\nSets the gas used of the root trace.\nEnabled if TraceType::StateDiff is provided\nAll touched/changed storage values\nThe altered storage value, if any.\nSubordinate trace of the CALL/CREATE if applicable.\nHow many subtraces this trace has.\nNew value\nAddress of the destination/target account.\nEnabled if TraceType::Trace is provided, otherwise an …\nTrace of the transaction and its result.\nThe identifier of this transaction trace in the set.\nHash of the traced transaction.\nHash of the transaction\nTransaction index within the block, None if pending.\nThe total gas used.\nStorage value belonging to the key.\nValue transferred to the destination account.\nThe value with which the new account is endowed.\nReward amount.\nEnabled if TraceType::VmTrace is provided\nContainer type for <code>trace_call</code> arguments\nOptional: blockId\nOptional: BlockOverrides\ncall request object\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new <code>TraceCallRequest</code> given a <code>TransactionRequest</code> …\nOptional: StateOverride\ntrace types\nSets the <code>BlockId</code> Note: this is optional\nSets the <code>BlockOverrides</code> Note: this is optional\nSets the <code>StateOverride</code> Note: this is optional\nInserts <code>TraceType::StateDiff</code>\nInserts <code>TraceType::Trace</code>\nInserts a single trace type.\nInserts multiple trace types from an iterator.\nInserts <code>TraceType::VmTrace</code>")