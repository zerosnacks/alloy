searchState.loadedDescShard("alloy_rpc_types", 0, "Alloy RPC type definitions.\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list with gas used appended.\nAccount information.\nReceipt envelope, as defined in EIP-2718.\nAlias for a catch-all receipt type.\nA vector of values\nThe hash of the block if the filter only targets a single …\nBase fee per gas integer conversion error\nBlob gas used integer conversion error\nThis represents a set of blobs, and its corresponding …\nBlock representation\nError that can occur when converting other types to blocks\nEither a block hash <em>or</em> a block number\nA Block Identifier. …\nBlock number and hash.\nA block Number (or tag - “latest”, “earliest”, “…\nBlockOverrides is a set of header fields to override.\nAn iterator over the transaction hashes of a block.\nAn Iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of Block should be …\nHelper type to represent a bloom filter used for matching …\nBundle of transactions\nChain status.\nError variants when converting from crate::Transaction to …\nResponse for EIP-1186 account proof <code>eth_getProof</code>\nData structure with proof for one single storage-entry\nEarliest block (genesis)\nReceipt envelope with type flag 2, containing a EIP-1559 …\nError during EIP-2718 transaction coding.\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nEmpty result.\nCallResponse for eth_callMany\nExcess blob gas integer conversion error\nExtended account information (used by <code>parity_allAccountInfo</code>…\nResponse type for <code>eth_feeHistory</code>\nFilter for logs.\nRepresents the target range of blocks for the filter\nResponse of the <code>eth_getFilterChanges</code> RPC.\nOwned equivalent of a <code>SubscriptionId</code>\nFilterSet is a set of values that will be used to filter …\nSupport for matching Filters\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nReceive full details of the transactions.\nGas limit integer conversion error\nGas used integer conversion error\nA block hash and an optional bool that defines if it’s …\nA block hash\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nNew hashes (block or transactions).\nReceive only the hashes of the transactions.\nBlock header representation.\nPeer count as hex\nA hex encoded or decimal index that’s intended to be …\nInfo when syncing\nA transaction failed sender recovery\nInvalid signature\nLatest block\nReceipt envelope with no type flag.\nEthereum Log emitted by a transaction\nNew logs.\nMissing <code>accessList</code> field for EIP-2930 transaction.\nMissing <code>blobVersionedHashes</code> field for EIP-4844 transaction.\nMissing block number\nMissing <code>chainId</code> field for EIP-1559 transaction.\nMissing full transactions required for block decoding\nMissing <code>gasPrice</code> field for Legacy transaction.\nMissing <code>maxFeePerBlobGas</code> field for EIP-1559 transaction.\nMissing <code>maxFeePerGas</code> field for EIP-1559 transaction.\nMissing <code>maxPriorityFeePerGas</code> field for EIP-1559 …\nMissing signature for transaction.\nMissing <code>to</code> field for EIP-4844 transaction.\nMissing y parity in signature.\nThis includes general information about a running node, …\nNot syncing\nNumeric id\nBlock by number from canon chain\nA block number\nA block number\nPeer count as integer\nAdditional fields for Optimism transaction receipts\nType that represents the signature parity byte, meant for …\nNumber of peers connected to.\nPeer Ethereum protocol information\nPeer connection information\nPeer network information\nPeer protocols information\nPeers info\nPending block (not yet part of the blockchain)\nSpecifies the kind of information you wish to receive from …\nPeer PIP protocol information\nRepresents a range of blocks with optional from and to …\nEthereum Log\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\naccount derived from a signature as well as information …\nValue representation with additional info\nA Block representation that allows to include additional …\nHeader representation with additional info.\nA raw block failed to decode\nA block hash which may have a boolean requireCanonical …\nSafe head block\nContainer type for all signature fields in RPC\n<code>alloy_primitives::SignatureError</code>.\nState context for callMany\nString id\nSyncing info\nSync status\nA single topic\nTransaction object used in RPC\nAdditional fields in the context of a block that contains …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nPropagation statistics for pending transaction.\nNew transactions.\nInternal struct to calculate reward percentiles\nSpecial case for uncle response.\nA single value\nUnion type for representing a single value or a vector of …\nWrapper allowing to catch all fields missing on the inner …\nWithdrawal represents a validator withdrawal from the …\nThe result of an <code>eth_getWork</code> request\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nEIP2930\nThe account proof.\nNumber of active peers\nAdds an address to the access list and returns <code>true</code> if the …\nAccount addresses that would be loaded at the start of …\nThe account address.\naddress of the recovered account\nTarget address for withdrawn ether.\nAddress\nContract that emitted this log.\nTypes for the admin api\nValue of the withdrawal in gwei.\nReturn the withdrawal amount in wei.\nReturns the block hash if it is BlockId::Hash\nReturns the numeric block number if explicitly set\nReturns the block number if it is a …\nReturn the inner receipt. Currently this is infallible, …\nReturn the inner receipt with bloom. Currently this is …\nThe account balance.\nOverrides the basefee of the block.\nBase fee of the block.\nAn array of block base fees per blob gas. This includes …\nBase fee per unit of gas (if past London)\nAn array of block base fees per gas. This includes the …\nThe price paid by the eip-4844 transaction per blob gas.\nBlob gas used\nBlob gas used by the eip-4844 transaction\nAn array of block blob gas used ratios. These are …\nBlob versioned hashes for EIP-4844 transactions.\nContains the blob hashes for eip-4844 transactions.\nThe blob data.\nDescribes the gap in the blockchain, if there is one: …\nA block hash\nA dictionary that maps blockNumber to a user-defined hash. …\nHash of the block the transaction that emitted this log …\nHash of the block.\nHash of the block this transaction was included within.\nBlock hash\nBlock Number\nNumber of the block the transaction that emitted this log …\nNumber of the block.\nNumber of the block this transaction was included within.\nBlock number\nFilter block options, specifying on which blocks the …\nBlock overrides to apply\nThe timestamp of the block as proposed in: …\nReturn the receipt’s bloom.\nReturn the receipt’s bloom.\nReturn the receipt’s bloom.\nCalculates <code>Log</code>’s bloom filter. this is slow operation …\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nCapabilities\nThe chain ID for the transaction.\nThe chain id of the transaction, if any.\nThe hash of the code of the account.\nOverrides the coinbase address of the block.\nThe blob commitments.\nNumber of connected peers\nChecks if the access list contains the specified address.\nChecks if a specific storage slot within an account is …\nContract address created, or None if not a deployment.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nGas used\nCurrent block\nArbitrary length data.\nTransaction data\nDecodes the inner BlobTransactionSidecar fields from RLP …\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nDifficulty\nOverrides the difficulty of the block.\nPeer total difficulty if known\nPeer total difficulty\nCreates a new “earliest” tag instance.\nThe price paid post-execution by the transaction (i.e. …\nEncodes the inner BlobTransactionSidecar fields as RLP …\nThe enode URL of the connected node.\nThe ENR of the running client.\nCommonly used errors for the <code>eth_</code> namespace.\neth_call output (if error)\nEthereum related types\nEthereum protocol information\nExcess blob gas\nExtra data\nAdditional fields that should be serialized into the <code>Block</code> …\nAdditional fields that should be serialized into the <code>Block</code> …\nAdditional fields that should be serialized into the <code>Block</code> …\nOutputs the RLP length of the BlobTransactionSidecar …\nThe original filter, if any\nCreates a new “finalized” tag instance.\nBlock no this transaction was first seen.\nReturns an iterator over the list’s addresses and …\nConverts the list into a vec, expected by revm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAddress of the sender\nThe address of the transaction author.\nSender\nReturns an RpcBlockHash from a B256.\nThe gas limit for the transaction.\nGas amount\nGas Limit\nOverrides the gas limit of the block.\nThe legacy gas price.\nGas Price\nEstimated gas used with access list.\nGas Used\nGas used by the transaction\nGas used by this transaction alone.\nAn array of block gas used ratios. These are calculated as …\nCreate a new block hash instance.\nBlock hash\nBlock hash\nHash of the block\nHash of the transaction.\nHash\nCreate a new block hash instance that requires the block …\nSHA3 of peer best block hash\nSHA3 of peer best block hash\nHeader of the block.\nHighest block seen so far\nUnique node identifier.\nPublic node id\nMonotonically increasing identifier issued by consensus …\nIndex of the transaction in the block\nStandard value.\nStandard value.\nThe inner struct.\nThe receipt envelope.\nStandard value.\nConsensus log object\nThe receipt envelope, which contains the consensus receipt …\nThe inner struct.\nGet the length of the inner receipt in the 2718 encoding.\nTransaction data.\nTransaction data\nData\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>Self</code> and returns <code>BlockNumber</code>, <code>BlockHash</code>\nConsume the structure, returning the receipt and the bloom …\nConsumes the type and returns an iterator over the list’…\nConsumes the type and converts the list into a vec, …\nConsume the structure, returning only the receipt\nThe IP address of the connected node.\nReturns <code>true</code> if it’s “earliest”\nReturns true if this is BlockNumberOrTag::Earliest\nReturns <code>true</code> if it’s “finalized”\nReturns true if this is BlockNumberOrTag::Finalized\nReturns true if this is BlockId::Hash\nReturns <code>true</code> if it’s “latest”\nReturns true if this is BlockNumberOrTag::Latest\nReturns whether this is a legacy receipt (type 0)\nReturns <code>true</code> if a numeric block number is set\nReturns true if this is BlockNumberOrTag::Number\nReturns <code>true</code> if it’s “pending”\nReturns true if this is BlockNumberOrTag::Pending\nReturns <code>true</code> if it’s “safe”\nReturns true if this is BlockNumberOrTag::Safe\nReturn true if the transaction was successful.\nReturn true if the transaction was successful.\nIf the signature contains chain replay protection, And the …\nStorage key.\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nCreates a new “latest” tag instance.\nThe node’s listening address.\nLocal endpoint address\nLog Index in Block\nReturn the receipt logs.\nReturn the receipt logs.\nReturn the receipt logs.\nReturn the receipt logs.\nLog send from contracts.\nCalculate receipt logs bloom.\nReturn the receipt’s bloom.\nThe bloom filter.\nLogs bloom\nReturns whether or not the block matches the given …\nMax number of peers\nThe max fee per blob gas for EIP-4844 blob transactions.\nConfigured max fee per blob gas for eip-4844 transactions\nThe max base fee per gas the sender is willing to pay.\nMax BaseFeePerGas the user is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe miner’s tip.\nAccount meta JSON\nAlias of <code>author</code>\nMix Hash\nAccount name\nAccount name\nThe node’s user agent, containing a client name, …\nNode client ID\nNetwork information\nCreates a new <code>BlockNumHash</code> from a block number and hash.\nCreate new ReceiptWithBloom\nConstructs a new BlobTransactionSidecar from a set of …\nThe account nonce.\nNonce\nThe nonce of the transaction.\nNonce\nCreates a new block number instance.\nBlock number\nBlock number\nBlock number\nOverrides the block number.\nThe block number: this isn’t always stored.\nLowest number block of the returned range.\nMisc Optimism-specific types.\nSupport for capturing other fields\nAll fields not present in the inner struct.\nSupport for arbitrary additional fields.\nArbitrary extra fields.\nAll fields not present in the inner struct.\nParent beacon block root\nHash of the parent\nDetailed information on peers\nCreates a new “pending” tag instance.\nPIP protocol information.\nThe node’s listening ports.\nThe proof-of-work hash.\nproof for the pair\nThe blob proofs.\nPeers this transaction was propagated to with count.\nThe protocols that the node supports, with protocol …\nProtocols information\npublic key of the recovered account\nEthereum types for pub-sub\nThe R field of the signature; the point on the curve.\nOverrides the prevrandao of the block.\nEthereum log object.\nThe receipt.\nTransactions receipts root hash\nRemote endpoint address\nGeth Compatibility Field: whether this log was removed\nAlloy basic Transaction Request type.\nWhether the block must be a canonical block\nThe effective gas tip by the transaction\nAn (optional) array of effective priority fee per gas data …\nCalculate the length of the rlp payload of the network …\nCalculate the length of the rlp payload of the network …\nThe S field of the signature; the point on the curve.\nCreates a new “safe” tag instance.\nThe seed hash.\nBlob sidecar for EIP-4844 transactions.\nAll <em>flattened</em> fields of the transaction signature.\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a size heuristic for the in-memory size of the …\nInteger the size of this block in bytes.\nStarting block\nbindings for state overrides in eth_call\nState root hash\nThe post-transaction stateroot (pre Byzantium)\nReturns the success status of the receipt’s transaction.\nReturns the success status of the receipt’s transaction.\nReturns the success status of the receipt’s transaction.\nIf transaction is executed successfully.\nThe hash of the storage of the account.\nKeys of storage that would be loaded at the start of …\nThe storage proof.\nThe target.\nOverrides the timestamp of the block.\nTimestamp\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nRecipient\nTopics (maximum of 4)\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nTotal difficulty\nRPC types for transactions\nTransaction Hash\nTransaction Hash.\nInclusive number of tx to replay in block. -1 means replay …\nIndex of the Transaction in the block\nIndex within the block.\nTransaction Index\nThe EIP-2718 transaction type. See EIP-2718 for more …\nEIP2718\nBlock Transactions. In the case of an uncle block, this …\nAll transactions to execute\nTransactions root hash\nReturn the <code>TxType</code> of the inner receipt.\nTypes for the <code>txpool</code> namespace: …\nThe transaction type.\nUncles’ hashes.\nHash of the uncles\nAccount UUID (<code>None</code> for address book entries)\nFor EIP-155, EIP-2930 and Blob transactions this is set to …\nIndex of validator associated with withdrawal.\nValue that the key holds\neth_call output (if no error)\nThe value transferred in the transaction, in wei.\nTransferred value\nNegotiated ethereum protocol version\nNegotiated PIP protocol version\nReturns the versioned hash for the blob at the given …\nReturns an iterator over the versioned hashes of the …\nWarp sync snapshot chunks total.\nWarp sync snapshot chunks processed.\nCalculates the bloom filter for the receipt and returns …\nWithdrawals in the block.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nThe y parity of the signature. This is only used for typed …\nThe block number or tag this filter should start at.\nThe block number or that this filter should end at.\nRepresents a short summary of the <code>eth</code> sub-protocol …\nCan contain either eth protocol info or a string “…\nRepresents a short summary of the <code>eth</code> sub-protocol …\nThe string “handshake” if the peer is still completing …\nThe string “handshake” if the peer is still completing …\nThe <code>eth</code> sub-protocol metadata known about the host peer.\nThe <code>snap</code> sub-protocol metadata known about the host peer.\nThis includes general information about a running node, …\nRepresents a short summary of information known about a …\nRepresents networking related information about the peer, …\nRepresents the protocols that a peer supports.\nRepresents a node’s discovery and listener ports.\nRepresents protocols that the connected RPC node supports.\nRepresents a short summary of the <code>snap</code> sub-protocol …\nCan contain either snap protocol info or a string “…\nRepresents a short summary of the host’s <code>snap</code> …\nThe peer’s capabilities.\nThe chain configuration for the host’s fork rules.\nThe total difficulty of the host’s blockchain.\nThe node’s discovery port.\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nDetails about the node’s supported eth protocol. <code>None</code> if …\nDetails about the peer’s supported eth protocol. <code>None</code> if …\nThe Keccak hash of the host’s genesis block.\nThe hash of the host’s best known block.\nUnique node identifier.\nThe peer’s enode ID.\nWhether or not the peer is inbound.\nThe IP address of the connected node.\nThe node’s listening address.\nThe node’s listener port.\nThe local endpoint of the TCP connection.\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nThe eth network version.\nNetworking information about the peer.\nPlaceholder for any other protocols\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nThe remote endpoint of the TCP connection.\nDetails about the node’s supported snap protocol. <code>None</code> …\nDetails about the peer’s supported snap protocol. <code>None</code> …\nWhether or not the peer is a static peer.\nWhether or not the peer is trusted.\nThe negotiated eth version.\nThe negotiated snap version.\nList of JSON-RPC error codes\nCustom geth error code, …\nhttps://eips.ethereum.org/EIPS/eip-1898\nThrown when a block wasn’t found …\nFailed to send transaction, See also …\nThrown when querying for <code>finalized</code> or <code>safe</code> block before …\nWithdrawal represents a validator withdrawal from the …\nTarget address for withdrawn ether.\nTypes for the admin api\nValue of the withdrawal in gwei.\nBlock RPC types.\nCommonly used errors for the <code>eth_</code> namespace.\nMonotonically increasing identifier issued by consensus …\nSupport for capturing other fields\nEthereum types for pub-sub\nEthereum log object.\nbindings for state overrides in eth_call\nRPC types for transactions\nTypes for the <code>txpool</code> namespace: …\nIndex of validator associated with withdrawal.\nAccount information.\nResponse for EIP-1186 account proof <code>eth_getProof</code>\nData structure with proof for one single storage-entry\nExtended account information (used by <code>parity_allAccountInfo</code>…\naccount derived from a signature as well as information …\nThe account proof.\nThe account address.\naddress of the recovered account\nThe account balance.\nThe hash of the code of the account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the signature contains chain replay protection, And the …\nStorage key.\nAccount meta JSON\nAccount name\nAccount name\nThe account nonce.\nproof for the pair\npublic key of the recovered account\nThe hash of the storage of the account.\nThe storage proof.\nAccount UUID (<code>None</code> for address book entries)\nValue that the key holds\nRepresents a short summary of the <code>eth</code> sub-protocol …\nCan contain either eth protocol info or a string “…\nRepresents a short summary of the <code>eth</code> sub-protocol …\nThe string “handshake” if the peer is still completing …\nThe string “handshake” if the peer is still completing …\nThe <code>eth</code> sub-protocol metadata known about the host peer.\nThe <code>snap</code> sub-protocol metadata known about the host peer.\nThis includes general information about a running node, …\nRepresents a short summary of information known about a …\nRepresents networking related information about the peer, …\nRepresents the protocols that a peer supports.\nRepresents a node’s discovery and listener ports.\nRepresents protocols that the connected RPC node supports.\nRepresents a short summary of the <code>snap</code> sub-protocol …\nCan contain either snap protocol info or a string “…\nRepresents a short summary of the host’s <code>snap</code> …\nThe peer’s capabilities.\nThe chain configuration for the host’s fork rules.\nThe total difficulty of the host’s blockchain.\nThe node’s discovery port.\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nDetails about the node’s supported eth protocol. <code>None</code> if …\nDetails about the peer’s supported eth protocol. <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Keccak hash of the host’s genesis block.\nThe hash of the host’s best known block.\nUnique node identifier.\nThe peer’s enode ID.\nWhether or not the peer is inbound.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IP address of the connected node.\nThe node’s listening address.\nThe node’s listener port.\nThe local endpoint of the TCP connection.\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nThe eth network version.\nNetworking information about the peer.\nPlaceholder for any other protocols\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nThe remote endpoint of the TCP connection.\nDetails about the node’s supported snap protocol. <code>None</code> …\nDetails about the peer’s supported snap protocol. <code>None</code> …\nWhether or not the peer is a static peer.\nWhether or not the peer is trusted.\nThe negotiated eth version.\nThe negotiated snap version.\nBlock representation\nError that can occur when converting other types to blocks\nEither a block hash <em>or</em> a block number\nA Block Identifier. …\nBlock number and hash.\nA block Number (or tag - “latest”, “earliest”, “…\nBlockOverrides is a set of header fields to override.\nAn iterator over the transaction hashes of a block.\nAn Iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of Block should be …\nEarliest block (genesis)\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nA block hash and an optional bool that defines if it’s …\nA block hash\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nBlock header representation.\nA transaction failed sender recovery\nLatest block\nBlock by number from canon chain\nA block number\nA block number\nPending block (not yet part of the blockchain)\nValue representation with additional info\nA Block representation that allows to include additional …\nHeader representation with additional info.\nA raw block failed to decode\nA block hash which may have a boolean requireCanonical …\nSafe head block\nSpecial case for uncle response.\nOverrides the basefee of the block.\nBase fee per unit of gas (if past London)\nReturns the blob fee for <em>this</em> block according to the …\nBlob gas used\nA block hash\nA dictionary that maps blockNumber to a user-defined hash. …\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nOverrides the coinbase address of the block.\nConverts <code>self</code> into <code>Hashes</code>.\nDifficulty\nOverrides the difficulty of the block.\nExcess blob gas\nExtra data\nAdditional fields that should be serialized into the <code>Block</code> …\nAdditional fields that should be serialized into the <code>Block</code> …\nAdditional fields that should be serialized into the <code>Block</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas Limit\nOverrides the gas limit of the block.\nGas Used\nBlock hash\nBlock hash\nHash of the block\nReturns an iterator over references to the transaction …\nReturns an iterator over mutable references to the …\nHeader of the block.\nStandard value.\nStandard value.\nStandard value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a block with Tx hashes into a full block.\nConverts <code>self</code> into <code>Hashes</code>.\nWhether the block has no transactions.\nReturns true if the enum variant is used for full …\nCheck if the enum variant is used for hashes.\nReturns true if the enum variant is used for an uncle …\nReturns an iterator over the transaction hashes.\nReturns the number of transactions.\nLogs bloom\nAlias of <code>author</code>\nMix Hash\nReturns the blob fee for the next block according to the …\nCalculate excess blob gas for the next block according to …\nNonce\nBlock number\nBlock number\nBlock number\nOverrides the block number.\nSupport for arbitrary additional fields.\nParent beacon block root\nHash of the parent\nOverrides the prevrandao of the block.\nTransactions receipts root hash\nWhether the block must be a canonical block\nInteger the size of this block in bytes.\nState root hash\nOverrides the timestamp of the block.\nTimestamp\nTotal difficulty\nBlock Transactions. In the case of an uncle block, this …\nTransactions root hash\nReturns an instance of BlockTransactions with the Uncle …\nUncles’ hashes.\nHash of the uncles\nWithdrawals in the block.\nWithdrawals root hash added by EIP-4895 and is ignored in …\n-1 means all transactions\nBundle of transactions\nCallResponse for eth_callMany\nTransaction index\nState context for callMany\nRepresents a transaction index where -1 means all …\nBlock Number\nBlock overrides to apply\nReturns the value if present, otherwise returns the error.\neth_call output (if error)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the index if this is the index variant\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this is the all variant\nInclusive number of tx to replay in block. -1 means replay …\nAll transactions to execute\neth_call output (if no error)\nList of JSON-RPC error codes\nCustom geth error code, …\nhttps://eips.ethereum.org/EIPS/eip-1898\nThrown when a block wasn’t found …\nFailed to send transaction, See also …\nThrown when querying for <code>finalized</code> or <code>safe</code> block before …\nReturns the error code as <code>i32</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResponse type for <code>eth_feeHistory</code>\nInternal struct to calculate reward percentiles\nAn array of block base fees per blob gas. This includes …\nAn array of block base fees per gas. This includes the …\nAn array of block blob gas used ratios. These are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas used by the transaction\nAn array of block gas used ratios. These are calculated as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the base fee of the latest block in the …\nReturns the blob fee of the latest block in the …\nReturns the base fee of the next block.\nReturns the blob base fee of the next block.\nLowest number block of the returned range.\nThe effective gas tip by the transaction\nAn (optional) array of effective priority fee per gas data …\nA vector of values\nA vector of values\nThe hash of the block if the filter only targets a single …\nHelper type to represent a bloom filter used for matching …\nEmpty result.\nFilter for logs.\nRepresents the target range of blocks for the filter\nResponse of the <code>eth_getFilterChanges</code> RPC.\nOwned equivalent of a <code>SubscriptionId</code>\nFilterSet is a set of values that will be used to filter …\nSupport for matching Filters\nReceive full details of the transactions.\nNew hashes (block or transactions).\nReceive only the hashes of the transactions.\nNew logs.\nNumeric id\nSpecifies the kind of information you wish to receive from …\nRepresents a range of blocks with optional from and to …\nString id\nA single topic\nNew transactions.\nA single value\nA single value\nUnion type for representing a single value or a vector of …\nSets the inner filter object\nAddress\nReturns the BloomFilter for the given address\nReturns the range (<code>fromBlock</code>, <code>toBlock</code>) if this is a range …\nPins the block hash for the filter\nFilter block options, specifying on which blocks the …\nDeserializes a boolean value into …\nGiven the event signature in string form, it hashes it and …\nSets event_signature(topic0) (the event name for …\nHashes all event signatures and sets them as array to …\nThe original filter, if any\nReturns <code>true</code> if the filter matches the given address.\nReturns <code>true</code> if the filter matches the given block hash.\nReturns true if the filter matches the given block number\nReturns <code>true</code> if the log matches the given topics\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the from block number\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the <code>toBlock</code> value, if any\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the <code>fromBlock</code> value, if any\nReturns the numeric value of the <code>toBlock</code> field\nReturns true if at least one topic is set\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the filter is empty\nReturns true if this is a range filter and has a from block\nReturn <code>true</code> if filter configured to match pending block. …\nReturn <code>true</code> if the filter configured to match pending …\nReturns whether the given bloom matches the list of Blooms …\nReturns whether the given value matches the filter. It the …\nReturns <code>true</code> if the bloom contains one of the address …\nReturns <code>true</code> if the bloom matches the topics\nCreates a new, empty filter\nCreates a new wrapper type for a Filter, if any with …\nSets the inner filter object\nSerializes the <code>PendingTransactionFilterKind</code> into a boolean …\nSets the block number this range filter should start at.\nPins the block hash this filter should target.\nSets the block number this range filter should end at.\nSets the to block number\nReturns a list of Bloom (BloomFilter) corresponding to the …\nReturns a ValueOrArray inside an Option, so that:\nSets topic0 (the event name for non-anonymous events)\nSets the 1st indexed topic\nSets the 2nd indexed topic\nSets the 3rd indexed topic\nTopics (maximum of 4)\nReturns the BloomFilter for the given topics\nThe block number or tag this filter should start at.\nThe block number or that this filter should end at.\nA hex encoded or decimal index that’s intended to be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEthereum Log emitted by a transaction\nGetter for the address field. Shortcut for …\nHash of the block the transaction that emitted this log …\nNumber of the block the transaction that emitted this log …\nThe timestamp of the block as proposed in: …\nGetter for the data field. Shortcut for <code>log.inner.data</code>.\nReturns the argument unchanged.\nConsensus log object\nCalls <code>U::from(self)</code>.\nDecode the log data into a typed log.\nLog Index in Block\nGeth Compatibility Field: whether this log was removed\nReserialize the data, returning a new <code>Log</code> object wrapping …\nReserialize the inner data, returning an …\nGetter for the topics field. Shortcut for …\nGet the topic list, mutably. This gives access to the …\nTransaction Hash\nIndex of the Transaction in the block\nA type that is supposed to capture additional fields that …\nDeserialized this type into another container type\nReturns the argument unchanged.\nReturns the deserialized value of the field, if it exists\nReturns the deserialized value of the field, if it exists. …\nContains all unknown fields\nCalls <code>U::from(self)</code>.\nCreates a new instance\nRemoves the deserialized value of the field, if it exists\nRemoves the deserialized value of the field, if it exists …\nRemoves the deserialized value of the field, if it exists. …\nBoolean parameter for new pending transactions.\nSyncing metadata.\nFull Transaction\nNew block header.\nLog\nLogs subscription.\nLog parameters.\nNew block headers subscription.\nNew Pending Transactions subscription.\nNo parameters passed.\nAny additional parameters for a subscription.\nResponse type for a SyncStatus subscription.\nIf not currently syncing, this should always be <code>false</code>.\nSubscription kind.\nSubscription result.\nSyncStatus\nSync status metadata.\nNode syncing status subscription.\nTransaction hash\nThe current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe highest block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it’s a bool parameter.\nReturns true if it’s a log parameter.\nThe starting block.\nWhether the node is currently syncing.\nEthereum Log\nContract that emitted this log.\nArbitrary length data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculate receipt logs bloom.\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nCustom account override used in call\nA set of account overrides\nFake balance to set for the account before executing the …\nFake EVM bytecode to inject into the account before …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFake nonce to set for the account before executing the …\nFake key-value mapping to override all slots in the …\nFake key-value mapping to override individual slots in the …\nChain status.\nPeer count as hex\nInfo when syncing\nNot syncing\nPeer count as integer\nNumber of peers connected to.\nPeer Ethereum protocol information\nPeer connection information\nPeer network information\nPeer protocols information\nPeers info\nPeer PIP protocol information\nSyncing info\nSync status\nPropagation statistics for pending transaction.\nNumber of active peers\nDescribes the gap in the blockchain, if there is one: …\nCapabilities\nNumber of connected peers\nCurrent block\nPeer total difficulty if known\nPeer total difficulty\nEthereum protocol information\nBlock no this transaction was first seen.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSHA3 of peer best block hash\nSHA3 of peer best block hash\nHighest block seen so far\nPublic node id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal endpoint address\nMax number of peers\nNode client ID\nNetwork information\nDetailed information on peers\nPIP protocol information.\nPeers this transaction was propagated to with count.\nProtocols information\nRemote endpoint address\nStarting block\nNegotiated ethereum protocol version\nNegotiated PIP protocol version\nWarp sync snapshot chunks total.\nWarp sync snapshot chunks processed.\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list with gas used appended.\nReceipt envelope, as defined in EIP-2718.\nThis represents a set of blobs, and its corresponding …\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nReceipt envelope with no type flag.\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nTransaction object used in RPC\nList with accounts accessed during transaction.\nEIP2930\nAccount addresses that would be loaded at the start of …\nContains the blob hashes for eip-4844 transactions.\nThe blob data.\nBlock hash\nBlock number\nThe chain id of the transaction, if any.\nThe blob commitments.\nCommonly used additional types that are not part of the …\nGas used\nReturns the argument unchanged.\nSender\nGas amount\nGas Price\nEstimated gas used with access list.\nHash\nThe receipt envelope.\nData\nCalls <code>U::from(self)</code>.\nConverts Transaction into TransactionRequest.\nReturns true if the transaction is a legacy or 2930 …\nLog send from contracts.\nThe bloom filter.\nConfigured max fee per blob gas for eip-4844 transactions\nMax BaseFeePerGas the user is willing to pay.\nThe miner’s tip.\nNonce\nMisc Optimism-specific types.\nArbitrary extra fields.\nThe blob proofs.\nThe receipt.\nAlloy basic Transaction Request type.\nSignature related RPC values\nAll <em>flattened</em> fields of the transaction signature.\nIf transaction is executed successfully.\nKeys of storage that would be loaded at the start of …\nRecipient\nTransaction Index\nEIP2718\nThe transaction type.\nTransferred value\nAdditional fields in the context of a block that contains …\nBase fee of the block.\nHash of the block.\nNumber of the block.\nReturns the argument unchanged.\nHash of the transaction.\nIndex of the transaction in the block\nCalls <code>U::from(self)</code>.\nBase fee per gas integer conversion error\nBlob gas used integer conversion error\nError variants when converting from crate::Transaction to …\nError during EIP-2718 transaction coding.\nExcess blob gas integer conversion error\nGas limit integer conversion error\nGas used integer conversion error\nInvalid signature\nMissing <code>accessList</code> field for EIP-2930 transaction.\nMissing <code>blobVersionedHashes</code> field for EIP-4844 transaction.\nMissing block number\nMissing <code>chainId</code> field for EIP-1559 transaction.\nMissing full transactions required for block decoding\nMissing <code>gasPrice</code> field for Legacy transaction.\nMissing <code>maxFeePerBlobGas</code> field for EIP-1559 transaction.\nMissing <code>maxFeePerGas</code> field for EIP-1559 transaction.\nMissing <code>maxPriorityFeePerGas</code> field for EIP-1559 …\nMissing signature for transaction.\nMissing <code>to</code> field for EIP-4844 transaction.\nMissing y parity in signature.\n<code>alloy_primitives::SignatureError</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptimism specific transaction fields\nAdditional fields for Optimism transaction receipts\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField indicating whether the transaction is a system …\nL1 fee for the transaction\nL1 fee scalar for the transaction\nSerialize/Deserialize l1FeeScalar to/from string\nL1 gas price for the transaction\nL1 gas used for the transaction\nThe ETH value to mint on L2\nHash that uniquely identifies the source of the deposit.\nAlias for a catch-all receipt type.\nTransaction receipt\nThe price paid by the eip-4844 transaction per blob gas.\nBlob gas used by the eip-4844 transaction\nHash of the block this transaction was included within.\nNumber of the block this transaction was included within.\nCalculates the address that will be created by the …\nContract address created, or None if not a deployment.\nThe price paid post-execution by the transaction (i.e. …\nReturns the argument unchanged.\nAddress of the sender\nGas used by this transaction alone.\nThe inner struct.\nThe receipt envelope, which contains the consensus receipt …\nCalls <code>U::from(self)</code>.\nMaps the inner receipt value of this receipt.\nAll fields not present in the inner struct.\nThe post-transaction stateroot (pre Byzantium)\nReturns the status of the transaction.\nAddress of the receiver. None when its a contract creation …\nTransaction Hash.\nIndex within the block.\nReturns the transaction type.\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nError thrown when both <code>data</code> and <code>input</code> fields are set and …\nRepresents <em>all</em> transaction requests to/from RPC.\nSets the access list for the transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nBlob versioned hashes for EIP-4844 transactions.\nBuild an EIP-1559 transaction.\nBuild an EIP-2930 transaction.\nBuild an EIP-4844 transaction.\nBuild a legacy transaction.\nBuild an <code>TypedTransaction</code>\nReturn the tx type this request can be built as. Computed …\nThe chain ID for the transaction.\nCheck if all necessary keys are present to build a 1559 …\nCheck if all necessary keys are present to build a 2930 …\nCheck if all necessary keys are present to build a 4844 …\nCheck if all necessary keys are present to build a legacy …\nTransaction data\nReturns the configured fee cap, if any.\nReturns the argument unchanged.\nSets the <code>from</code> field in the call to the provided address\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe address of the transaction author.\nThe gas limit for the transaction.\nSets the gas limit for the transaction.\nThe legacy gas price.\nGets invalid fields for EIP-1559 transaction type\nGets invalid fields for all transaction types\nSets the input data for the transaction.\nReturns the optional input data.\nTransaction data.\nTransaction data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the type and returns the optional input data.\nThe max fee per blob gas for EIP-4844 blob transactions.\nSets the maximum fee per gas for the transaction.\nThe max base fee per gas the sender is willing to pay.\nSets the maximum priority fee per gas for the transaction.\nThe max priority fee per gas the sender is willing to pay, …\nCreates a new instance with the given input data.\nCheck if all necessary keys are present to build a …\nCreates a new instance with the given input data.\nSets the nonce for the transaction.\nThe nonce of the transaction.\nPopulate the <code>blob_versioned_hashes</code> key, if a sidecar …\nCheck this builder’s preferred type, based on the fields …\nBlob sidecar for EIP-4844 transactions.\nSets the recipient address for the transaction.\nThe destination address of the transaction.\nSets the transactions type for the transactions.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nTrim field conflicts, based on the preferred type\nConsumes the type and returns the optional input data.\nReturns the optional input data.\nSets the value (amount) for the transaction.\nThe value transferred in the transaction, in wei.\nType that represents the signature parity byte, meant for …\nContainer type for all signature fields in RPC\nThis implementation disallows serialization of the y …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe R field of the signature; the point on the curve.\nThe S field of the signature; the point on the curve.\nFor EIP-155, EIP-2930 and Blob transactions this is set to …\nThe y parity of the signature. This is only used for typed …\nTransaction Pool Content\nTransaction Pool Content From\nTransaction Pool Inspect\nTransaction summary as found in the Txpool Inspection …\nVisitor struct for TxpoolInspectSummary.\nTransaction Pool Status\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas amount\nGas Price\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\npending tx\npending tx\npending tx\nnumber of pending tx\nqueued tx\nqueued tx\nqueued tx\nnumber of queued tx\nRemoves the transactions from the given sender\nRecipient (None when contract creation)\nTransferred value\nThe result of an <code>eth_getWork</code> request\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe block number: this isn’t always stored.\nThe proof-of-work hash.\nThe seed hash.\nThe target.\nOptimism specific transaction fields\nAdditional fields for Optimism transaction receipts\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nField indicating whether the transaction is a system …\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nThe ETH value to mint on L2\nHash that uniquely identifies the source of the deposit.\nA type that is supposed to capture additional fields that …\nContains all unknown fields\nBoolean parameter for new pending transactions.\nSyncing metadata.\nFull Transaction\nNew block header.\nLog\nLogs subscription.\nLog parameters.\nNew block headers subscription.\nNew Pending Transactions subscription.\nNo parameters passed.\nAny additional parameters for a subscription.\nResponse type for a SyncStatus subscription.\nIf not currently syncing, this should always be <code>false</code>.\nSubscription kind.\nSubscription result.\nSyncStatus\nSync status metadata.\nNode syncing status subscription.\nTransaction hash\nThe current block.\nThe highest block.\nThe starting block.\nWhether the node is currently syncing.\nEthereum Log\nContract that emitted this log.\nArbitrary length data.\nCalculate receipt logs bloom.\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nError thrown when both <code>data</code> and <code>input</code> fields are set and …\nRepresents <em>all</em> transaction requests to/from RPC.\nAn EIP-2930 access list, which lowers cost for accessing …\nBlob versioned hashes for EIP-4844 transactions.\nThe chain ID for the transaction.\nTransaction data\nThe address of the transaction author.\nThe gas limit for the transaction.\nThe legacy gas price.\nTransaction data.\nTransaction data\nThe max fee per blob gas for EIP-4844 blob transactions.\nThe max base fee per gas the sender is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe nonce of the transaction.\nBlob sidecar for EIP-4844 transactions.\nThe destination address of the transaction.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nThe value transferred in the transaction, in wei.\nCustom account override used in call\nA set of account overrides\nFake balance to set for the account before executing the …\nFake EVM bytecode to inject into the account before …\nFake nonce to set for the account before executing the …\nFake key-value mapping to override all slots in the …\nFake key-value mapping to override individual slots in the …\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list with gas used appended.\nReceipt envelope, as defined in EIP-2718.\nAlias for a catch-all receipt type.\nBase fee per gas integer conversion error\nBlob gas used integer conversion error\nThis represents a set of blobs, and its corresponding …\nError variants when converting from crate::Transaction to …\nReceipt envelope with type flag 2, containing a EIP-1559 …\nError during EIP-2718 transaction coding.\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nExcess blob gas integer conversion error\nGas limit integer conversion error\nGas used integer conversion error\nInvalid signature\nReceipt envelope with no type flag.\nMissing <code>accessList</code> field for EIP-2930 transaction.\nMissing <code>blobVersionedHashes</code> field for EIP-4844 transaction.\nMissing block number\nMissing <code>chainId</code> field for EIP-1559 transaction.\nMissing full transactions required for block decoding\nMissing <code>gasPrice</code> field for Legacy transaction.\nMissing <code>maxFeePerBlobGas</code> field for EIP-1559 transaction.\nMissing <code>maxFeePerGas</code> field for EIP-1559 transaction.\nMissing <code>maxPriorityFeePerGas</code> field for EIP-1559 …\nMissing signature for transaction.\nMissing <code>to</code> field for EIP-4844 transaction.\nMissing y parity in signature.\nAdditional fields for Optimism transaction receipts\nType that represents the signature parity byte, meant for …\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nContainer type for all signature fields in RPC\n<code>alloy_primitives::SignatureError</code>.\nTransaction object used in RPC\nAdditional fields in the context of a block that contains …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nEIP2930\nAccount addresses that would be loaded at the start of …\nBase fee of the block.\nThe price paid by the eip-4844 transaction per blob gas.\nBlob gas used by the eip-4844 transaction\nBlob versioned hashes for EIP-4844 transactions.\nContains the blob hashes for eip-4844 transactions.\nThe blob data.\nHash of the block.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block.\nNumber of the block this transaction was included within.\nBlock number\nThe chain ID for the transaction.\nThe chain id of the transaction, if any.\nThe blob commitments.\nContract address created, or None if not a deployment.\nGas used\nTransaction data\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nThe price paid post-execution by the transaction (i.e. …\nAddress of the sender\nThe address of the transaction author.\nSender\nThe gas limit for the transaction.\nGas amount\nThe legacy gas price.\nGas Price\nEstimated gas used with access list.\nGas used by this transaction alone.\nHash of the transaction.\nHash\nIndex of the transaction in the block\nThe inner struct.\nThe receipt envelope.\nThe receipt envelope, which contains the consensus receipt …\nTransaction data.\nTransaction data\nData\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nLog send from contracts.\nThe bloom filter.\nThe max fee per blob gas for EIP-4844 blob transactions.\nConfigured max fee per blob gas for eip-4844 transactions\nThe max base fee per gas the sender is willing to pay.\nMax BaseFeePerGas the user is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe miner’s tip.\nThe nonce of the transaction.\nNonce\nMisc Optimism-specific types.\nAll fields not present in the inner struct.\nArbitrary extra fields.\nThe blob proofs.\nThe R field of the signature; the point on the curve.\nThe receipt.\nAlloy basic Transaction Request type.\nThe S field of the signature; the point on the curve.\nBlob sidecar for EIP-4844 transactions.\nAll <em>flattened</em> fields of the transaction signature.\nThe post-transaction stateroot (pre Byzantium)\nIf transaction is executed successfully.\nKeys of storage that would be loaded at the start of …\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nRecipient\nTransaction Hash.\nIndex within the block.\nTransaction Index\nThe EIP-2718 transaction type. See EIP-2718 for more …\nEIP2718\nThe transaction type.\nFor EIP-155, EIP-2930 and Blob transactions this is set to …\nThe value transferred in the transaction, in wei.\nTransferred value\nThe y parity of the signature. This is only used for typed …\nOptimism specific transaction fields\nAdditional fields for Optimism transaction receipts\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nField indicating whether the transaction is a system …\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nThe ETH value to mint on L2\nHash that uniquely identifies the source of the deposit.\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nError thrown when both <code>data</code> and <code>input</code> fields are set and …\nRepresents <em>all</em> transaction requests to/from RPC.\nAn EIP-2930 access list, which lowers cost for accessing …\nBlob versioned hashes for EIP-4844 transactions.\nThe chain ID for the transaction.\nTransaction data\nThe address of the transaction author.\nThe gas limit for the transaction.\nThe legacy gas price.\nTransaction data.\nTransaction data\nThe max fee per blob gas for EIP-4844 blob transactions.\nThe max base fee per gas the sender is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe nonce of the transaction.\nBlob sidecar for EIP-4844 transactions.\nThe destination address of the transaction.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nThe value transferred in the transaction, in wei.\nTransaction Pool Content\nTransaction Pool Content From\nTransaction Pool Inspect\nTransaction summary as found in the Txpool Inspection …\nTransaction Pool Status\nGas amount\nGas Price\npending tx\npending tx\npending tx\nnumber of pending tx\nqueued tx\nqueued tx\nqueued tx\nnumber of queued tx\nRecipient (None when contract creation)\nTransferred value\nWrapper allowing to catch all fields missing on the inner …\nReturns the argument unchanged.\nThe inner struct.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Extra</code>.\nAll fields not present in the inner struct.")