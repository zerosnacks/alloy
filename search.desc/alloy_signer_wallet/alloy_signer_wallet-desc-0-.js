searchState.loadedDescShard("alloy_signer_wallet", 0, "alloy-signer-wallet\n<code>coins_bip32</code> error.\n<code>coins_bip39</code> error.\n<code>ecdsa</code> error.\n<code>eth_keystore</code> error.\n<code>hex</code> error.\n<code>std::io</code> error.\nA wallet instantiated with a locally stored private key\nRepresents a structure that can resolve into a <code>LocalWallet</code>.\n<code>MnemonicBuilder</code> error.\nAn Ethereum private-public key pair which can be used for …\nError thrown by <code>Wallet</code>.\nA wallet instantiated with a YubiHSM\nPhantomData\nReturns this wallet’s chain ID.\nThe wallet’s address.\nThe wallet’s address.\nThe wallet’s address.\nBorrow the secret <code>NonZeroScalar</code> value for this key.\nReturns this wallet’s chain ID.\nThe wallet’s chain ID (for EIP-155).\nThe wallet’s chain ID (for EIP-155).\nThe wallet’s chain ID (for EIP-155).\nConnects to a yubi key’s ECDSA account at the provided id\nDecrypts an encrypted JSON from the provided path to …\nThe derivation path at which the extended private key …\nCreates a new encrypted JSON with the provided private key …\nReturns the argument unchanged.\nCreates a new Wallet instance from a raw scalar serialized …\nCreates a new Wallet instance from a raw scalar serialized …\nUploads the provided keypair on the yubi at the provided id\nCreates a new Wallet instance from a <code>SigningKey</code>.\nCreates a new Wallet instance from a raw scalar serialized …\nCalls <code>U::from(self)</code>.\nConsumes this wallet and returns its signer.\nSpecific helper functions for creating/loading a mnemonic …\nCreates a new random ECDSA keypair on the yubi at the …\nCreates a new random encrypted JSON with the provided …\nConstruct a new wallet with an external <code>PrehashSigner</code>.\nOptional password for the mnemonic phrase.\nThe mnemonic phrase can be supplied to the builder as a …\n<code>k256</code> wallet implementation.\nCreates a new random keypair seeded with <code>rand::thread_rng()</code>…\nCreates a new random keypair seeded with the provided RNG.\nReturns this wallet’s signer.\nThe wallet’s private key.\nThe wallet’s private key.\nThe wallet’s private key.\nSerialize this <code>Wallet</code>’s <code>SigningKey</code> as a <code>B256</code> byte array.\nSerialize this <code>Wallet</code>’s <code>SigningKey</code> as a <code>FieldBytes</code> byte …\nThe mnemonic builder can also be asked to generate a new …\nOptional field that if enabled, writes the mnemonic phrase …\nYubiHSM2 wallet implementation.\n<code>coins_bip32</code> error.\n<code>coins_bip39</code> error.\n<code>ecdsa</code> error.\n<code>eth_keystore</code> error.\n<code>hex</code> error.\n<code>std::io</code> error.\n<code>MnemonicBuilder</code> error.\nError thrown by <code>Wallet</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError suggests that a phrase (path or words) was expected …\nRepresents a structure that can resolve into a <code>LocalWallet</code>.\nError produced by the mnemonic wallet module\nError suggests that a phrase (path or words) was not …\nPhantomData\nBuilds a <code>LocalWallet</code> using the parameters set in mnemonic …\nBuilds a <code>LocalWallet</code> using the parameters set in the …\nBuilds a <code>LocalWallet</code> using the parameters set in the …\nSets the derivation path of the child key to be derived.\nThe derivation path at which the extended private key …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the derivation path of the child key to be derived. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the password used to construct the seed from the …\nOptional password for the mnemonic phrase.\nSets the phrase in the mnemonic builder. The phrase can …\nThe mnemonic phrase can be supplied to the builder as a …\nSets the word count of a mnemonic phrase to be generated …\nThe mnemonic builder can also be asked to generate a new …\nSets the path to which the randomly generated phrase will …\nOptional field that if enabled, writes the mnemonic phrase …")