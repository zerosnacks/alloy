searchState.loadedDescShard("alloy_json_rpc", 0, "Alloy JSON-RPC data types.\nA batch of responses.\nA batch of requests.\nA batch of responses.\nA <code>ErrorPayload</code> that has been partially deserialized, …\nA <code>Response</code> that has been partially deserialized, borrowing …\nA <code>BorrowedResponsePacket</code> is a <code>ResponsePacket</code> that has been …\nA <code>ResponsePayload</code> that has been partially deserialized, …\nA partially deserialized <code>RpcResult</code>, borrowing from the …\nJSON deserialization error.\nContains the error value\nContains the error value\nA JSONRPC-2.0 error object.\nServer returned an error response.\nAn ethereum-style notification, not to be confused with a …\nAn error response payload.\nAn error response payload.\nA JSON-RPC 2.0 ID object. This may be a number, a string, …\nReturned when a local pre-processing step fails. This …\nNull.\nAn Ethereum-style notification.\nServer returned a null response when a non-null response …\nA number.\nContains the success value\nContains the success value\nA <code>Request</code> that has been partially serialized. The request …\nAn item received over an Ethereum pubsub transport. …\nA JSON-RPC 2.0 request object.\n<code>RequestMeta</code> contains the <code>Id</code> and method name of a request.\nA <code>RequestPacket</code> is a <code>SerializedRequest</code> or a batch of …\nA JSONRPC-2.0 response object containing a <code>ResponsePayload</code>.\nA <code>Response</code> to a JSON-RPC request.\nA <code>ResponsePacket</code> is a <code>Response</code> or a batch of responses.\nA JSONRPC-2.0 response payload.\nAn RPC error.\nAn object that can be used as a JSON-RPC parameter and …\nAn object that can be used as a JSON-RPC parameter.\nThe result of a JSON-RPC request.\nAn object that can be used as a JSON-RPC return value.\nJSON serialization error.\nA JSON-RPC 2.0 request object that has been serialized, …\nA single response.\nA single request.\nA single response.\nA string.\nA successful response payload.\nA successful response payload.\nTransport error.\nRpc server returned an unsupported feature.\nThe error code.\nThe error code.\nThe error data (if any).\nThe error data (if any).\nThe ID of the request that this response is responding to.\nThe request ID.\nThe ID of the request that this response is responding to.\nWhether the request is a subscription, other than …\nThe error message (if any).\nThe error message (if any).\nThe request metadata (ID and method).\nThe request metadata (ID and method).\nThe method name.\nThe request parameters.\nThe request parameters.\nThe response payload.\nThe response payload.\nThe notification payload.\nThe subscription ID.\nTransform a transport response into an <code>RpcResult</code>, …\nTransform a transport outcome into an <code>RpcResult</code>, …\nAttempt to deserialize the <code>Ok(_)</code> variant of an <code>RpcResult</code>.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nA JSON-RPC 2.0 ID object. This may be a number, a string, …\nNull.\nA number.\nA string.\nReturns the ID as a number, if it is one.\nReturns the ID as a string, if it is one.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the ID is <code>None</code>.\nReturns <code>true</code> if the ID is a number.\nReturns <code>true</code> if the ID is a string.\nJSON deserialization error.\nServer returned an error response.\nReturned when a local pre-processing step fails. This …\nServer returned a null response when a non-null response …\nAn RPC error.\nJSON serialization error.\nTransport error.\nRpc server returned an unsupported feature.\nFallible conversion to an error response.\nInstantiate a new <code>DeserError</code> from a <code>serde_json::Error</code> and …\nInstantiate a new <code>ErrorResp</code> from an error response.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if the error is a deserialization error.\nCheck if the error is an error response.\nCheck if the error is a local usage error.\nCheck if the error is a null response.\nCheck if the error is a serialization error.\nCheck if the error is a transport error.\nCheck if the error is an unsupported feature error.\nInstantiate a new <code>LocalUsageError</code> from a custom error.\nInstantiate a new <code>LocalUsageError</code> from a custom error …\nInstantiate a new <code>SerError</code> from a <code>serde_json::Error</code>. This …\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nAn ethereum-style notification, not to be confused with a …\nAn Ethereum-style notification.\nAn item received over an Ethereum pubsub transport. …\nA <code>Response</code> to a JSON-RPC request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe notification payload.\nThe subscription ID.\nA batch of responses.\nA batch of requests.\nA batch of responses.\nA <code>BorrowedResponsePacket</code> is a <code>ResponsePacket</code> that has been …\nA <code>RequestPacket</code> is a <code>SerializedRequest</code> or a batch of …\nA <code>ResponsePacket</code> is a <code>Response</code> or a batch of responses.\nAn Iterator over the ErrorPayloads in a ResponsePacket.\nA single response.\nA single request.\nA single response.\nReturns the ErrorPayload if the response is an error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this borrowed response packet into an owned packet …\nConvert this borrowed response packet into an owned packet …\nCheck if the packet is empty.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response payload is a success.\nReturns an iterator over the ErrorPayloads in the response.\nGet the number of requests in the packet.\nPush a request into the packet.\nFind responses by a list of IDs.\nSerialize the packet as a boxed <code>RawValue</code>.\nGet the request IDs of all subscription requests in the …\nCreate a new empty packet with the given capacity.\nA <code>Request</code> that has been partially serialized. The request …\nA JSON-RPC 2.0 request object.\n<code>RequestMeta</code> contains the <code>Id</code> and method name of a request.\nA JSON-RPC 2.0 request object that has been serialized, …\nSerialize the request parameters as a boxed <code>RawValue</code>.\nConsumes the serialized request, returning the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the request ID.\nThe request ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClone the request, including the request parameters.\nConsume the serialized request, returning the underlying …\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nWhether the request is a subscription, other than …\nReturns the request metadata (ID and Method).\nThe request metadata (ID and method).\nThe request metadata (ID and method).\nReturns the request method.\nThe method name.\nCreate a new <code>RequestMeta</code>.\nCreate a new <code>Request</code>.\nGet a reference to the serialized request’s params.\nThe request parameters.\nThe request parameters.\nGet the hash of the serialized request’s params.\nSerialize the request, including the request parameters.\nReturns the serialized request.\nIndicates that the request is a non-standard subscription …\nIndicates that the request is a non-standard subscription …\nMark the request as a non-standard subscription (i.e. not …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nTake the serialized request, consuming the …\nAttempt to deserialize the params, borrowing from the …\nAttempt to deserialize the params.\nA <code>Response</code> that has been partially deserialized, borrowing …\nA JSONRPC-2.0 response object containing a <code>ResponsePayload</code>.\nAttempt to deserialize the Error payload, transforming …\nAttempt to deserialize the Success payload, transforming …\nReturns the argument unchanged.\nThe ID of the request that this response is responding to.\nThe ID of the request that this response is responding to.\nCalls <code>U::from(self)</code>.\nConvert this borrowed response to an owned response by …\nConvert this borrowed response to an owned response by …\nReturns <code>true</code> if the response is an error.\nReturns <code>true</code> if the response is a success.\nThe response payload.\nThe response payload.\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the success payload, borrowing from …\nA <code>ErrorPayload</code> that has been partially deserialized, …\nA JSONRPC-2.0 error object.\nThe error code.\nThe error code.\nThe error data (if any).\nThe error data (if any).\nAttempt to deserialize the data field.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert this borrowed error payload into an owned payload …\nConvert this borrowed error payload into an owned payload …\nThe error message (if any).\nThe error message (if any).\nDeserialize the error’s <code>data</code> field, borrowing from the …\nA <code>ResponsePayload</code> that has been partially deserialized, …\nAn error response payload.\nAn error response payload.\nA JSONRPC-2.0 response payload.\nA successful response payload.\nA successful response payload.\nFallible conversion to the error object.\nFallible conversion to the successful payload.\nDeserialize an Error payload, if possible, transforming …\nDeserialize a Success payload, if possible, transforming …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert this borrowed response payload into an owned …\nConvert this borrowed response payload into an owned …\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response payload is a success.\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the success payload, borrowing from …\nA partially deserialized <code>RpcResult</code>, borrowing from the …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThe result of a JSON-RPC request.\nTransform a transport response into an <code>RpcResult</code>, …\nTransform a transport outcome into an <code>RpcResult</code>, …\nAttempt to deserialize the <code>Ok(_)</code> variant of an <code>RpcResult</code>.")